module Main {

import from RESTModul all;
import from JSONModul all;
import from Helper all;

import from Testcases_Disk all;
import from Testcases_Main all;
import from Testcases_Memory all;
import from Testcases_Process all;
import from Testcases_Processor all;

	control
    {
      // ==== CONFIG ====
      timer t0:=60.0;									// Test execution every x seconds 	====>	TestDuration := t0 x c_executionLimit
      const integer c_executionLimit := 10; 			// How often to execute 			====>	t0 - Intervall	c_executionLimit - How often
      const integer c_mttf := 43200;					// MTTF --> Mean time to failure	====>	Minimum duration without failure in seconds
      var integer v_executionCounter := 0;
      var SensorInstances v_sensorInstances;
      var ServiceInstance v_serviceInstance := 
      {
        hostname := "localhost",
        portnumber := 8090
      };
      AddSensor("mpc1493", 10005, v_sensorInstances);
      AddSensor("127.0.0.1", 10005, v_sensorInstances);
      AddProcessToSensor(v_sensorInstances[0], "HMSAP.LaytecViewer");
      AddProcessToSensor(v_sensorInstances[0], "LayTec.DatahubSystemTray");
      AddProcessToSensor(v_sensorInstances[0], "EpiNet-Display");
      AddProcessToSensor(v_sensorInstances[0], "java");
      AddProcessToSensor(v_sensorInstances[1], "java");


	  // ===== CREATE MEASUREMENT FOR EACH SENSOR AND GET SYSTEM DATA =====
      for(var integer i :=0; i<lengthof(v_sensorInstances); i:=i+1)
      {
        var JSONObject.Measurement v_measurement := {};
        var JSONObject.SystemObject v_measurementSystem := {};
        
        // Create Data and start measurement on service instance
        var verdicttype v_createData := execute(tc_createDataByHostname(
        											v_serviceInstance, 
        											v_sensorInstances[i].hostname, 
        											v_sensorInstances[i].portnumber,
        											v_measurement
        										));
       	// If failed, abort test execution with error
        if(v_createData==none or v_createData==error)
        {
          if(v_createData==none)
          {
            log_debug("Creating dataset by hostname failed. Received empty JSON-Response. Check parameters.");
          }
          else if(v_createData== error)
          {
            log_debug("Received error. Check if webservice is running on the given remote hostname and remote port.");
          }
          stop;
        }
        
        // Query system data of the sensor through service instance
        execute(tc_getMeasurementSystemByMeasurementId(v_serviceInstance, v_measurement.measurementId, v_measurementSystem));
        v_sensorInstances[i].measurement := v_measurement;
        v_sensorInstances[i].measurementSystem := v_measurementSystem;

        // ==== CREATE PROCESSES, so they will be tracked by the service instance ====
        var JSONObject.Processes v_allProcesses := {};
        for(var integer j := 0; j<lengthof(v_sensorInstances[i].measurementProcesses); j := j+1)
        {
          var JSONObject.Process v_currentProcess := v_sensorInstances[i].measurementProcesses[j]; 	
          var JSONObject.Processes v_currentProcesses := {};										
          execute(tc_createProcessesWithMeasurementId(
          	v_serviceInstance,
          	v_sensorInstances[i].measurement.measurementId, 
          	v_currentProcess, 
          	v_currentProcesses));
          for(var integer k := 0; k<lengthof(v_currentProcesses); k := k+1)
          {
            v_allProcesses[lengthof(v_allProcesses)] := v_currentProcesses[k];
          }
        }
        v_sensorInstances[i].measurementProcesses := v_allProcesses;
      }
      //=====EXECUTE TESTCASES REPEATEDLY=====
      label startTestcases;
      
      for(var integer i:=0; i<lengthof(v_sensorInstances); i:= i+1)
      {
        //=====MEMORY USAGE====
        execute
        (
        	tc_memoryAvailableLowerThan(
        		v_serviceInstance,
        		v_sensorInstances[i].measurement.measurementId, 
        		v_sensorInstances[i].measurementSystem.systemHardware.hardwareMemory.memoryTotalSpace, 
        		0.20
      		)
        );
        execute
        (
        	tc_memoryAvailableSlopeLowerThan(
        		v_serviceInstance,
        		v_sensorInstances[i].measurement.measurementId, 
        		v_sensorInstances[i].measurementSystem.systemHardware.hardwareMemory.memoryTotalSpace,
        		0.20,
        		c_mttf
      		)
        );
        
        //====CPU USAGE=====
        execute
        (
        	tc_processorUsageSinceStartGreaterThan(
        		v_serviceInstance,
        		v_sensorInstances[i].measurement.measurementId, 
        		v_sensorInstances[i].measurementSystem.systemHardware.hardwareProcessor.processorId, 
        		0.80
      		)
        );
        
        //====DISK USAGE====
        for(var integer j := 0; j< lengthof(v_sensorInstances[i].measurementSystem.systemHardware.hardwareDisks); j := j+1)
        {
          execute
        (
        	tc_diskUsageSinceStartGreaterThan(
        		v_serviceInstance,
        		v_sensorInstances[i].measurement.measurementId, 
        		v_sensorInstances[i].measurementSystem.systemHardware.hardwareDisks[j].diskSerialNumber, 
        		0.80
      		)
        );
        }

        //====PROCESS TESTCASES ====
        var JSONObject.Processes v_processes :=  v_sensorInstances[i].measurementProcesses;
        for(var integer j := 0; j<lengthof(v_processes); j:= j+1)
        {
          // GET DATA FOR EACH PROCESS
          var JSONObject v_values;
          execute
          (
          	tc_getProcessDataByPid
          	(
          		v_serviceInstance,
          		v_sensorInstances[i].measurement.measurementId,
          		v_processes[j].processId,
          		v_values          		
          	)
          )
          // CHECK PROCESS MEMORY USAGE GREATER THAN 20%
          //log_debug(
          //	"Testing if process memory usage in measurement with id " & int2str(v_sensorInstances[i].measurement.measurementId) 
          //	& " for the process "& v_processes[j].processName & " with pid " & int2str(v_processes[j].processPid) & " overstepped 20%");
          execute
          (
          	tc_processMemoryUsageGreaterThan
          	(
          		v_processes[j],
          		v_values,
          		v_sensorInstances[i].measurementSystem.systemHardware.hardwareMemory.memoryTotalSpace,
          		0.20
          	)
          )
          // CHECK TREND DETECTION AT THE END FOR PROCESS MEMORY USAGE, FAIL WHEN LEAK >173 Bytes/s (~100 MB / week)
          
          if(v_executionCounter > 5)
          {
          //  log_debug(
          //	"Testing if process memory usage trend in measurement with id " & int2str(v_sensorInstances[i].measurement.measurementId) 
          //	& " for the process "& v_processes[j].processName & " with pid " & int2str(v_processes[j].processPid) & " overstepped the mttf time");
            execute
          	(
            	tc_processMemoryUsageSlopeGreaterThan
            	(
            		v_processes[j],
            		v_values,
            		100000000.0,	// MAX ADDITIONAL 300 MB in MTTF_TIME
            		c_mttf
            	)
          	)
          	//log_debug(
          	//"Testing if process handle count trend in measurement with id " & int2str(v_sensorInstances[i].measurement.measurementId) 
          	//& " for the process "& v_processes[j].processName & " with pid " & int2str(v_processes[j].processPid) & " overstepped the mttf time");
            execute
          	(
            	tc_processHandlesSlopeGreaterThan
            	(
            		v_processes[j],
            		v_values,
            		500.0,	// MAX ADDITIONAL 500 HANDLES in MTTF_TIME
            		c_mttf
            	)
          	)
          }
        }
      }
      v_executionCounter := v_executionCounter + 1;
      if(v_executionCounter < c_executionLimit){
        t0.start;
      	t0.timeout;
        goto startTestcases;
      }
      for(var integer i := 0; i<lengthof(v_sensorInstances); i := i+1)
      {
        execute(tc_stopMeasurementByMeasurementId(v_serviceInstance, v_sensorInstances[i].measurement.measurementId));
      }
    }
}

