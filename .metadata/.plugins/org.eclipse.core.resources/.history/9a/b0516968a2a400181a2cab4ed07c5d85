package de.tub.qds.rm.controller;

import java.util.List;
import java.util.Optional;
import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import de.tub.qds.rm.models.consts.Disk;
import de.tub.qds.rm.models.consts.FileStore;
import de.tub.qds.rm.models.consts.FileSystem;
import de.tub.qds.rm.models.consts.repos.DiskRepo;
import de.tub.qds.rm.models.consts.repos.FileSystemRepo;
import de.tub.qds.rm.models.values.FileSystemValue;

@RestController
public class FileSystemController {
	
	@Autowired
	FileSystemRepo repo;
	@Autowired
	DiskRepo diskRepo;

	@RequestMapping(method = RequestMethod.GET, path = "/fileSystem", produces = "application/json")
	public List<FileSystem> getFileStores() {
		return repo.findAll();
	}
	
	@RequestMapping(method = RequestMethod.POST, path = "/fileSystem", produces = "application/json")
	public FileSystem postFileSystem() {
		return repo.save(new FileSystem());
	}
	
	@RequestMapping(method = RequestMethod.GET, path = "/fileSystem/{fileSystemId}", produces = "application/json")
	public FileSystem getFileSystemById(@PathVariable("fileSystemId") long fileSystemId) {
		return repo.existsById(fileSystemId) ? repo.findById(fileSystemId).get() : null;
	}
	
	@RequestMapping(method = RequestMethod.GET, path = "/fileSystem/{fileSystemId}/fileSystemDisk", produces = "application/json")
	public Disk getFileSystemByIdDisk(@PathVariable("fileSystemId") long fileSystemId) {
		return repo.existsById(fileSystemId) ? repo.findById(fileSystemId).get().getFileSystemDisk() : null;
	}
	
	@RequestMapping(method = RequestMethod.PUT, path = "/fileSystem/{fileSystemId}/fileSystemDisk", produces = "application/json")
	public FileSystem getFileSystemByIdDisk(@PathVariable("fileSystemId") long fileSystemId, @RequestParam("diskSerialNumber") String diskSerialNumber) {
		Optional<FileSystem> fileSystem = repo.findById(fileSystemId);
		if(!fileSystem.isPresent()) return null;
		Optional<Disk> disk = diskRepo.findById(diskSerialNumber);
		if(!disk.isPresent()) return null;
		fileSystem.get().setFileSystemDisk(disk.get());
		return repo.save(fileSystem.get());
	}
	
	@RequestMapping(method = RequestMethod.GET, path = "/fileSystem/{fileSystemId}/fileSystemFileStores", produces = "application/json")
	public Set<FileStore> getFileSystemByIdFileStores(@PathVariable("fileSystemId") long fileSystemId) {
		return repo.existsById(fileSystemId) ? repo.findById(fileSystemId).get().getFileSystemFileStores() : null;
	}
	
	@RequestMapping(method = RequestMethod.GET, path = "/fileSystem/{fileSystemId}/fileSystemValues", produces = "application/json")
	public Set<FileSystemValue> getFileSystemByIdValuess(@PathVariable("fileSystemId") long fileSystemId) {
		return repo.existsById(fileSystemId) ? repo.findById(fileSystemId).get().getFileSystemValues() : null;
	}

}
