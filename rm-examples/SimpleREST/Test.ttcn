module Test {

const charstring  	v_hostname :="localhost";
const integer     	v_port := 10005;


import from rmplugin all;
import from HTTPmsg_Types all;
import from HTTPmsg_PortType all;
type component HTTP_CT 
{
	port HTTPmsg_PT HTTP_PCO;
}



function SendRESTRequest(in template HTTPMessage t_request) runs on HTTP_CT return JSONObject
{
  	map(self:HTTP_PCO, system:HTTP_PCO);
    var Connect_result v_Connect_result;
    var RESTRequest v_HTTPMessage_request;
    var HTTPMessage  v_HTTPMessage_response;
    template Close t_close := { client_id := omit}
    template Connect t_connect := { hostname := v_hostname, portnumber := v_port, use_ssl := false };
    var integer v_http_client_id;
    var JSONObject v_JSON_PDU;
    
    log(t_request.request.header)
   
    timer t0:=5.0;    
    //Connect
    HTTP_PCO.send(t_connect) ;
    t0.start;
    alt 
    {
      []HTTP_PCO.receive(Connect_result:?) -> value v_Connect_result { v_http_client_id:=v_Connect_result.client_id}
      []t0.timeout { }
  
    }
    
    HTTP_PCO.send(t_request)

    alt 
    {
      []HTTP_PCO.receive(HTTPMessage:?)  -> value v_HTTPMessage_response
      {
        if (ischosen(v_HTTPMessage_response.response_binary))
        {
          v_JSON_PDU := dec_JSON(v_HTTPMessage_response.response_binary.body);
        }
        if (ischosen(v_HTTPMessage_response.response))
        {
          v_JSON_PDU := dec_JSON(char2oct(v_HTTPMessage_response.response.body));
        }
      }
    }
    //Close
    HTTP_PCO.send(t_close) 
    t0.start;
    alt 
    {
      []HTTP_PCO.receive {}
      []t0.timeout {}
    }
    
  	all component.kill;
	return v_JSON_PDU;

}

function ContentLength (in charstring par_body)  return charstring

{
  var charstring a:=int2str(lengthof (par_body))
  return a;

}




testcase tc_memoryAvailable() runs on HTTP_CT{
  
  	
  	var template HTTPMessage get_request := t_GET_Request("/systemInfo/hardware/memory", "localhost:10005");
	var JSONObject result :=SendRESTRequest(get_request);
	setverdict(pass);

  
}

control
{
  execute( tc_memoryAvailable());
}
}

