// This C++ source file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/6 R4C
// for U-LAYTEC\mcleish (mcleish@LT-411-0143) on Mon Jan  7 14:21:57 2019

// Copyright (c) 2000-2018 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

/* Including header files */

#include "REST_demo.hh"

namespace REST__demo {

/* Prototypes of static functions */

static void pre_init_module();
static void post_init_module();
static boolean set_module_param(Module_Param& param);
static void log_module_param();
static boolean init_comp_type(const char *component_type, boolean init_base_comps);
static boolean init_system_port(const char* component_type, const char* port_name);
static void module_control_part();

/* Literal string constants */

static const CHARSTRING cs_21(0, NULL),
cs_14(11, "&#70;&#116;"),
cs_32(3, "*/*"),
cs_26('/'),
cs_29(25, "/json.gp\?ip=89.147.71.240"),
cs_6('0'),
cs_1(14, "136.225.41.157"),
cs_11(7, "16.9167"),
cs_12(2, "24"),
cs_10(9, "46.549999"),
cs_2(13, "89.147.71.240"),
cs_17(':'),
cs_3(15, "AAAAAAAAAAAAAAA"),
cs_33(21, "AFTER-CONNECT with ID"),
cs_18(6, "Accept"),
cs_20(15, "Accept-Encoding"),
cs_22(14, "Content-Length"),
cs_9(2, "EU"),
cs_31(16, "EclipseTitan/5.3"),
cs_15(2, "Ft"),
cs_25(3, "GET"),
cs_7(2, "HU"),
cs_13(3, "HUF"),
cs_16(4, "Host"),
cs_8(7, "Hungary"),
cs_24(22, "My very own Web Server"),
cs_28(3, "NOK"),
cs_27(2, "OK"),
cs_4(4, "Part"),
cs_23(6, "Server"),
cs_30(10, "User-Agent"),
cs_5(4, "Zala"),
cs_19(17, "text/*, text/html"),
cs_0(17, "www.geoplugin.net");
static const unsigned char module_checksum[] = { 0x9d, 0x29, 0x38, 0xef, 0x2b, 0x7f, 0xa5, 0xe8, 0x1c, 0xc0, 0xc8, 0xe9, 0x3b, 0x8a, 0x47, 0x13 };

/* Global variable definitions */

static CHARSTRING modulepar_tsp__HostName;
const CHARSTRING& tsp__HostName = modulepar_tsp__HostName;
static INTEGER modulepar_tsp__HttpPort;
const INTEGER& tsp__HttpPort = modulepar_tsp__HttpPort;
static CHARSTRING modulepar_tsp__LocalHostName;
const CHARSTRING& tsp__LocalHostName = modulepar_tsp__LocalHostName;
static INTEGER modulepar_tsp__LocalHttpPort;
const INTEGER& tsp__LocalHttpPort = modulepar_tsp__LocalHttpPort;
// No XER for Http__state
const TTCN_Typedescriptor_t Http__state_descr_ = { "@REST_demo.Http_state", NULL, NULL, NULL, NULL, NULL, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const TTCN_Typedescriptor_t& HTTP__CT_descr_ = COMPONENT_descr_;
Http__state HTTP__CT_component_v__http__state;
const XERdescriptor_t       _T_HTTP__CT_component_vl__char_xer_ = { {"CHARSTRING>\n", "CHARSTRING>\n"}, {12, 12}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_Typedescriptor_t _T_HTTP__CT_component_vl__char_descr_ = { "@REST_demo.HTTP_CT.vl_char.<type>", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &_T_HTTP__CT_component_vl__char_xer_, &CHARSTRING_json_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
CHARSTRING HTTP__CT_component_vl__char;
CHARSTRING HTTP__CT_component_vl__char0;
HTTPmsg__Types::Connect__result HTTP__CT_component_vl__Connect__result;
HTTPmsg__Types::Connect HTTP__CT_component_vl__Connect;
HTTPmsg__Types::Listen__result HTTP__CT_component_vl__Listen__result;
HTTPmsg__Types::Listen HTTP__CT_component_vl__Listen;
HTTPmsg__Types::Close HTTP__CT_component_vl__Close;
HTTPmsg__Types::Half__close HTTP__CT_component_vl__Half__close;
HTTPmsg__Types::Shutdown HTTP__CT_component_vl__Shutdown;
HTTPmsg__Types::Client__connected HTTP__CT_component_vl__Client__connected;
HTTPmsg__Types::HTTPMessage HTTP__CT_component_vl__HTTPMessage;
const XERdescriptor_t       _T_HTTP__CT_component_vl__http__client__id_xer_ = { {"INTEGER>\n", "INTEGER>\n"}, {9, 9}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_Typedescriptor_t _T_HTTP__CT_component_vl__http__client__id_descr_ = { "@REST_demo.HTTP_CT.vl_http_client_id.<type>", &INTEGER_ber_, &INTEGER_raw_, &INTEGER_text_, &_T_HTTP__CT_component_vl__http__client__id_xer_, &INTEGER_json_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
INTEGER HTTP__CT_component_vl__http__client__id;
INTEGER HTTP__CT_component_vl__tcp__client__id;
CHARSTRING HTTP__CT_component_vl__body;
OCTETSTRING HTTP__CT_component_vl__body__bin;
BOOLEAN HTTP__CT_component_v__run;
TIMER HTTP__CT_component_Tone("Tone");
HTTPmsg__PortType::HTTPmsg__PT HTTP__CT_component_HTTP__PCO("HTTP_PCO");
static geoplugin::JSON__PDU_template template_t__jsonTemplate;
const geoplugin::JSON__PDU_template& t__jsonTemplate = template_t__jsonTemplate;
static HTTPmsg__Types::Listen_template template_t__Listen;
const HTTPmsg__Types::Listen_template& t__Listen = template_t__Listen;
static HTTPmsg__Types::Connect_template template_t__Connect;
const HTTPmsg__Types::Connect_template& t__Connect = template_t__Connect;
static HTTPmsg__Types::HeaderLines_template template_t__ResponseHeader;
const HTTPmsg__Types::HeaderLines_template& t__ResponseHeader = template_t__ResponseHeader;
static HTTPmsg__Types::HTTPMessage_template template_t__HTTP__OK__Response;
const HTTPmsg__Types::HTTPMessage_template& t__HTTP__OK__Response = template_t__HTTP__OK__Response;
static HTTPmsg__Types::HTTPMessage_template template_t__HTTP__NotOK__Response;
const HTTPmsg__Types::HTTPMessage_template& t__HTTP__NotOK__Response = template_t__HTTP__NotOK__Response;
TTCN_Module module_object("REST_demo", __DATE__, __TIME__, module_checksum, pre_init_module, NULL, 0U, 4294967295U, 4294967295U, 4294967295U, NULL, 0LU, 0, post_init_module, set_module_param, NULL, log_module_param, init_comp_type, init_system_port, NULL, module_control_part);

static const RuntimeVersionChecker ver_checker(  current_runtime_version.requires_major_version_6,
  current_runtime_version.requires_minor_version_4,
  current_runtime_version.requires_patch_level_2,  current_runtime_version.requires_runtime_1);

/* Member functions of C++ classes */

Http__state::Http__state()
{
enum_value = UNBOUND_VALUE;
}

Http__state::Http__state(int other_value)
{
if (!is_valid_enum(other_value)) TTCN_error("Initializing a variable of enumerated type @REST_demo.Http_state with invalid numeric value %d.", other_value);
enum_value = (enum_type)other_value;
}

Http__state::Http__state(enum_type other_value)
{
enum_value = other_value;
}

Http__state::Http__state(const Http__state& other_value)
: Base_Type()
{
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("Copying an unbound value of enumerated type @REST_demo.Http_state.");
enum_value = other_value.enum_value;
}

Http__state& Http__state::operator=(int other_value)
{
if (!is_valid_enum(other_value)) TTCN_error("Assigning unknown numeric value %d to a variable of enumerated type @REST_demo.Http_state.", other_value);
enum_value = (enum_type)other_value;
return *this;
}

Http__state& Http__state::operator=(enum_type other_value)
{
enum_value = other_value;
return *this;
}

Http__state& Http__state::operator=(const Http__state& other_value)
{
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("Assignment of an unbound value of enumerated type @REST_demo.Http_state.");
enum_value = other_value.enum_value;
return *this;
}

boolean Http__state::operator==(enum_type other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @REST_demo.Http_state.");
return enum_value == other_value;
}

boolean Http__state::operator==(const Http__state& other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @REST_demo.Http_state.");
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of enumerated type @REST_demo.Http_state.");
return enum_value == other_value.enum_value;
}

boolean Http__state::operator<(enum_type other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @REST_demo.Http_state.");
return enum_value < other_value;
}

boolean Http__state::operator<(const Http__state& other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @REST_demo.Http_state.");
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of enumerated type @REST_demo.Http_state.");
return enum_value < other_value.enum_value;
}

boolean Http__state::operator>(enum_type other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @REST_demo.Http_state.");
return enum_value > other_value;
}

boolean Http__state::operator>(const Http__state& other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @REST_demo.Http_state.");
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of enumerated type @REST_demo.Http_state.");
return enum_value > other_value.enum_value;
}

const char *Http__state::enum_to_str(enum_type enum_par)
{
switch (enum_par) {
case active: return "active";
case passive: return "passive";
default: return "<unknown>";
}
}

Http__state::enum_type Http__state::str_to_enum(const char *str_par)
{
if (!strcmp(str_par, "active")) return active;
else if (!strcmp(str_par, "passive")) return passive;
else return UNKNOWN_VALUE;
}

boolean Http__state::is_valid_enum(int int_par)
{
switch (int_par) {
case 0:
case 1:
return TRUE;
default:
return FALSE;
}
}

int Http__state::enum2int(enum_type enum_par)
{
if (enum_par==UNBOUND_VALUE || enum_par==UNKNOWN_VALUE) TTCN_error("The argument of function enum2int() is an %s value of enumerated type @REST_demo.Http_state.", enum_par==UNBOUND_VALUE?"unbound":"invalid");
return enum_par;
}

int Http__state::enum2int(const Http__state& enum_par)
{
if (enum_par.enum_value==UNBOUND_VALUE || enum_par.enum_value==UNKNOWN_VALUE) TTCN_error("The argument of function enum2int() is an %s value of enumerated type @REST_demo.Http_state.", enum_par==UNBOUND_VALUE?"unbound":"invalid");
return enum_par.enum_value;
}

void Http__state::int2enum(int int_val)
{
if (!is_valid_enum(int_val)) TTCN_error("Assigning invalid numeric value %d to a variable of enumerated type @REST_demo.Http_state.", int_val);
enum_value = (enum_type)int_val;
}

Http__state::operator Http__state::enum_type() const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("Using the value of an unbound variable of enumerated type @REST_demo.Http_state.");
return enum_value;
}

void Http__state::log() const
{
if (enum_value != UNBOUND_VALUE) TTCN_Logger::log_event_enum(enum_to_str(enum_value), enum_value);
else TTCN_Logger::log_event_unbound();
}

void Http__state::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE, "enumerated value");
  if (param.get_type()!=Module_Param::MP_Enumerated) param.type_error("enumerated value", "@REST_demo.Http_state");
  enum_value = str_to_enum(param.get_enumerated());
  if (!is_valid_enum(enum_value)) {
    param.error("Invalid enumerated value for type @REST_demo.Http_state.");
  }
}

void Http__state::encode_text(Text_Buf& text_buf) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("Text encoder: Encoding an unbound value of enumerated type @REST_demo.Http_state.");
text_buf.push_int(enum_value);
}

void Http__state::decode_text(Text_Buf& text_buf)
{
enum_value = (enum_type)text_buf.pull_int().get_val();
if (!is_valid_enum(enum_value)) TTCN_error("Text decoder: Unknown numeric value %d was received for enumerated type @REST_demo.Http_state.", enum_value);
}

void Http__state_template::copy_template(const Http__state_template& other_value)
{
set_selection(other_value);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = other_value.single_value;
break;
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Http__state_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of enumerated type @REST_demo.Http_state.");
}
}

Http__state_template::Http__state_template()
{
}

Http__state_template::Http__state_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

Http__state_template::Http__state_template(int other_value)
 : Base_Template(SPECIFIC_VALUE)
{
if (!Http__state::is_valid_enum(other_value)) TTCN_error("Initializing a template of enumerated type @REST_demo.Http_state with unknown numeric value %d.", other_value);
single_value = (Http__state::enum_type)other_value;
}

Http__state_template::Http__state_template(Http__state::enum_type other_value)
 : Base_Template(SPECIFIC_VALUE)
{
single_value = other_value;
}

Http__state_template::Http__state_template(const Http__state& other_value)
 : Base_Template(SPECIFIC_VALUE)
{
if (other_value.enum_value == Http__state::UNBOUND_VALUE) TTCN_error("Creating a template from an unbound value of enumerated type @REST_demo.Http_state.");
single_value = other_value.enum_value;
}

Http__state_template::Http__state_template(const OPTIONAL<Http__state>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
set_selection(SPECIFIC_VALUE);
single_value = (Http__state::enum_type)(const Http__state&)other_value;
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of enumerated type @REST_demo.Http_state from an unbound optional field.");
}
}

Http__state_template::Http__state_template(const Http__state_template& other_value)
 : Base_Template()
{
copy_template(other_value);
}

Http__state_template::~Http__state_template()
{
clean_up();
}

boolean Http__state_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
return TRUE;
}

boolean Http__state_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
return single_value != Http__state::UNBOUND_VALUE;
}

void Http__state_template::clean_up()
{
if (template_selection == VALUE_LIST || template_selection == COMPLEMENTED_LIST) delete [] value_list.list_value;
template_selection = UNINITIALIZED_TEMPLATE;
}

Http__state_template& Http__state_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Http__state_template& Http__state_template::operator=(int other_value)
{
if (!Http__state::is_valid_enum(other_value)) TTCN_warning("Assigning unknown numeric value %d to a template of enumerated type @REST_demo.Http_state.", other_value);
clean_up();
set_selection(SPECIFIC_VALUE);
single_value = (Http__state::enum_type)other_value;
return *this;
}

Http__state_template& Http__state_template::operator=(Http__state::enum_type other_value)
{
clean_up();
set_selection(SPECIFIC_VALUE);
single_value = other_value;
return *this;
}

Http__state_template& Http__state_template::operator=(const Http__state& other_value)
{
if (other_value.enum_value == Http__state::UNBOUND_VALUE) TTCN_error("Assignment of an unbound value of enumerated type @REST_demo.Http_state to a template.");
clean_up();
set_selection(SPECIFIC_VALUE);
single_value = other_value.enum_value;
return *this;
}

Http__state_template& Http__state_template::operator=(const OPTIONAL<Http__state>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
set_selection(SPECIFIC_VALUE);
single_value = (Http__state::enum_type)(const Http__state&)other_value;
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of enumerated type @REST_demo.Http_state.");
}
return *this;
}

Http__state_template& Http__state_template::operator=(const Http__state_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean Http__state_template::match(Http__state::enum_type other_value, boolean) const
{
switch (template_selection) {
case SPECIFIC_VALUE:
return single_value == other_value;
case OMIT_VALUE:
return FALSE;
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of enumerated type @REST_demo.Http_state.");
}
return FALSE;
}

boolean Http__state_template::match(const Http__state& other_value, boolean) const
{
if (other_value.enum_value == Http__state::UNBOUND_VALUE) TTCN_error("Matching a template of enumerated type @REST_demo.Http_state with an unbound value.");
return match(other_value.enum_value);
}

Http__state::enum_type Http__state_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) TTCN_error("Performing a valueof or send operation on a non-specific template of enumerated type @REST_demo.Http_state.");
return single_value;
}

void Http__state_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST) TTCN_error("Setting an invalid list type for a template of enumerated type @REST_demo.Http_state.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new Http__state_template[list_length];
}

Http__state_template& Http__state_template::list_item(unsigned int list_index)
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST) TTCN_error("Accessing a list element in a non-list template of enumerated type @REST_demo.Http_state.");
if (list_index >= value_list.n_values) TTCN_error("Index overflow in a value list template of enumerated type @REST_demo.Http_state.");
return value_list.list_value[list_index];
}

void Http__state_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_enum(Http__state::enum_to_str(single_value), single_value);
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int elem_count = 0; elem_count < value_list.n_values; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[elem_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void Http__state_template::log_match(const Http__state& match_value, boolean) const
{
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}

void Http__state_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
text_buf.push_int(single_value);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int elem_count = 0; elem_count < value_list.n_values; elem_count++)
value_list.list_value[elem_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of enumerated type @REST_demo.Http_state.");
}
}

void Http__state_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = (Http__state::enum_type)text_buf.pull_int().get_val();
if (!Http__state::is_valid_enum(single_value)) TTCN_error("Text decoder: Unknown numeric value %d was received for a template of enumerated type @REST_demo.Http_state.", single_value);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Http__state_template[value_list.n_values];
for (unsigned int elem_count = 0; elem_count < value_list.n_values; elem_count++)
value_list.list_value[elem_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received for a template of enumerated type @REST_demo.Http_state.");
}
}

boolean Http__state_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean Http__state_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int i=0; i<value_list.n_values; i++)
if (value_list.list_value[i].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

void Http__state_template::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_TEMPLATE, "enumerated template");
  Module_Param_Ptr m_p = &param;
  switch (m_p->get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    Http__state_template new_temp;
    new_temp.set_type(m_p->get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, m_p->get_size());
    for (size_t p_i=0; p_i<m_p->get_size(); p_i++) {
      new_temp.list_item(p_i).set_param(*m_p->get_elem(p_i));
    }
    *this = new_temp;
    break; }
  case Module_Param::MP_Enumerated: {
    Http__state::enum_type enum_val = Http__state::str_to_enum(m_p->get_enumerated());
    if (!Http__state::is_valid_enum(enum_val)) {
      param.error("Invalid enumerated value for type @REST_demo.Http_state.");
    }
    *this = enum_val;
  } break;
  default:
    param.type_error("enumerated template", "@REST_demo.Http_state");
  }
  is_ifpresent = param.get_ifpresent();
}

void Http__state_template::check_restriction(template_res t_res, const char* t_name,
boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_VALUE:
if (!is_ifpresent && template_selection==SPECIFIC_VALUE) return;
break;
case TR_OMIT:
if (!is_ifpresent && (template_selection==OMIT_VALUE || template_selection==SPECIFIC_VALUE)) return;
break;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@REST_demo.Http_state");
}


/* Bodies of functions, altsteps and testcases */

HTTPmsg__Types::Close_template t__Close(const INTEGER_template& p__clientId)
{
HTTPmsg__Types::Close_template ret_val;
ret_val.client__id() = p__clientId;
return ret_val;
}

HTTPmsg__Types::Half__close_template t__Half__close(const INTEGER_template& p__clientId)
{
HTTPmsg__Types::Half__close_template ret_val;
ret_val.client__id() = p__clientId;
return ret_val;
}

HTTPmsg__Types::HeaderLines_template t__RequestHeader(const CHARSTRING& par__body)
{
HTTPmsg__Types::HeaderLines_template ret_val;
ret_val.set_size(4);
{
HTTPmsg__Types::HeaderLine_template& tmp_1 = ret_val[0];
tmp_1.header__name() = cs_16;
tmp_1.header__value() = ((tsp__HostName + cs_17) + int2str(tsp__HttpPort));
}
{
HTTPmsg__Types::HeaderLine_template& tmp_2 = ret_val[1];
tmp_2.header__name() = cs_18;
tmp_2.header__value() = cs_19;
}
{
HTTPmsg__Types::HeaderLine_template& tmp_3 = ret_val[2];
tmp_3.header__name() = cs_20;
tmp_3.header__value() = cs_21;
}
{
HTTPmsg__Types::HeaderLine_template& tmp_4 = ret_val[3];
tmp_4.header__name() = cs_22;
tmp_4.header__value() = ContentLength(par__body);
}
return ret_val;
}

HTTPmsg__Types::HeaderLines_template t__Response2Header(const CHARSTRING& par__body)
{
HTTPmsg__Types::HeaderLines_template ret_val;
ret_val.set_size(2);
{
HTTPmsg__Types::HeaderLine_template& tmp_7 = ret_val[0];
tmp_7.header__name() = cs_23;
tmp_7.header__value() = cs_24;
}
{
HTTPmsg__Types::HeaderLine_template& tmp_8 = ret_val[1];
tmp_8.header__name() = cs_22;
tmp_8.header__value() = ContentLength(par__body);
}
return ret_val;
}

HTTPmsg__Types::HTTPMessage_template t__HTTP__Request(const INTEGER& par__client, const HTTPmsg__Types::HeaderLines_template& par__header, const CHARSTRING_template& par__body)
{
HTTPmsg__Types::HTTPMessage_template ret_val;
{
HTTPmsg__Types::HTTPRequest_template& tmp_9 = ret_val.request();
tmp_9.client__id() = par__client;
tmp_9.method() = cs_25;
tmp_9.uri() = cs_26;
tmp_9.version__major() = 1;
tmp_9.version__minor() = 1;
tmp_9.header() = par__header;
tmp_9.body() = par__body;
}
return ret_val;
}

HTTPmsg__Types::HTTPMessage_template t__HTTP__OK__Resp(const INTEGER& par__client, const HTTPmsg__Types::HeaderLines_template& par__header, const CHARSTRING_template& par__body)
{
HTTPmsg__Types::HTTPMessage_template ret_val;
{
HTTPmsg__Types::HTTPResponse_template& tmp_12 = ret_val.response();
tmp_12.client__id() = par__client;
tmp_12.version__major() = 1;
tmp_12.version__minor() = 1;
tmp_12.statuscode() = 200;
tmp_12.statustext() = cs_27;
tmp_12.header() = par__header;
tmp_12.body() = par__body;
}
return ret_val;
}

HTTPmsg__Types::HTTPMessage_template t__HTTP__NotOK__Resp(const INTEGER& par__client, const HTTPmsg__Types::HeaderLines_template& par__header, const CHARSTRING_template& par__body)
{
HTTPmsg__Types::HTTPMessage_template ret_val;
{
HTTPmsg__Types::HTTPResponse_template& tmp_13 = ret_val.response();
tmp_13.client__id() = par__client;
tmp_13.version__major() = 1;
tmp_13.version__minor() = 1;
tmp_13.statuscode() = 500;
tmp_13.statustext() = cs_28;
tmp_13.header() = par__header;
tmp_13.body() = par__body;
}
return ret_val;
}

CHARSTRING ContentLength(const CHARSTRING& par__body)
{
/* ../REST_demo.ttcn3, line 273 */
CHARSTRING a(int2str(par__body.lengthof()));
/* ../REST_demo.ttcn3, line 274 */
return a;
}

HTTPmsg__Types::HTTPMessage_template t__request(const INTEGER& p__clientid)
{
HTTPmsg__Types::HTTPMessage_template ret_val;
{
HTTPmsg__Types::HTTPRequest_template& tmp_14 = ret_val.request();
tmp_14.client__id() = p__clientid;
tmp_14.method() = cs_25;
tmp_14.uri() = cs_29;
tmp_14.version__major() = 1;
tmp_14.version__minor() = 1;
{
HTTPmsg__Types::HeaderLines_template& tmp_15 = tmp_14.header();
tmp_15.set_size(3);
{
HTTPmsg__Types::HeaderLine_template& tmp_16 = tmp_15[0];
tmp_16.header__name() = cs_16;
tmp_16.header__value() = tsp__HostName;
}
{
HTTPmsg__Types::HeaderLine_template& tmp_17 = tmp_15[1];
tmp_17.header__name() = cs_30;
tmp_17.header__value() = cs_31;
}
{
HTTPmsg__Types::HeaderLine_template& tmp_18 = tmp_15[2];
tmp_18.header__name() = cs_18;
tmp_18.header__value() = cs_32;
}
}
tmp_14.body() = cs_21;
}
return ret_val;
}

HTTPmsg__Types::Close_template t__close(const INTEGER& p__clientid)
{
HTTPmsg__Types::Close_template ret_val;
ret_val.client__id() = p__clientid;
return ret_val;
}

verdicttype testcase_tc__encdec__JSON(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
try {
TTCN_Runtime::begin_testcase("REST_demo", "tc_encdec_JSON", "REST_demo", "HTTP_CT", "REST_demo", "HTTP_CT", has_timer, timer_value);
/* ../REST_demo.ttcn3, line 295 */
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("JSON Template before encoding : ");
t__jsonTemplate.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
/* ../REST_demo.ttcn3, line 297 */
OCTETSTRING v__encodedPDU(geoplugin::enc__JSON(t__jsonTemplate.valueof()));
/* ../REST_demo.ttcn3, line 298 */
geoplugin::JSON__PDU v__decodedPDU(geoplugin::dec__JSON(v__encodedPDU));
/* ../REST_demo.ttcn3, line 299 */
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("Encoded JSON: ");
v__encodedPDU.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
/* ../REST_demo.ttcn3, line 300 */
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("Decoded JSON: ");
v__decodedPDU.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case tc_encdec_JSON was stopped.");
}
return TTCN_Runtime::end_testcase();
}

verdicttype testcase_tc__geoplugin(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
try {
TTCN_Runtime::begin_testcase("REST_demo", "tc_geoplugin", "REST_demo", "HTTP_CT", "REST_demo", "HTTP_CT", has_timer, timer_value);
/* ../REST_demo.ttcn3, line 316 */
HTTPmsg__Types::Connect__result v__Connect__result;
/* ../REST_demo.ttcn3, line 317 */
HTTPmsg__Types::Connect v__Connect;
/* ../REST_demo.ttcn3, line 318 */
HTTPmsg__Types::Listen__result v__Listen__result;
/* ../REST_demo.ttcn3, line 319 */
HTTPmsg__Types::Listen v__Listen;
/* ../REST_demo.ttcn3, line 320 */
HTTPmsg__Types::Close v__Close;
/* ../REST_demo.ttcn3, line 321 */
HTTPmsg__Types::Half__close v__Half__close;
/* ../REST_demo.ttcn3, line 322 */
HTTPmsg__Types::Shutdown v__Shutdown;
/* ../REST_demo.ttcn3, line 323 */
HTTPmsg__Types::Client__connected v__Client__connected;
/* ../REST_demo.ttcn3, line 324 */
CHARSTRING vl__char__body;
/* ../REST_demo.ttcn3, line 325 */
OCTETSTRING v__body;
/* ../REST_demo.ttcn3, line 326 */
HTTPmsg__Types::HTTPMessage v__HTTPMessage;
/* ../REST_demo.ttcn3, line 327 */
INTEGER v__http__client__id;
/* ../REST_demo.ttcn3, line 328 */
TIMER t0("t0", 3.0);
/* ../REST_demo.ttcn3, line 331 */
TTCN_Runtime::map_port(self, HTTP__CT_component_HTTP__PCO.get_name(), SYSTEM_COMPREF, HTTP__CT_component_HTTP__PCO.get_name());
/* ../REST_demo.ttcn3, line 333 */
HTTPmsg__Types::Connect vl__connect;
vl__connect.hostname() = tsp__HostName;
vl__connect.portnumber() = tsp__HttpPort;
vl__connect.use__ssl() = FALSE;
/* ../REST_demo.ttcn3, line 334 */
TTCN_Logger::log_str(TTCN_USER, "PRE-CONNECT");
/* ../REST_demo.ttcn3, line 335 */
HTTP__CT_component_HTTP__PCO.send(vl__connect);
/* ../REST_demo.ttcn3, line 336 */
t0.start();
/* ../REST_demo.ttcn3, line 337 */
{
tmp_19:
alt_status tmp_19_alt_flag_0 = ALT_MAYBE;
alt_status tmp_19_alt_flag_1 = ALT_MAYBE;
alt_status tmp_19_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_19_alt_flag_0 == ALT_MAYBE) {
/* ../REST_demo.ttcn3, line 340 */
tmp_19_alt_flag_0 = HTTP__CT_component_HTTP__PCO.receive(HTTPmsg__Types::Connect__result_template(ANY_VALUE), &(v__Connect__result), any_compref, NULL, NULL, NULL);
if (tmp_19_alt_flag_0 == ALT_YES) {
/* ../REST_demo.ttcn3, line 342 */
v__http__client__id = const_cast< const HTTPmsg__Types::Connect__result&>(v__Connect__result).client__id();
/* ../REST_demo.ttcn3, line 343 */
try {
TTCN_Logger::begin_event(TTCN_USER);
(cs_33 + int2str(v__http__client__id)).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
break;
}
}
if (tmp_19_alt_flag_1 == ALT_MAYBE) {
/* ../REST_demo.ttcn3, line 345 */
tmp_19_alt_flag_1 = t0.timeout(NULL);
if (tmp_19_alt_flag_1 == ALT_YES) {
/* ../REST_demo.ttcn3, line 347 */
TTCN_Logger::log_str(TTCN_USER, "AFTER-CONNECT: TIMEOUT");
break;
}
}
if (tmp_19_default_flag == ALT_MAYBE) {
tmp_19_default_flag = TTCN_Default::try_altsteps();
if (tmp_19_default_flag == ALT_YES || tmp_19_default_flag == ALT_BREAK) break;
else if (tmp_19_default_flag == ALT_REPEAT) goto tmp_19;
}
/* ../REST_demo.ttcn3, line 337 */
if (tmp_19_alt_flag_0 == ALT_NO && tmp_19_alt_flag_1 == ALT_NO && tmp_19_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file ../REST_demo.ttcn3 between lines 337 and 349.");
TTCN_Snapshot::take_new(TRUE);
}
}
/* ../REST_demo.ttcn3, line 352 */
HTTP__CT_component_HTTP__PCO.send(t__request(v__http__client__id));
/* ../REST_demo.ttcn3, line 353 */
TTCN_Logger::log_str(TTCN_USER, "Test");
/* ../REST_demo.ttcn3, line 354 */
{
tmp_21:
alt_status tmp_21_alt_flag_0 = ALT_MAYBE;
alt_status tmp_21_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_21_alt_flag_0 == ALT_MAYBE) {
/* ../REST_demo.ttcn3, line 357 */
tmp_21_alt_flag_0 = HTTP__CT_component_HTTP__PCO.receive(HTTPmsg__Types::HTTPMessage_template(ANY_VALUE), &(v__HTTPMessage), any_compref, NULL, NULL, NULL);
if (tmp_21_alt_flag_0 == ALT_YES) {
/* ../REST_demo.ttcn3, line 359 */
TTCN_Logger::log_str(TTCN_USER, "Test");
/* ../REST_demo.ttcn3, line 360 */
if (v__HTTPMessage.ischosen(HTTPmsg__Types::HTTPMessage::ALT_response__binary)) {
/* ../REST_demo.ttcn3, line 362 */
v__body = const_cast< const HTTPmsg__Types::HTTPMessage&>(v__HTTPMessage).response__binary().body();
/* ../REST_demo.ttcn3, line 363 */
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("v_body");
v__body.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
/* ../REST_demo.ttcn3, line 364 */
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("encodingtype");
get_stringencoding(v__body).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
}
else {
/* ../REST_demo.ttcn3, line 366 */
if (v__HTTPMessage.ischosen(HTTPmsg__Types::HTTPMessage::ALT_response)) {
/* ../REST_demo.ttcn3, line 370 */
vl__char__body = const_cast< const HTTPmsg__Types::HTTPMessage&>(v__HTTPMessage).response().body();
/* ../REST_demo.ttcn3, line 371 */
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("vl_char_body");
vl__char__body.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
/* ../REST_demo.ttcn3, line 372 */
geoplugin::JSON__PDU v__JSON__PDU(geoplugin::dec__JSON(char2oct(vl__char__body)));
/* ../REST_demo.ttcn3, line 373 */
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("decoded JSON response");
v__JSON__PDU.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
}
}
break;
}
}
if (tmp_21_default_flag == ALT_MAYBE) {
tmp_21_default_flag = TTCN_Default::try_altsteps();
if (tmp_21_default_flag == ALT_YES || tmp_21_default_flag == ALT_BREAK) break;
else if (tmp_21_default_flag == ALT_REPEAT) goto tmp_21;
}
/* ../REST_demo.ttcn3, line 354 */
if (tmp_21_alt_flag_0 == ALT_NO && tmp_21_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file ../REST_demo.ttcn3 between lines 354 and 378.");
TTCN_Snapshot::take_new(TRUE);
}
}
/* ../REST_demo.ttcn3, line 380 */
HTTP__CT_component_HTTP__PCO.send(t__close(v__http__client__id));
/* ../REST_demo.ttcn3, line 381 */
t0.start();
/* ../REST_demo.ttcn3, line 382 */
{
tmp_24:
alt_status tmp_24_alt_flag_0 = ALT_MAYBE;
alt_status tmp_24_alt_flag_1 = ALT_MAYBE;
alt_status tmp_24_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_24_alt_flag_0 == ALT_MAYBE) {
/* ../REST_demo.ttcn3, line 385 */
tmp_24_alt_flag_0 = HTTP__CT_component_HTTP__PCO.receive(any_compref, NULL, NULL, NULL);
if (tmp_24_alt_flag_0 == ALT_YES) break;
}
if (tmp_24_alt_flag_1 == ALT_MAYBE) {
/* ../REST_demo.ttcn3, line 386 */
tmp_24_alt_flag_1 = t0.timeout(NULL);
if (tmp_24_alt_flag_1 == ALT_YES) break;
}
if (tmp_24_default_flag == ALT_MAYBE) {
tmp_24_default_flag = TTCN_Default::try_altsteps();
if (tmp_24_default_flag == ALT_YES || tmp_24_default_flag == ALT_BREAK) break;
else if (tmp_24_default_flag == ALT_REPEAT) goto tmp_24;
}
/* ../REST_demo.ttcn3, line 382 */
if (tmp_24_alt_flag_0 == ALT_NO && tmp_24_alt_flag_1 == ALT_NO && tmp_24_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file ../REST_demo.ttcn3 between lines 382 and 387.");
TTCN_Snapshot::take_new(TRUE);
}
}
/* ../REST_demo.ttcn3, line 390 */
TTCN_Runtime::kill_component(ALL_COMPREF);
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case tc_geoplugin was stopped.");
}
return TTCN_Runtime::end_testcase();
}


/* Bodies of static functions */

static void pre_init_module()
{
geoplugin::module_object.pre_init_module();
HTTPmsg__PortType::module_object.pre_init_module();
/* ../REST_demo.ttcn3, line 51 */
modulepar_tsp__HostName = cs_0;
/* ../REST_demo.ttcn3, line 52 */
modulepar_tsp__HttpPort = 80;
/* ../REST_demo.ttcn3, line 55 */
modulepar_tsp__LocalHostName = cs_1;
/* ../REST_demo.ttcn3, line 56 */
modulepar_tsp__LocalHttpPort = 9998;
module_object.add_function("ContentLength", (genericfunc_t)&ContentLength, NULL);
module_object.add_testcase_nonpard("tc_encdec_JSON", testcase_tc__encdec__JSON);
module_object.add_testcase_nonpard("tc_geoplugin", testcase_tc__geoplugin);
}

static void post_init_module()
{
geoplugin::module_object.post_init_module();
HTTPmsg__PortType::module_object.post_init_module();
/* ../REST_demo.ttcn3, line 120 */
{
geoplugin::Geoplugin__response_template& tmp_0 = template_t__jsonTemplate.geoplugin__response();
tmp_0.geoplugin__request() = cs_2;
tmp_0.geoplugin__status() = 200;
tmp_0.geoplugin__credit() = cs_3;
tmp_0.geoplugin__city() = cs_4;
tmp_0.geoplugin__region() = cs_5;
tmp_0.geoplugin__areaCode() = cs_6;
tmp_0.geoplugin__dmaCode() = cs_6;
tmp_0.geoplugin__countryCode() = cs_7;
tmp_0.geoplugin__countryName() = cs_8;
tmp_0.geoplugin__continentCode() = cs_9;
tmp_0.geoplugin__latitude() = cs_10;
tmp_0.geoplugin__longitude() = cs_11;
tmp_0.geoplugin__regionCode() = cs_12;
tmp_0.geoplugin__regionName() = cs_5;
tmp_0.geoplugin__currencyCode() = cs_13;
tmp_0.geoplugin__currencySymbol() = cs_14;
tmp_0.geoplugin__currencySymbol__UTF8() = cs_15;
tmp_0.geoplugin__currencyConverter() = 3.0e2;
}
/* ../REST_demo.ttcn3, line 149 */
template_t__Listen.local__hostname() = tsp__LocalHostName;
template_t__Listen.portnumber() = tsp__LocalHttpPort;
template_t__Listen.use__ssl() = FALSE;
/* ../REST_demo.ttcn3, line 152 */
template_t__Connect.hostname() = tsp__HostName;
template_t__Connect.portnumber() = tsp__HttpPort;
template_t__Connect.use__ssl() = FALSE;
/* ../REST_demo.ttcn3, line 172 */
template_t__ResponseHeader.set_size(2);
{
HTTPmsg__Types::HeaderLine_template& tmp_5 = template_t__ResponseHeader[0];
tmp_5.header__name() = cs_23;
tmp_5.header__value() = cs_24;
}
{
HTTPmsg__Types::HeaderLine_template& tmp_6 = template_t__ResponseHeader[1];
tmp_6.header__name() = cs_22;
tmp_6.header__value() = ANY_VALUE;
}
/* ../REST_demo.ttcn3, line 208 */
{
HTTPmsg__Types::HTTPResponse_template& tmp_10 = template_t__HTTP__OK__Response.response();
tmp_10.client__id() = ANY_VALUE;
tmp_10.version__major() = 1;
tmp_10.version__minor() = 1;
tmp_10.statuscode() = 200;
tmp_10.statustext() = cs_27;
tmp_10.header() = ANY_VALUE;
tmp_10.body() = ANY_VALUE;
}
/* ../REST_demo.ttcn3, line 222 */
{
HTTPmsg__Types::HTTPResponse_template& tmp_11 = template_t__HTTP__NotOK__Response.response();
tmp_11.client__id() = ANY_VALUE;
tmp_11.version__major() = 1;
tmp_11.version__minor() = 1;
tmp_11.statuscode() = 500;
tmp_11.statustext() = cs_28;
tmp_11.header() = ANY_VALUE;
tmp_11.body() = ANY_VALUE;
}
}

static boolean set_module_param(Module_Param& param)
{
const char* const par_name = param.get_id()->get_current_name();
if (!strcmp(par_name, "tsp_HostName")) {
modulepar_tsp__HostName.set_param(param);
return TRUE;
} else if (!strcmp(par_name, "tsp_HttpPort")) {
modulepar_tsp__HttpPort.set_param(param);
return TRUE;
} else if (!strcmp(par_name, "tsp_LocalHostName")) {
modulepar_tsp__LocalHostName.set_param(param);
return TRUE;
} else if (!strcmp(par_name, "tsp_LocalHttpPort")) {
modulepar_tsp__LocalHttpPort.set_param(param);
return TRUE;
} else return FALSE;
}

static void log_module_param()
{
TTCN_Logger::log_event_str("tsp_HostName := ");
tsp__HostName.log();
TTCN_Logger::log_event_str(", tsp_HttpPort := ");
tsp__HttpPort.log();
TTCN_Logger::log_event_str(", tsp_LocalHostName := ");
tsp__LocalHostName.log();
TTCN_Logger::log_event_str(", tsp_LocalHttpPort := ");
tsp__LocalHttpPort.log();
}

static boolean init_comp_type(const char *component_type, boolean init_base_comps)
{
(void)init_base_comps;
if (!strcmp(component_type, "HTTP_CT")) {
HTTP__CT_component_v__http__state.clean_up();
HTTP__CT_component_vl__char.clean_up();
HTTP__CT_component_vl__char0.clean_up();
HTTP__CT_component_vl__Connect__result.clean_up();
HTTP__CT_component_vl__Connect.clean_up();
HTTP__CT_component_vl__Listen__result.clean_up();
HTTP__CT_component_vl__Listen.clean_up();
HTTP__CT_component_vl__Close.clean_up();
HTTP__CT_component_vl__Half__close.clean_up();
HTTP__CT_component_vl__Shutdown.clean_up();
HTTP__CT_component_vl__Client__connected.clean_up();
HTTP__CT_component_vl__HTTPMessage.clean_up();
HTTP__CT_component_vl__http__client__id.clean_up();
HTTP__CT_component_vl__tcp__client__id.clean_up();
HTTP__CT_component_vl__body.clean_up();
HTTP__CT_component_vl__body__bin.clean_up();
HTTP__CT_component_v__run.clean_up();
HTTP__CT_component_HTTP__PCO.activate_port();
return TRUE;
} else return FALSE;
}

static boolean init_system_port(const char* component_type, const char* port_name)
{
if (!strcmp(component_type, "HTTP_CT")) {
if (!strcmp(port_name, "HTTP_PCO")) {
HTTP__CT_component_HTTP__PCO.safe_start();
return TRUE;
}
}
return FALSE;
}

static void module_control_part()
{
TTCN_Runtime::begin_controlpart("REST_demo");
/* ../REST_demo.ttcn3, line 396 */
testcase_tc__encdec__JSON(FALSE, 0.0);
/* ../REST_demo.ttcn3, line 397 */
testcase_tc__geoplugin(FALSE, 0.0);
TTCN_Runtime::end_controlpart();
}


} /* end of namespace */
