// This C++ source file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/6 R4C
// for U-LAYTEC\mcleish (mcleish@LT-411-0143) on Thu Jan  3 14:01:37 2019

// Copyright (c) 2000-2018 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

/* Including header files */

#include "HTTP_Test_no_ASPs.hh"

namespace HTTP__Test__no__ASPs {

/* Prototypes of static functions */

static void pre_init_module();
static void post_init_module();
static boolean set_module_param(Module_Param& param);
static void log_module_param();
static boolean init_comp_type(const char *component_type, boolean init_base_comps);
static boolean init_system_port(const char* component_type, const char* port_name);
static boolean start_ptc_function(const char *function_name, Text_Buf& function_arguments);
static void module_control_part();

/* Literal string constants */

static const unsigned char os_0_octets[] = { 72, 84, 84, 80, 47, 49, 46, 49, 32, 51, 48, 50, 32, 77, 111, 118, 101, 100, 32, 84, 101, 109, 112, 111, 114, 97, 114, 105, 108, 121, 13, 10, 68, 97, 116, 101, 58, 32, 87, 101, 100, 44, 32, 50, 50, 32, 70, 101, 98, 32, 50, 48, 48, 54, 32, 49, 51, 58, 51, 55, 58, 52, 57, 32, 71, 77, 84, 13, 10, 80, 114, 97, 103, 109, 97, 58, 32, 110, 111, 45, 99, 97, 99, 104, 101, 13, 10, 76, 111, 99, 97, 116, 105, 111, 110, 58, 32, 104, 116, 116, 112, 58, 47, 47, 99, 97, 121, 108, 101, 109, 46, 101, 116, 109, 46, 101, 114, 105, 99, 115, 115, 111, 110, 46, 115, 101, 58, 55, 48, 48, 49, 47, 77, 99, 120, 79, 119, 117, 47, 108, 105, 115, 116, 95, 117, 115, 101, 114, 97, 99, 116, 105, 111, 110, 115, 46, 106, 115, 112, 63, 114, 101, 108, 111, 97, 100, 13, 10, 67, 111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 32, 116, 101, 120, 116, 47, 104, 116, 109, 108, 13, 10, 69, 120, 112, 105, 114, 101, 115, 58, 32, 83, 97, 116, 44, 32, 54, 32, 77, 97, 121, 32, 49, 57, 57, 53, 32, 49, 50, 58, 48, 48, 58, 48, 48, 32, 71, 77, 84, 13, 10, 84, 114, 97, 110, 115, 102, 101, 114, 45, 69, 110, 99, 111, 100, 105, 110, 103, 58, 32, 99, 104, 117, 110, 107, 101, 100, 13, 10, 67, 97, 99, 104, 101, 45, 67, 111, 110, 116, 114, 111, 108, 58, 32, 110, 111, 45, 115, 116, 111, 114, 101, 44, 32, 110, 111, 45, 99, 97, 99, 104, 101, 44, 32, 109, 117, 115, 116, 45, 114, 101, 118, 97, 108, 105, 100, 97, 116, 101, 13, 10, 67, 97, 99, 104, 101, 45, 67, 111, 110, 116, 114, 111, 108, 58, 32, 112, 111, 115, 116, 45, 99, 104, 101, 99, 107, 61, 48, 44, 32, 112, 114, 101, 45, 99, 104, 101, 99, 107, 61, 48, 13, 10, 13, 10, 60, 104, 116, 109, 108, 62, 60, 104, 101, 97, 100, 62, 60, 116, 105, 116, 108, 101, 62, 51, 48, 50, 32, 77, 111, 118, 101, 100, 32, 84, 101, 109, 112, 111, 114, 97, 114, 105, 108, 121, 60, 47, 116, 105, 116, 108, 101, 62, 60, 47, 104, 101, 97, 100, 62, 13, 10, 60, 98, 111, 100, 121, 32, 98, 103, 99, 111, 108, 111, 114, 61, 34, 35, 70, 70, 70, 70, 70, 70, 34, 62, 13, 10, 60, 112, 62, 84, 104, 105, 115, 32, 100, 111, 99, 117, 109, 101, 110, 116, 32, 121, 111, 117, 32, 114, 101, 113, 117, 101, 115, 116, 101, 100, 32, 104, 97, 115, 32, 109, 111, 118, 101, 100, 32, 116, 101, 109, 112, 111, 114, 97, 114, 105, 108, 121, 46, 60, 47, 112, 62, 13, 10, 60, 112, 62, 73, 116, 39, 115, 32, 110, 111, 119, 32, 97, 116, 32, 60, 97, 32, 104, 114, 101, 102, 61, 34, 104, 116, 116, 112, 58, 47, 47, 99, 97, 121, 108, 101, 109, 46, 101, 116, 109, 46, 101, 114, 105, 99, 115, 115, 111, 110, 46, 115, 101, 58, 55, 48, 48, 49, 47, 77, 99, 120, 79, 119, 117, 47, 108, 105, 115, 116, 95, 117, 115, 101, 114, 97, 99, 116, 105, 111, 110, 115, 46, 106, 115, 112, 63, 114, 101, 108, 111, 97, 100, 34, 62, 104, 116, 116, 112, 58, 47, 47, 99, 97, 121, 108, 101, 109, 46, 101, 116, 109, 46, 101, 114, 105, 99, 115, 115, 111, 110, 46, 115, 101, 58, 55, 48, 48, 49, 47, 77, 99, 120, 79, 119, 117, 47, 108, 105, 115, 116, 95, 117, 115, 101, 114, 97, 99, 116, 105, 111, 110, 115, 46, 106, 115, 112, 63, 114, 101, 108, 111, 97, 100, 60, 47, 97, 62, 46, 60, 47, 112, 62, 13, 10, 60, 47, 98, 111, 100, 121, 62, 60, 47, 104, 116, 109, 108, 62, 13, 10, 72, 84, 84, 80, 47, 49, 46, 49, 32, 50, 48, 48, 32, 79, 75, 13, 10, 68, 97, 116, 101, 58, 32, 87, 101, 100, 44, 32, 50, 50, 32, 70, 101, 98, 32, 50, 48, 48, 54, 32, 49, 51, 58, 51, 55, 58, 52, 57, 32, 71, 77, 84, 13, 10, 67, 111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 32, 116, 101, 120, 116, 47, 104, 116, 109, 108, 13, 10, 84, 114, 97, 110, 115, 102, 101, 114, 45, 69, 110, 99, 111, 100, 105, 110, 103, 58, 32, 99, 104, 117, 110, 107, 101, 100, 13, 10, 13, 10, 13, 10, 13, 10, 13, 10, 13, 10, 13, 10, 13, 10, 13, 10, 13, 10, 13, 10, 60, 33, 68, 79, 67, 84, 89, 80, 69, 32, 72, 84, 77, 76, 32, 80, 85, 66, 76, 73, 67, 32, 34, 45, 47, 47, 87, 51, 67, 47, 47, 68, 84, 68, 32, 72, 84, 77, 76, 32, 52, 46, 48, 49, 32, 84, 114, 97, 110, 115, 105, 116, 105, 111, 110, 97, 108, 47, 47, 69, 78, 34, 62, 13, 10, 13, 10, 60, 104, 116, 109, 108, 62, 13, 10, 60, 104, 101, 97, 100, 62, 13, 10, 60, 116, 105, 116, 108, 101, 62, 80, 114, 101, 115, 101, 110, 99, 101, 60, 47, 116, 105, 116, 108, 101, 62, 13, 10, 13, 10, 60, 115, 99, 114, 105, 112, 116, 62, 13, 10, 118, 97, 114, 32, 102, 114, 97, 109, 101, 115, 101, 116, 50, 32, 61, 32, 110, 117, 108, 108, 59, 13, 10, 118, 97, 114, 32, 102, 114, 97, 109, 101, 115, 101, 116, 49, 32, 61, 32, 110, 117, 108, 108, 59, 13, 10, 13, 10, 118, 97, 114, 32, 119, 105, 110, 87, 32, 61, 32, 54, 51, 48, 44, 32, 119, 105, 110, 72, 32, 61, 32, 52, 54, 48, 59, 13, 10, 13, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 103, 101, 116, 87, 105, 110, 83, 105, 122, 101, 40, 41, 32, 123, 13, 10, 9, 105, 102, 32, 40, 112, 97, 114, 115, 101, 73, 110, 116, 40, 110, 97, 118, 105, 103, 97, 116, 111, 114, 46, 97, 112, 112, 86, 101, 114, 115, 105, 111, 110, 41, 62, 51, 41, 32, 123, 13, 10, 9, 32, 105, 102, 32, 40, 110, 97, 118, 105, 103, 97, 116, 111, 114, 46, 97, 112, 112, 78, 97, 109, 101, 61, 61, 34, 78, 101, 116, 115, 99, 97, 112, 101, 34, 41, 32, 123, 13, 10, 9, 32, 32, 119, 105, 110, 87, 32, 61, 32, 119, 105, 110, 100, 111, 119, 46, 105, 110, 110, 101, 114, 87, 105, 100, 116, 104, 59, 13, 10, 9, 32, 32, 119, 105, 110, 72, 32, 61, 32, 119, 105, 110, 100, 111, 119, 46, 105, 110, 110, 101, 114, 72, 101, 105, 103, 104, 116, 59, 13, 10, 9, 32, 125, 13, 10, 9, 32, 105, 102, 32, 40, 110, 97, 118, 105, 103, 97, 116, 111, 114, 46, 97, 112, 112, 78, 97, 109, 101, 46, 105, 110, 100, 101, 120, 79, 102, 40, 34, 77, 105, 99, 114, 111, 115, 111, 102, 116, 34, 41, 33, 61, 45, 49, 41, 32, 123, 13, 10, 9, 32, 32, 119, 105, 110, 87, 32, 61, 32, 100, 111, 99, 117, 109, 101, 110, 116, 46, 98, 111, 100, 121, 46, 111, 102, 102, 115, 101, 116, 87, 105, 100, 116, 104, 59, 13, 10, 9, 32, 32, 119, 105, 110, 72, 32, 61, 32, 100, 111, 99, 117, 109, 101, 110, 116, 46, 98, 111, 100, 121, 46, 111, 102, 102, 115, 101, 116, 72, 101, 105, 103, 104, 116, 59, 13, 10, 9, 32, 125, 13, 10, 9, 125, 13, 10, 9, 47, 47, 97, 108, 101, 114, 116, 40, 34, 119, 105, 110, 87, 61, 34, 32, 43, 32, 119, 105, 110, 87, 32, 43, 32, 34, 32, 119, 105, 110, 72, 61, 34, 32, 43, 32, 119, 105, 110, 72, 41, 59, 13, 10, 125, 13, 10, 118, 97, 114, 32, 99, 117, 114, 114, 82, 111, 119, 32, 61, 32, 110, 117, 108, 108, 59, 13, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 116, 114, 95, 109, 111, 117, 115, 101, 111, 118, 101, 114, 40, 114, 111, 119, 41, 32, 123, 13, 10, 9, 105, 102, 32, 40, 33, 114, 111, 119, 41, 32, 123, 13, 10, 9, 9, 114, 111, 119, 32, 61, 32, 103, 101, 116, 114, 111, 119, 40, 119, 105, 110, 100, 111, 119, 46, 101, 118, 101, 110, 116, 46, 115, 114, 99, 69, 108, 101, 109, 101, 110, 116, 41, 59, 13, 10, 9, 9, 105, 102, 32, 40, 33, 114, 111, 119, 41, 114, 101, 116, 117, 114, 110, 59, 13, 10, 9, 125, 13, 10, 9, 105, 102, 32, 40, 114, 111, 119, 46, 115, 116, 121, 108, 101, 46, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 67, 111, 108, 111, 114, 32, 61, 61, 32, 34, 34, 41, 32, 123, 13, 10, 9, 9, 114, 111, 119, 46, 115, 116, 121, 108, 101, 46, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 67, 111, 108, 111, 114, 32, 61, 32, 34, 108, 105, 103, 104, 116, 103, 114, 101, 121, 34, 59, 13, 10, 9, 125, 13, 10, 125, 13, 10, 13, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 116, 114, 95, 109, 111, 117, 115, 101, 111, 117, 116, 40, 114, 111, 119, 41, 32, 123, 13, 10, 9, 105, 102, 32, 40, 33, 114, 111, 119, 41, 32, 123, 13, 10, 9, 9, 114, 111, 119, 32, 61, 32, 103, 101, 116, 114, 111, 119, 40, 119, 105, 110, 100, 111, 119, 46, 101, 118, 101, 110, 116, 46, 115, 114, 99, 69, 108, 101, 109, 101, 110, 116, 41, 59, 13, 10, 9, 9, 105, 102, 32, 40, 33, 114, 111, 119, 41, 114, 101, 116, 117, 114, 110, 59, 13, 10, 9, 125, 13, 10, 9, 105, 102, 32, 40, 114, 111, 119, 46, 115, 116, 121, 108, 101, 46, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 67, 111, 108, 111, 114, 32, 61, 61, 32, 34, 108, 105, 103, 104, 116, 103, 114, 101, 121, 34, 41, 32, 123, 13, 10, 9, 9, 114, 111, 119, 46, 115, 116, 121, 108, 101, 46, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 67, 111, 108, 111, 114, 61, 32, 34, 34, 59, 13, 10, 9, 125, 13, 10, 125, 13, 10, 13, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 103, 101, 116, 114, 111, 119, 40, 111, 98, 106, 41, 13, 10, 123, 13, 10, 9, 119, 104, 105, 108, 101, 40, 111, 98, 106, 32, 38, 38, 32, 111, 98, 106, 46, 116, 97, 103, 78, 97, 109, 101, 32, 33, 61, 32, 34, 84, 82, 34, 41, 32, 111, 98, 106, 32, 61, 32, 111, 98, 106, 46, 112, 97, 114, 101, 110, 116, 78, 111, 100, 101, 59, 13, 10, 9, 114, 101, 116, 117, 114, 110, 32, 111, 98, 106, 59, 13, 10, 125, 13, 10, 47, 47, 32, 82, 101, 109, 111, 118, 101, 32, 108, 101, 97, 100, 105, 110, 103, 32, 97, 110, 100, 32, 116, 114, 97, 105, 108, 105, 110, 103, 32, 119, 104, 105, 116, 101, 32, 115, 112, 97, 99, 101, 13, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 116, 114, 105, 109, 40, 116, 120, 116, 41, 32, 123, 9, 13, 10, 9, 47, 47, 97, 108, 101, 114, 116, 40, 34, 116, 114, 105, 109, 61, 34, 32, 43, 32, 116, 120, 116, 41, 59, 13, 10, 9, 13, 10, 9, 116, 114, 121, 32, 123, 13, 10, 9, 9, 114, 101, 116, 117, 114, 110, 32, 116, 120, 116, 46, 114, 101, 112, 108, 97, 99, 101, 40, 47, 40, 94, 32, 43, 41, 124, 40, 32, 43, 36, 41, 124, 40, 9, 41, 47, 103, 44, 34, 34, 41, 59, 13, 10, 9, 125, 32, 99, 97, 116, 99, 104, 32, 40, 101, 41, 32, 123, 13, 10, 9, 9, 118, 97, 114, 32, 120, 32, 61, 32, 110, 101, 119, 32, 83, 116, 114, 105, 110, 103, 40, 116, 120, 116, 41, 59, 13, 10, 9, 9, 9, 47, 47, 97, 108, 101, 114, 116, 40, 34, 120, 61, 34, 32, 43, 32, 120, 41, 59, 13, 10, 9, 9, 119, 104, 105, 108, 101, 32, 40, 120, 46, 99, 104, 97, 114, 65, 116, 40, 48, 41, 32, 61, 61, 32, 34, 32, 34, 41, 32, 123, 13, 10, 9, 9, 9, 120, 32, 61, 32, 120, 46, 115, 117, 98, 115, 116, 114, 105, 110, 103, 40, 49, 41, 59, 13, 10, 9, 9, 9, 105, 102, 32, 40, 120, 46, 108, 101, 110, 103, 116, 104, 32, 61, 61, 32, 48, 41, 32, 114, 101, 116, 117, 114, 110, 32, 34, 34, 59, 13, 10, 9, 9, 9, 47, 47, 97, 108, 101, 114, 116, 40, 34, 120, 61, 34, 32, 43, 32, 120, 41, 59, 13, 10, 9, 9, 125, 13, 10, 9, 9, 105, 102, 32, 40, 120, 46, 108, 101, 110, 103, 116, 104, 32, 61, 61, 32, 48, 41, 32, 114, 101, 116, 117, 114, 110, 32, 34, 34, 59, 13, 10, 9, 9, 119, 104, 105, 108, 101, 32, 40, 120, 46, 99, 104, 97, 114, 65, 116, 40, 120, 46, 108, 101, 110, 103, 116, 104, 32, 45, 32, 49, 41, 32, 61, 61, 32, 34, 32, 34, 41, 32, 123, 13, 10, 9, 9, 9, 120, 32, 61, 32, 120, 46, 115, 117, 98, 115, 116, 114, 105, 110, 103, 40, 48, 44, 32, 120, 46, 108, 101, 110, 103, 116, 104, 45, 49, 41, 59, 13, 10, 9, 9, 9, 105, 102, 32, 40, 120, 46, 108, 101, 110, 103, 116, 104, 32, 61, 61, 32, 48, 41, 32, 114, 101, 116, 117, 114, 110, 32, 34, 34, 59, 13, 10, 9, 9, 125, 13, 10, 9, 13, 10, 9, 9, 114, 101, 116, 117, 114, 110, 32, 120, 59, 9, 13, 10, 9, 9, 13, 10, 9, 13, 10, 9, 125, 13, 10, 13, 10, 125, 13, 10, 13, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 110, 111, 116, 121, 101, 116, 105, 109, 112, 108, 101, 109, 101, 110, 116, 101, 100, 40, 41, 13, 10, 123, 13, 10, 9, 97, 108, 101, 114, 116, 40, 34, 110, 111, 116, 32, 121, 101, 116, 32, 105, 109, 112, 108, 101, 109, 101, 110, 116, 101, 100, 34, 41, 59, 13, 10, 125, 13, 10, 13, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 108, 111, 103, 111, 117, 116, 40, 41, 13, 10, 123, 13, 10, 9, 116, 111, 112, 46, 102, 114, 97, 109, 101, 115, 91, 34, 95, 111, 119, 117, 95, 104, 105, 100, 100, 101, 110, 34, 93, 46, 108, 111, 99, 97, 116, 105, 111, 110, 46, 97, 115, 115, 105, 103, 110, 40, 34, 104, 105, 100, 100, 101, 110, 95, 108, 111, 103, 111, 117, 116, 46, 106, 115, 112, 34, 41, 59, 13, 10, 47, 47, 9, 119, 105, 110, 100, 111, 119, 46, 112, 97, 114, 101, 110, 116, 46, 102, 114, 97, 109, 101, 115, 91, 34, 95, 111, 119, 117, 95, 104, 105, 100, 100, 101, 110, 34, 93, 46, 108, 111, 99, 97, 116, 105, 111, 110, 46, 97, 115, 115, 105, 103, 110, 40, 34, 104, 105, 100, 100, 101, 110, 95, 108, 111, 103, 111, 117, 116, 46, 106, 115, 112, 34, 41, 59, 13, 10, 125, 13, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 111, 114, 101, 102, 114, 101, 115, 104, 40, 41, 13, 10, 123, 13, 10, 9, 116, 114, 121, 32, 123, 13, 10, 9, 9, 116, 111, 112, 46, 102, 114, 97, 109, 101, 115, 91, 34, 95, 111, 119, 117, 95, 115, 105, 100, 101, 98, 97, 114, 34, 93, 46, 108, 111, 99, 97, 116, 105, 111, 110, 32, 61, 32, 34, 80, 114, 101, 112, 97, 114, 101, 83, 105, 100, 101, 98, 97, 114, 63, 110, 111, 115, 101, 108, 101, 99, 116, 34, 59, 13, 10, 9, 125, 32, 99, 97, 116, 99, 104, 32, 40, 101, 41, 32, 123, 13, 10, 9, 9, 97, 108, 101, 114, 116, 40, 34, 102, 97, 105, 108, 101, 100, 32, 116, 111, 32, 114, 101, 108, 111, 97, 100, 32, 102, 114, 97, 109, 101, 115, 34, 32, 43, 32, 101, 46, 116, 111, 83, 116, 114, 105, 110, 103, 40, 41, 41, 59, 13, 10, 9, 125, 13, 10, 125, 13, 10, 13, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 78, 117, 109, 98, 101, 114, 67, 104, 97, 110, 103, 101, 100, 40, 111, 98, 106, 41, 32, 123, 13, 10, 13, 10, 9, 118, 97, 114, 32, 118, 97, 108, 32, 61, 32, 111, 98, 106, 46, 118, 97, 108, 117, 101, 59, 13, 10, 9, 118, 97, 114, 32, 108, 101, 97, 100, 105, 110, 103, 112, 108, 117, 115, 32, 61, 32, 102, 97, 108, 115, 101, 59, 13, 10, 9, 105, 102, 32, 40, 118, 97, 108, 46, 115, 101, 97, 114, 99, 104, 40, 47, 94, 92, 43, 47, 41, 32, 61, 61, 32, 48, 41, 32, 123, 13, 10, 9, 9, 108, 101, 97, 100, 105, 110, 103, 112, 108, 117, 115, 32, 61, 32, 116, 114, 117, 101, 59, 13, 10, 9, 9, 118, 97, 108, 32, 32, 61, 32, 118, 97, 108, 46, 115, 117, 98, 115, 116, 114, 105, 110, 103, 40, 49, 41, 59, 13, 10, 9, 125, 13, 10, 9, 105, 102, 32, 40, 118, 97, 108, 46, 115, 101, 97, 114, 99, 104, 40, 47, 91, 94, 48, 45, 57, 93, 47, 41, 32, 62, 61, 32, 48, 41, 32, 123, 32, 13, 10, 9, 9, 47, 47, 97, 108, 101, 114, 116, 40, 34, 71, 105, 118, 101, 32, 97, 32, 110, 117, 109, 98, 101, 114, 34, 41, 59, 13, 10, 9, 9, 118, 97, 108, 32, 61, 32, 118, 97, 108, 46, 114, 101, 112, 108, 97, 99, 101, 40, 47, 91, 94, 48, 45, 57, 93, 47, 103, 44, 32, 34, 34, 41, 59, 13, 10, 9, 9, 105, 102, 32, 40, 108, 101, 97, 100, 105, 110, 103, 112, 108, 117, 115, 41, 32, 123, 13, 10, 9, 9, 9, 111, 98, 106, 46, 118, 97, 108, 117, 101, 32, 61, 32, 34, 43, 34, 32, 43, 32, 118, 97, 108, 59, 13, 10, 9, 9, 125, 32, 101, 108, 115, 101, 32, 123, 13, 10, 9, 9, 9, 111, 98, 106, 46, 118, 97, 108, 117, 101, 32, 61, 32, 118, 97, 108, 59, 13, 10, 9, 9, 125, 13, 10, 9, 125, 13, 10, 9, 13, 10, 125, 13, 10, 13, 10, 118, 97, 114, 32, 109, 111, 100, 97, 108, 79, 98, 106, 44, 32, 109, 111, 100, 97, 108, 70, 117, 110, 99, 44, 32, 109, 111, 100, 97, 108, 87, 105, 110, 59, 13, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 115, 104, 111, 119, 77, 111, 100, 97, 108, 40, 111, 98, 106, 44, 32, 102, 117, 110, 99, 44, 32, 102, 105, 108, 101, 110, 97, 109, 101, 44, 32, 97, 114, 103, 115, 44, 32, 97, 114, 103, 115, 49, 41, 32, 123, 13, 10, 9, 118, 97, 114, 32, 114, 101, 116, 118, 97, 108, 32, 61, 32, 34, 34, 59, 13, 10, 47, 47, 9, 105, 102, 32, 40, 119, 105, 110, 100, 111, 119, 46, 115, 104, 111, 119, 77, 111, 100, 97, 108, 68, 105, 97, 108, 111, 103, 41, 32, 123, 13, 10, 47, 47, 9, 9, 114, 101, 116, 118, 97, 108, 32, 61, 32, 119, 105, 110, 100, 111, 119, 46, 115, 104, 111, 119, 77, 111, 100, 97, 108, 68, 105, 97, 108, 111, 103, 40, 102, 105, 108, 101, 110, 97, 109, 101, 44, 32, 97, 114, 103, 115, 44, 32, 97, 114, 103, 115, 49, 41, 59, 13, 10, 47, 47, 9, 125, 32, 101, 108, 115, 101, 32, 123, 13, 10, 9, 9, 109, 111, 100, 97, 108, 79, 98, 106, 32, 61, 32, 111, 98, 106, 59, 13, 10, 9, 9, 109, 111, 100, 97, 108, 70, 117, 110, 99, 32, 61, 32, 102, 117, 110, 99, 59, 13, 10, 9, 9, 100, 111, 99, 117, 109, 101, 110, 116, 46, 103, 101, 116, 69, 108, 101, 109, 101, 110, 116, 66, 121, 73, 100, 40, 34, 109, 111, 100, 97, 108, 65, 114, 103, 34, 41, 46, 118, 97, 108, 117, 101, 32, 61, 32, 97, 114, 103, 115, 59, 13, 10, 9, 9, 97, 114, 103, 115, 49, 32, 61, 32, 97, 114, 103, 115, 49, 46, 114, 101, 112, 108, 97, 99, 101, 40, 47, 59, 47, 103, 44, 32, 34, 44, 34, 41, 59, 13, 10, 9, 9, 97, 114, 103, 115, 49, 32, 61, 32, 97, 114, 103, 115, 49, 46, 114, 101, 112, 108, 97, 99, 101, 40, 47, 58, 47, 103, 44, 32, 34, 61, 34, 41, 59, 13, 10, 9, 9, 97, 114, 103, 115, 49, 32, 61, 32, 97, 114, 103, 115, 49, 46, 114, 101, 112, 108, 97, 99, 101, 40, 47, 100, 105, 97, 108, 111, 103, 87, 105, 100, 116, 104, 47, 103, 44, 32, 34, 119, 105, 100, 116, 104, 34, 41, 59, 13, 10, 9, 9, 97, 114, 103, 115, 49, 32, 61, 32, 97, 114, 103, 115, 49, 46, 114, 101, 112, 108, 97, 99, 101, 40, 47, 100, 105, 97, 108, 111, 103, 72, 101, 105, 103, 104, 116, 47, 103, 44, 32, 34, 104, 101, 105, 103, 104, 116, 34, 41, 59, 13, 10, 9, 9, 97, 114, 103, 115, 49, 32, 61, 32, 97, 114, 103, 115, 49, 46, 114, 101, 112, 108, 97, 99, 101, 40, 47, 100, 105, 97, 108, 111, 103, 84, 111, 112, 47, 103, 44, 32, 34, 116, 111, 112, 34, 41, 59, 13, 10, 9, 9, 97, 114, 103, 115, 49, 32, 61, 32, 97, 114, 103, 115, 49, 46, 114, 101, 112, 108, 97, 99, 101, 40, 47, 100, 105, 97, 108, 111, 103, 76, 101, 102, 116, 47, 103, 44, 32, 34, 108, 101, 102, 116, 34, 41, 59, 13, 10, 9, 9, 97, 114, 103, 115, 49, 32, 61, 32, 97, 114, 103, 115, 49, 46, 114, 101, 112, 108, 97, 99, 101, 40, 47, 115, 99, 114, 111, 108, 108, 47, 103, 44, 32, 34, 115, 99, 114, 111, 108, 108, 98, 97, 114, 115, 34, 41, 59, 13, 10, 9, 9, 13, 10, 9, 9, 47, 47, 97, 108, 101, 114, 116, 40, 34, 109, 111, 100, 97, 108, 58, 34, 32, 43, 32, 97, 114, 103, 115, 49, 32, 41, 59, 13, 10, 9, 9, 47, 47, 97, 108, 101, 114, 116, 40, 34, 119, 105, 110, 100, 111, 119, 46, 108, 101, 102, 116, 61, 34, 32, 43, 32, 119, 105, 110, 100, 111, 119, 46, 115, 99, 114, 101, 101, 110, 46, 108, 101, 102, 116, 32, 43, 32, 34, 32, 119, 105, 110, 100, 111, 119, 46, 116, 111, 112, 61, 34, 32, 43, 32, 119, 105, 110, 100, 111, 119, 46, 115, 99, 114, 101, 101, 110, 46, 116, 111, 112, 13, 10, 9, 9, 47, 47, 9, 43, 32, 34, 92, 119, 105, 110, 100, 111, 119, 46, 115, 99, 114, 101, 101, 88, 61, 34, 32, 43, 32, 119, 105, 110, 100, 111, 119, 46, 115, 99, 114, 101, 101, 110, 88, 32, 43, 32, 34, 32, 119, 105, 110, 100, 111, 119, 46, 115, 99, 114, 101, 101, 110, 89, 61, 34, 32, 43, 32, 119, 105, 110, 100, 111, 119, 46, 115, 99, 114, 101, 101, 110, 89, 41, 59, 13, 10, 13, 10, 9, 9, 47, 47, 97, 108, 101, 114, 116, 40, 34, 115, 104, 111, 119, 109, 111, 100, 97, 108, 58, 34, 32, 43, 32, 97, 114, 103, 115, 49, 41, 59, 13, 10, 9, 32, 32, 32, 9, 47, 47, 109, 111, 100, 97, 108, 87, 105, 110, 32, 61, 32, 119, 105, 110, 100, 111, 119, 46, 111, 112, 101, 110, 40, 102, 105, 108, 101, 110, 97, 109, 101, 44, 32, 34, 32, 34, 44, 32, 97, 114, 103, 115, 49, 32, 41, 59, 13, 10, 9, 32, 32, 32, 9, 47, 47, 102, 105, 108, 101, 110, 97, 109, 101, 32, 61, 32, 34, 105, 110, 100, 101, 120, 112, 111, 112, 117, 112, 46, 106, 115, 112, 63, 34, 32, 43, 32, 102, 105, 108, 101, 110, 97, 109, 101, 59, 13, 10, 9, 9, 109, 111, 100, 97, 108, 87, 105, 110, 32, 61, 32, 119, 105, 110, 100, 111, 119, 46, 111, 112, 101, 110, 40, 102, 105, 108, 101, 110, 97, 109, 101, 44, 32, 34, 95, 111, 119, 117, 95, 112, 111, 112, 117, 112, 34, 44, 32, 97, 114, 103, 115, 49, 41, 59, 13, 10, 9, 9, 109, 111, 100, 97, 108, 87, 105, 110, 46, 102, 111, 99, 117, 115, 40, 41, 59, 13, 10, 9, 9, 13, 10, 47, 47, 9, 125, 13, 10, 9, 114, 101, 116, 117, 114, 110, 32, 114, 101, 116, 118, 97, 108, 59, 13, 10, 125, 13, 10, 13, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 109, 111, 100, 97, 108, 68, 111, 110, 101, 40, 41, 32, 123, 13, 10, 9, 105, 102, 32, 40, 109, 111, 100, 97, 108, 79, 98, 106, 32, 38, 38, 32, 109, 111, 100, 97, 108, 70, 117, 110, 99, 41, 32, 123, 13, 10, 9, 9, 109, 111, 100, 97, 108, 70, 117, 110, 99, 40, 109, 111, 100, 97, 108, 79, 98, 106, 44, 32, 32, 100, 111, 99, 117, 109, 101, 110, 116, 46, 103, 101, 116, 69, 108, 101, 109, 101, 110, 116, 66, 121, 73, 100, 40, 34, 109, 111, 100, 97, 108, 82, 101, 116, 118, 97, 108, 34, 41, 46, 118, 97, 108, 117, 101, 41, 59, 13, 10, 9, 125, 13, 10, 125, 13, 10, 13, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 103, 111, 66, 97, 99, 107, 40, 41, 32, 123, 13, 10, 9, 105, 102, 32, 40, 119, 105, 110, 100, 111, 119, 46, 110, 97, 109, 101, 32, 61, 61, 32, 34, 95, 111, 119, 117, 95, 108, 105, 115, 116, 34, 41, 32, 123, 13, 10, 9, 9, 119, 105, 110, 100, 111, 119, 46, 108, 111, 99, 97, 116, 105, 111, 110, 46, 97, 115, 115, 105, 103, 110, 40, 34, 108, 105, 115, 116, 95, 99, 97, 116, 97, 108, 111, 103, 46, 106, 115, 112, 63, 99, 97, 116, 97, 108, 111, 103, 61, 99, 97, 116, 97, 108, 111, 103, 117, 101, 34, 41, 59, 13, 10, 9, 125, 32, 101, 108, 115, 101, 32, 123, 13, 10, 9, 9, 119, 105, 110, 100, 111, 119, 46, 104, 105, 115, 116, 111, 114, 121, 46, 103, 111, 40, 45, 49, 41, 59, 13, 10, 9, 125, 13, 10, 125, 13, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 115, 99, 114, 111, 108, 108, 50, 86, 105, 101, 119, 40, 111, 98, 106, 41, 13, 10, 123, 13, 10, 32, 32, 32, 116, 114, 121, 32, 123, 13, 10, 32, 32, 32, 32, 118, 97, 114, 32, 112, 97, 114, 101, 110, 116, 32, 61, 32, 111, 98, 106, 46, 112, 97, 114, 101, 110, 116, 78, 111, 100, 101, 59, 13, 10, 32, 32, 32, 32, 119, 104, 105, 108, 101, 32, 40, 112, 97, 114, 101, 110, 116, 32, 38, 38, 32, 112, 97, 114, 101, 110, 116, 46, 116, 97, 103, 78, 97, 109, 101, 32, 33, 61, 32, 40, 34, 68, 73, 86, 34, 41, 41, 32, 112, 97, 114, 101, 110, 116, 32, 61, 32, 112, 97, 114, 101, 110, 116, 46, 112, 97, 114, 101, 110, 116, 78, 111, 100, 101, 59, 13, 10, 32, 32, 32, 13, 10, 32, 32, 32, 32, 47, 47, 97, 108, 101, 114, 116, 40, 34, 115, 99, 114, 111, 108, 108, 50, 118, 105, 101, 119, 61, 34, 32, 43, 32, 112, 97, 114, 101, 110, 116, 46, 105, 100, 41, 59, 13, 10, 32, 32, 32, 32, 118, 97, 114, 32, 116, 111, 116, 115, 105, 122, 101, 32, 32, 61, 32, 112, 97, 114, 101, 110, 116, 46, 111, 102, 102, 115, 101, 116, 72, 101, 105, 103, 104, 116, 59, 32, 32, 47, 47, 32, 116, 104, 105, 115, 32, 105, 115, 32, 116, 104, 101, 32, 118, 105, 115, 105, 98, 108, 101, 32, 97, 114, 101, 97, 32, 13, 115, 105, 122, 101, 13, 10, 32, 32, 32, 32, 118, 97, 114, 32, 99, 117, 114, 114, 116, 111, 112, 32, 61, 32, 112, 97, 114, 101, 110, 116, 46, 115, 99, 114, 111, 108, 108, 84, 111, 112, 59, 32, 32, 32, 32, 32, 32, 47, 47, 104, 101, 114, 101, 32, 98, 101, 103, 105, 110, 115, 32, 116, 104, 101, 32, 118, 105, 115, 105, 98, 108, 101, 32, 97, 114, 101, 97, 13, 10, 32, 32, 32, 32, 118, 97, 114, 32, 98, 101, 103, 105, 110, 80, 111, 115, 32, 61, 32, 111, 98, 106, 46, 111, 102, 102, 115, 101, 116, 84, 111, 112, 59, 13, 10, 32, 32, 32, 32, 118, 97, 114, 32, 115, 116, 101, 112, 32, 61, 32, 111, 98, 106, 46, 111, 102, 102, 115, 101, 116, 72, 101, 105, 103, 104, 116, 32, 43, 32, 51, 59, 13, 10, 32, 32, 32, 47, 47, 9, 97, 108, 101, 114, 116, 40, 34, 115, 116, 101, 112, 61, 34, 32, 43, 32, 115, 116, 101, 112, 32, 43, 32, 34, 32, 112, 97, 100, 100, 105, 110, 103, 61, 34, 32, 43, 32, 111, 98, 106, 46, 115, 116, 121, 108, 101, 46, 112, 97, 100, 100, 105, 110, 103, 84, 111, 112, 41, 59, 13, 10, 32, 32, 32, 32, 118, 97, 114, 32, 101, 110, 100, 80, 111, 115, 32, 61, 32, 98, 101, 103, 105, 110, 80, 111, 115, 32, 43, 32, 115, 116, 101, 112, 59, 13, 10, 32, 32, 32, 32, 13, 10, 32, 32, 32, 32, 119, 104, 105, 108, 101, 32, 40, 101, 110, 100, 80, 111, 115, 32, 62, 32, 40, 99, 117, 114, 114, 116, 111, 112, 32, 43, 32, 116, 111, 116, 115, 105, 122, 101, 41, 41, 32, 32, 123, 13, 10, 32, 32, 32, 32, 32, 32, 32, 99, 117, 114, 114, 116, 111, 112, 32, 43, 61, 32, 115, 116, 101, 112, 59, 13, 10, 32, 32, 32, 32, 125, 13, 10, 32, 32, 32, 32, 119, 104, 105, 108, 101, 32, 40, 98, 101, 103, 105, 110, 80, 111, 115, 32, 60, 32, 99, 117, 114, 114, 116, 111, 112, 41, 32, 123, 13, 10, 32, 32, 32, 32, 32, 32, 32, 99, 117, 114, 114, 116, 111, 112, 32, 45, 61, 32, 115, 116, 101, 112, 59, 13, 10, 32, 32, 32, 32, 125, 13, 10, 32, 32, 32, 32, 112, 97, 114, 101, 110, 116, 46, 115, 99, 114, 111, 108, 108, 84, 111, 112, 32, 61, 32, 99, 117, 114, 114, 116, 111, 112, 59, 13, 10, 32, 32, 32, 32, 47, 47, 119, 105, 110, 100, 111, 119, 46, 115, 116, 97, 116, 117, 115, 32, 61, 32, 34, 115, 99, 114, 111, 108, 108, 116, 111, 112, 61, 34, 32, 43, 32, 99, 117, 114, 114, 116, 111, 112, 59, 13, 10, 32, 32, 32, 125, 32, 99, 97, 116, 99, 104, 40, 101, 41, 32, 123, 13, 10, 32, 32, 32, 32, 32, 32, 119, 105, 110, 100, 111, 119, 46, 115, 116, 97, 116, 117, 115, 32, 61, 32, 34, 70, 97, 105, 108, 101, 100, 32, 32, 115, 99, 114, 111, 108, 108, 50, 118, 105, 101, 119, 34, 59, 13, 10, 32, 32, 32, 125, 13, 10, 125, 13, 10, 13, 10, 60, 47, 115, 99, 114, 105, 112, 116, 62, 13, 10, 13, 10, 60, 115, 99, 114, 105, 112, 116, 62, 13, 10, 13, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 105, 110, 105, 116, 40, 41, 32, 123, 13, 10, 9, 47, 47, 100, 111, 99, 117, 109, 101, 110, 116, 46, 103, 101, 116, 69, 108, 101, 109, 101, 110, 116, 66, 121, 73, 100, 40, 34, 112, 95, 116, 101, 120, 116, 34, 41, 46, 115, 101, 108, 101, 99, 116, 40, 41, 59, 13, 10, 13, 10, 13, 10, 9, 9, 118, 97, 114, 32, 100, 111, 114, 101, 108, 111, 97, 100, 32, 61, 32, 34, 114, 101, 108, 111, 97, 100, 34, 59, 13, 10, 9, 9, 105, 102, 32, 40, 100, 111, 114, 101, 108, 111, 97, 100, 61, 61, 32, 34, 114, 101, 108, 111, 97, 100, 34, 41, 32, 123, 13, 10, 9, 9, 9, 100, 111, 114, 101, 102, 114, 101, 115, 104, 40, 41, 59, 13, 10, 9, 9, 125, 13, 10, 9, 9, 13, 10, 9, 9, 118, 97, 114, 32, 101, 114, 114, 111, 114, 109, 115, 103, 32, 61, 32, 34, 34, 59, 13, 10, 9, 9, 105, 102, 32, 40, 101, 114, 114, 111, 114, 109, 115, 103, 32, 33, 61, 32, 34, 34, 41, 32, 123, 13, 10, 9, 9, 9, 101, 114, 114, 111, 114, 109, 115, 103, 32, 61, 32, 101, 114, 114, 111, 114, 109, 115, 103, 46, 114, 101, 112, 108, 97, 99, 101, 40, 47, 94, 101, 114, 114, 111, 114, 61, 47, 105, 44, 32, 34, 34, 41, 59, 13, 10, 9, 9, 9, 101, 114, 114, 111, 114, 109, 115, 103, 32, 61, 32, 101, 114, 114, 111, 114, 109, 115, 103, 46, 114, 101, 112, 108, 97, 99, 101, 40, 47, 92, 37, 50, 48, 47, 103, 44, 32, 34, 32, 34, 41, 59, 13, 10, 9, 9, 9, 97, 108, 101, 114, 116, 40, 101, 114, 114, 111, 114, 109, 115, 103, 41, 59, 13, 10, 9, 9, 125, 13, 10, 9, 13, 10, 125, 13, 10, 13, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 114, 101, 109, 111, 118, 101, 80, 114, 101, 115, 101, 110, 99, 101, 40, 41, 32, 123, 13, 10, 9, 100, 111, 99, 117, 109, 101, 110, 116, 46, 103, 101, 116, 69, 108, 101, 109, 101, 110, 116, 66, 121, 73, 100, 40, 34, 112, 114, 101, 115, 101, 110, 99, 101, 95, 99, 111, 100, 101, 34, 41, 46, 118, 97, 108, 117, 101, 32, 61, 32, 34, 48, 34, 59, 13, 10, 9, 100, 111, 99, 117, 109, 101, 110, 116, 46, 102, 111, 114, 109, 115, 91, 34, 112, 114, 101, 115, 101, 110, 99, 101, 102, 111, 114, 109, 34, 93, 46, 115, 117, 98, 109, 105, 116, 40, 41, 59, 13, 10, 125, 13, 10, 13, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 112, 99, 111, 100, 101, 67, 104, 97, 110, 103, 101, 100, 40, 111, 98, 106, 41, 32, 123, 13, 10, 9, 47, 47, 97, 108, 101, 114, 116, 40, 34, 112, 99, 111, 100, 101, 99, 104, 97, 110, 103, 101, 100, 61, 34, 32, 43, 32, 111, 98, 106, 46, 111, 112, 116, 105, 111, 110, 115, 91, 111, 98, 106, 46, 115, 101, 108, 101, 99, 116, 101, 100, 73, 110, 100, 101, 120, 93, 46, 118, 97, 108, 117, 101, 41, 59, 13, 10, 9, 118, 97, 114, 32, 112, 99, 111, 100, 101, 115, 32, 61, 32, 111, 98, 106, 46, 111, 112, 116, 105, 111, 110, 115, 91, 111, 98, 106, 46, 115, 101, 108, 101, 99, 116, 101, 100, 73, 110, 100, 101, 120, 93, 46, 118, 97, 108, 117, 101, 59, 13, 10, 9, 105, 102, 32, 40, 112, 99, 111, 100, 101, 115, 32, 61, 61, 32, 34, 34, 41, 32, 114, 101, 116, 117, 114, 110, 59, 13, 10, 9, 13, 10, 9, 118, 97, 114, 32, 116, 109, 112, 32, 61, 32, 112, 99, 111, 100, 101, 115, 46, 115, 112, 108, 105, 116, 40, 34, 95, 34, 41, 59, 13, 10, 9, 118, 97, 114, 32, 112, 99, 111, 100, 101, 32, 61, 32, 116, 109, 112, 91, 48, 93, 59, 13, 10, 9, 118, 97, 114, 32, 110, 117, 109, 98, 101, 114, 32, 61, 32, 116, 109, 112, 91, 49, 93, 59, 13, 10, 9, 13, 10, 9, 118, 97, 114, 32, 97, 99, 116, 105, 111, 110, 105, 109, 97, 103, 101, 32, 61, 32, 100, 111, 99, 117, 109, 101, 110, 116, 46, 103, 101, 116, 69, 108, 101, 109, 101, 110, 116, 66, 121, 73, 100, 40, 34, 97, 99, 116, 105, 111, 110, 105, 109, 97, 103, 101, 34, 41, 59, 13, 10, 9, 105, 102, 32, 40, 97, 99, 116, 105, 111, 110, 105, 109, 97, 103, 101, 41, 32, 123, 13, 10, 9, 9, 105, 102, 32, 40, 110, 117, 109, 98, 101, 114, 32, 61, 61, 32, 34, 34, 41, 32, 123, 13, 10, 9, 9, 9, 97, 99, 116, 105, 111, 110, 105, 109, 97, 103, 101, 46, 115, 114, 99, 61, 34, 105, 109, 103, 47, 110, 111, 116, 95, 97, 118, 97, 105, 108, 97, 98, 108, 101, 95, 110, 111, 95, 67, 70, 80, 46, 103, 105, 102, 34, 59, 13, 10, 9, 9, 125, 32, 101, 108, 115, 101, 32, 123, 13, 10, 9, 9, 9, 97, 99, 116, 105, 111, 110, 105, 109, 97, 103, 101, 46, 115, 114, 99, 61, 34, 105, 109, 103, 47, 110, 111, 116, 95, 97, 118, 97, 105, 108, 97, 98, 108, 101, 95, 67, 70, 80, 46, 103, 105, 102, 34, 59, 13, 10, 9, 9, 125, 13, 10, 9, 125, 13, 10, 9, 105, 102, 32, 40, 110, 117, 109, 98, 101, 114, 32, 61, 61, 32, 34, 120, 34, 41, 32, 123, 13, 10, 9, 9, 100, 111, 99, 117, 109, 101, 110, 116, 46, 103, 101, 116, 69, 108, 101, 109, 101, 110, 116, 66, 121, 73, 100, 40, 34, 100, 105, 118, 101, 114, 115, 105, 111, 110, 110, 98, 114, 34, 41, 46, 115, 116, 121, 108, 101, 46, 100, 105, 115, 112, 108, 97, 121, 32, 61, 32, 34, 34, 59, 13, 10, 9, 125, 32, 101, 108, 115, 101, 32, 123, 13, 10, 9, 9, 100, 111, 99, 117, 109, 101, 110, 116, 46, 103, 101, 116, 69, 108, 101, 109, 101, 110, 116, 66, 121, 73, 100, 40, 34, 100, 105, 118, 101, 114, 115, 105, 111, 110, 110, 98, 114, 34, 41, 46, 115, 116, 121, 108, 101, 46, 100, 105, 115, 112, 108, 97, 121, 32, 61, 32, 34, 110, 111, 110, 101, 34, 59, 13, 10, 9, 125, 13, 10, 125, 13, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 115, 101, 116, 80, 114, 101, 115, 101, 110, 99, 101, 40, 41, 32, 123, 13, 10, 9, 118, 97, 114, 32, 112, 99, 111, 100, 101, 108, 105, 115, 116, 32, 61, 32, 100, 111, 99, 117, 109, 101, 110, 116, 46, 103, 101, 116, 69, 108, 101, 109, 101, 110, 116, 66, 121, 73, 100, 40, 34, 112, 99, 111, 100, 101, 108, 105, 115, 116, 34, 41, 59, 13, 10, 9, 105, 102, 32, 40, 112, 99, 111, 100, 101, 108, 105, 115, 116, 46, 115, 101, 108, 101, 99, 116, 101, 100, 73, 110, 100, 101, 120, 32, 60, 48, 32, 124, 124, 32, 112, 99, 111, 100, 101, 108, 105, 115, 116, 46, 111, 112, 116, 105, 111, 110, 115, 91, 112, 99, 111, 100, 101, 108, 105, 115, 116, 46, 115, 101, 108, 101, 99, 116, 101, 100, 73, 110, 100, 101, 120, 93, 46, 118, 97, 108, 117, 101, 32, 61, 61, 32, 34, 34, 41, 32, 123, 13, 10, 9, 9, 97, 108, 101, 114, 116, 40, 34, 100, 111, 32, 112, 105, 99, 107, 32, 97, 32, 118, 97, 108, 105, 100, 32, 111, 112, 116, 105, 111, 110, 34, 41, 13, 10, 9, 9, 114, 101, 116, 117, 114, 110, 59, 13, 10, 9, 125, 13, 10, 9, 118, 97, 114, 32, 112, 99, 111, 100, 101, 115, 32, 61, 32, 112, 99, 111, 100, 101, 108, 105, 115, 116, 46, 111, 112, 116, 105, 111, 110, 115, 91, 112, 99, 111, 100, 101, 108, 105, 115, 116, 46, 115, 101, 108, 101, 99, 116, 101, 100, 73, 110, 100, 101, 120, 93, 46, 118, 97, 108, 117, 101, 32, 59, 13, 10, 9, 118, 97, 114, 32, 116, 109, 112, 32, 61, 32, 112, 99, 111, 100, 101, 115, 46, 115, 112, 108, 105, 116, 40, 34, 95, 34, 41, 59, 13, 10, 9, 118, 97, 114, 32, 112, 99, 111, 100, 101, 32, 61, 32, 116, 109, 112, 91, 48, 93, 59, 13, 10, 9, 118, 97, 114, 32, 110, 117, 109, 98, 101, 114, 32, 61, 32, 116, 109, 112, 91, 49, 93, 59, 13, 10, 9, 13, 10, 9, 100, 111, 99, 117, 109, 101, 110, 116, 46, 103, 101, 116, 69, 108, 101, 109, 101, 110, 116, 66, 121, 73, 100, 40, 34, 112, 114, 101, 115, 101, 110, 99, 101, 95, 99, 111, 100, 101, 34, 41, 46, 118, 97, 108, 117, 101, 32, 61, 32, 112, 99, 111, 100, 101, 59, 13, 10, 9, 105, 102, 32, 40, 110, 117, 109, 98, 101, 114, 32, 61, 61, 32, 34, 120, 34, 41, 32, 123, 13, 10, 9, 9, 110, 117, 109, 98, 101, 114, 32, 61, 32, 116, 114, 105, 109, 40, 100, 111, 99, 117, 109, 101, 110, 116, 46, 103, 101, 116, 69, 108, 101, 109, 101, 110, 116, 66, 121, 73, 100, 40, 34, 100, 105, 118, 101, 114, 115, 105, 111, 110, 110, 98, 114, 34, 41, 46, 118, 97, 108, 117, 101, 41, 59, 13, 10, 9, 125, 32, 13, 10, 9, 100, 111, 99, 117, 109, 101, 110, 116, 46, 103, 101, 116, 69, 108, 101, 109, 101, 110, 116, 66, 121, 73, 100, 40, 34, 112, 114, 101, 115, 101, 110, 99, 101, 95, 100, 105, 118, 101, 114, 116, 110, 98, 114, 34, 41, 46, 118, 97, 108, 117, 101, 32, 61, 32, 110, 117, 109, 98, 101, 114, 59, 13, 10, 9, 13, 10, 9, 118, 97, 114, 32, 117, 110, 116, 105, 108, 32, 61, 32, 100, 111, 99, 117, 109, 101, 110, 116, 46, 103, 101, 116, 69, 108, 101, 109, 101, 110, 116, 66, 121, 73, 100, 40, 34, 117, 110, 116, 105, 108, 100, 97, 116, 101, 34, 41, 46, 118, 97, 108, 117, 101, 32, 13, 10, 9, 9, 9, 9, 43, 32, 34, 32, 34, 32, 43, 32, 100, 111, 99, 117, 109, 101, 110, 116, 46, 103, 101, 116, 69, 108, 101, 109, 101, 110, 116, 66, 121, 73, 100, 40, 34, 117, 110, 116, 105, 108, 116, 105, 109, 101, 34, 41, 46, 118, 97, 108, 117, 101, 59, 13, 10, 9, 117, 110, 116, 105, 108, 32, 61, 32, 116, 114, 105, 109, 40, 117, 110, 116, 105, 108, 41, 59, 13, 10, 9, 105, 102, 32, 40, 117, 110, 116, 105, 108, 32, 33, 61, 32, 34, 34, 41, 32, 123, 13, 10, 9, 9, 100, 111, 99, 117, 109, 101, 110, 116, 46, 103, 101, 116, 69, 108, 101, 109, 101, 110, 116, 66, 121, 73, 100, 40, 34, 112, 114, 101, 115, 101, 110, 99, 101, 95, 117, 110, 116, 105, 108, 34, 41, 46, 118, 97, 108, 117, 101, 32, 61, 32, 117, 110, 116, 105, 108, 59, 13, 10, 9, 125, 13, 10, 9, 13, 10, 9, 118, 97, 114, 32, 109, 115, 103, 101, 108, 101, 109, 32, 32, 61, 32, 100, 111, 99, 117, 109, 101, 110, 116, 46, 103, 101, 116, 69, 108, 101, 109, 101, 110, 116, 66, 121, 73, 100, 40, 34, 112, 95, 116, 101, 120, 116, 34, 41, 59, 13, 10, 9, 47, 47, 106, 117, 115, 116, 32, 109, 97, 107, 101, 32, 115, 117, 114, 101, 32, 116, 104, 97, 116, 32, 116, 104, 101, 32, 116, 101, 120, 116, 32, 105, 115, 32, 110, 111, 116, 32, 116, 104, 101, 32, 105, 110, 105, 116, 105, 97, 108, 32, 101, 120, 112, 108, 46, 32, 116, 101, 120, 116, 46, 13, 10, 9, 105, 102, 32, 40, 109, 115, 103, 101, 108, 101, 109, 46, 111, 110, 107, 101, 121, 100, 111, 119, 110, 32, 61, 61, 32, 110, 117, 108, 108, 41, 32, 123, 32, 13, 10, 9, 9, 118, 97, 114, 32, 112, 116, 101, 120, 116, 32, 61, 32, 116, 114, 105, 109, 40, 109, 115, 103, 101, 108, 101, 109, 46, 118, 97, 108, 117, 101, 41, 59, 13, 10, 9, 9, 105, 102, 32, 40, 112, 116, 101, 120, 116, 32, 33, 61, 32, 34, 34, 41, 32, 123, 13, 10, 9, 9, 9, 100, 111, 99, 117, 109, 101, 110, 116, 46, 103, 101, 116, 69, 108, 101, 109, 101, 110, 116, 66, 121, 73, 100, 40, 34, 112, 114, 101, 115, 101, 110, 99, 101, 95, 116, 101, 120, 116, 34, 41, 46, 118, 97, 108, 117, 101, 32, 61, 32, 112, 116, 101, 120, 116, 59, 13, 10, 9, 9, 125, 13, 10, 9, 125, 13, 10, 9, 100, 111, 99, 117, 109, 101, 110, 116, 46, 102, 111, 114, 109, 115, 91, 34, 112, 114, 101, 115, 101, 110, 99, 101, 102, 111, 114, 109, 34, 93, 46, 115, 117, 98, 109, 105, 116, 40, 41, 59, 13, 10, 125, 13, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 112, 114, 101, 115, 101, 116, 80, 114, 101, 115, 101, 110, 99, 101, 40, 105, 100, 120, 41, 32, 123, 13, 10, 9, 100, 111, 99, 117, 109, 101, 110, 116, 46, 103, 101, 116, 69, 108, 101, 109, 101, 110, 116, 66, 121, 73, 100, 40, 34, 112, 114, 101, 115, 101, 110, 99, 101, 95, 112, 114, 101, 115, 101, 116, 34, 41, 46, 118, 97, 108, 117, 101, 32, 61, 32, 105, 100, 120, 59, 13, 10, 9, 100, 111, 99, 117, 109, 101, 110, 116, 46, 102, 111, 114, 109, 115, 91, 34, 112, 114, 101, 115, 101, 110, 99, 101, 102, 111, 114, 109, 34, 93, 46, 115, 117, 98, 109, 105, 116, 40, 41, 59, 13, 10, 9, 13, 10, 125, 13, 10, 13, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 83, 101, 116, 68, 101, 102, 108, 101, 99, 116, 40, 41, 13, 10, 123, 13, 10, 9, 118, 97, 114, 32, 101, 108, 101, 109, 115, 32, 61, 32, 100, 111, 99, 117, 109, 101, 110, 116, 46, 103, 101, 116, 69, 108, 101, 109, 101, 110, 116, 115, 66, 121, 78, 97, 109, 101, 40, 34, 99, 102, 34, 41, 59, 13, 10, 9, 102, 111, 114, 32, 40, 118, 97, 114, 32, 105, 61, 48, 59, 32, 105, 32, 60, 101, 108, 101, 109, 115, 46, 108, 101, 110, 103, 116, 104, 59, 32, 105, 43, 43, 41, 32, 123, 13, 10, 9, 9, 105, 102, 32, 40, 101, 108, 101, 109, 115, 91, 105, 93, 46, 99, 104, 101, 99, 107, 101, 100, 41, 32, 123, 13, 10, 9, 9, 9, 118, 97, 114, 32, 100, 101, 102, 108, 101, 99, 116, 110, 114, 32, 61, 32, 101, 108, 101, 109, 115, 91, 105, 93, 46, 118, 97, 108, 117, 101, 59, 13, 10, 9, 9, 9, 105, 102, 32, 40, 100, 101, 102, 108, 101, 99, 116, 110, 114, 32, 61, 61, 32, 34, 88, 34, 41, 32, 123, 13, 10, 9, 9, 9, 9, 100, 101, 102, 108, 101, 99, 116, 110, 114, 32, 61, 32, 100, 111, 99, 117, 109, 101, 110, 116, 46, 103, 101, 116, 69, 108, 101, 109, 101, 110, 116, 66, 121, 73, 100, 40, 34, 99, 102, 95, 110, 117, 109, 98, 101, 114, 34, 41, 46, 118, 97, 108, 117, 101, 59, 13, 10, 9, 9, 9, 125, 13, 10, 9, 9, 9, 100, 111, 99, 117, 109, 101, 110, 116, 46, 103, 101, 116, 69, 108, 101, 109, 101, 110, 116, 66, 121, 73, 100, 40, 34, 99, 97, 108, 108, 100, 101, 102, 108, 101, 99, 116, 110, 114, 34, 41, 46, 118, 97, 108, 117, 101, 32, 61, 32, 100, 101, 102, 108, 101, 99, 116, 110, 114, 59, 13, 10, 9, 9, 9, 98, 114, 101, 97, 107, 59, 13, 10, 9, 9, 125, 13, 10, 9, 125, 13, 10, 9, 100, 111, 99, 117, 109, 101, 110, 116, 46, 102, 111, 114, 109, 115, 91, 34, 99, 97, 108, 108, 100, 101, 102, 108, 101, 99, 116, 102, 111, 114, 109, 34, 93, 46, 115, 117, 98, 109, 105, 116, 40, 41, 59, 13, 10, 125, 13, 10, 13, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 99, 102, 67, 108, 105, 99, 107, 101, 100, 40, 111, 98, 106, 41, 32, 123, 13, 10, 9, 47, 47, 97, 108, 101, 114, 116, 40, 34, 111, 98, 106, 61, 34, 32, 43, 32, 111, 98, 106, 46, 99, 104, 101, 99, 107, 101, 100, 41, 59, 13, 10, 9, 105, 102, 32, 40, 111, 98, 106, 46, 99, 104, 101, 99, 107, 101, 100, 32, 38, 38, 32, 111, 98, 106, 46, 118, 97, 108, 117, 101, 32, 61, 61, 32, 34, 88, 34, 41, 32, 123, 13, 10, 9, 9, 100, 111, 99, 117, 109, 101, 110, 116, 46, 103, 101, 116, 69, 108, 101, 109, 101, 110, 116, 66, 121, 73, 100, 40, 34, 99, 102, 95, 110, 117, 109, 98, 101, 114, 34, 41, 46, 115, 116, 121, 108, 101, 46, 118, 105, 115, 105, 98, 105, 108, 105, 116, 121, 32, 61, 32, 34, 34, 59, 13, 10, 9, 9, 100, 111, 99, 117, 109, 101, 110, 116, 46, 103, 101, 116, 69, 108, 101, 109, 101, 110, 116, 66, 121, 73, 100, 40, 34, 99, 102, 95, 110, 117, 109, 98, 101, 114, 34, 41, 46, 102, 111, 99, 117, 115, 40, 41, 59, 13, 10, 9, 125, 32, 101, 108, 115, 101, 32, 123, 13, 10, 9, 9, 100, 111, 99, 117, 109, 101, 110, 116, 46, 103, 101, 116, 69, 108, 101, 109, 101, 110, 116, 66, 121, 73, 100, 40, 34, 99, 102, 95, 110, 117, 109, 98, 101, 114, 34, 41, 46, 115, 116, 121, 108, 101, 46, 118, 105, 115, 105, 98, 105, 108, 105, 116, 121, 32, 61, 32, 34, 104, 105, 100, 100, 101, 110, 34, 59, 13, 10, 9, 125, 13, 10, 125, 13, 10, 13, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 65, 99, 116, 105, 118, 97, 116, 101, 71, 114, 111, 117, 112, 115, 40, 41, 13, 10, 123, 13, 10, 9, 100, 111, 99, 117, 109, 101, 110, 116, 46, 102, 111, 114, 109, 115, 91, 34, 104, 103, 115, 101, 116, 116, 110, 103, 34, 93, 46, 115, 117, 98, 109, 105, 116, 40, 41, 59, 13, 10, 125, 13, 10, 13, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 115, 104, 111, 119, 109, 111, 114, 101, 111, 112, 116, 105, 111, 110, 115, 40, 41, 32, 123, 13, 10, 9, 100, 111, 99, 117, 109, 101, 110, 116, 46, 103, 101, 116, 69, 108, 101, 109, 101, 110, 116, 66, 121, 73, 100, 40, 34, 109, 111, 114, 101, 111, 112, 116, 105, 111, 110, 115, 116, 97, 98, 108, 101, 34, 41, 46, 115, 116, 121, 108, 101, 46, 100, 105, 115, 112, 108, 97, 121, 32, 61, 32, 34, 34, 59, 13, 10, 9, 100, 111, 99, 117, 109, 101, 110, 116, 46, 103, 101, 116, 69, 108, 101, 109, 101, 110, 116, 66, 121, 73, 100, 40, 34, 109, 111, 114, 101, 111, 112, 116, 105, 111, 110, 115, 98, 117, 116, 116, 111, 110, 34, 41, 46, 115, 116, 121, 108, 101, 46, 100, 105, 115, 112, 108, 97, 121, 32, 61, 32, 34, 34, 59, 13, 10, 125, 13, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 105, 118, 109, 115, 103, 67, 104, 97, 110, 103, 101, 100, 40, 111, 98, 106, 41, 32, 123, 13, 10, 9, 105, 102, 32, 40, 112, 97, 114, 115, 101, 73, 110, 116, 40, 111, 98, 106, 46, 118, 97, 108, 117, 101, 46, 108, 101, 110, 103, 116, 104, 41, 32, 62, 32, 50, 53, 53, 41, 32, 123, 13, 10, 9, 9, 111, 98, 106, 46, 118, 97, 108, 117, 101, 32, 61, 32, 111, 98, 106, 46, 118, 97, 108, 117, 101, 46, 115, 117, 98, 115, 116, 114, 105, 110, 103, 40, 48, 44, 50, 53, 53, 41, 59, 13, 10, 9, 9, 97, 108, 101, 114, 116, 40, 34, 77, 97, 120, 32, 50, 53, 53, 34, 41, 59, 13, 10, 9, 125, 13, 10, 9, 47, 47, 119, 105, 110, 100, 111, 119, 46, 115, 116, 97, 116, 117, 115, 32, 61, 32, 111, 98, 106, 46, 118, 97, 108, 117, 101, 46, 108, 101, 110, 103, 116, 104, 59, 13, 10, 125, 9, 13, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 114, 101, 115, 101, 116, 85, 115, 101, 114, 83, 101, 116, 116, 105, 110, 103, 115, 40, 41, 32, 13, 10, 123, 13, 10, 9, 100, 111, 99, 117, 109, 101, 110, 116, 46, 102, 111, 114, 109, 115, 91, 34, 114, 101, 115, 101, 116, 117, 115, 101, 114, 102, 111, 114, 109, 34, 93, 46, 115, 117, 98, 109, 105, 116, 40, 41, 59, 13, 10, 125, 13, 10, 60, 47, 115, 99, 114, 105, 112, 116, 62, 13, 10, 60, 115, 116, 121, 108, 101, 32, 116, 121, 112, 101, 61, 34, 116, 101, 120, 116, 47, 99, 115, 115, 34, 62, 13, 10, 13, 10, 98, 111, 100, 121, 32, 123, 13, 10, 9, 102, 111, 110, 116, 45, 102, 97, 109, 105, 108, 121, 58, 32, 118, 101, 114, 100, 97, 110, 97, 44, 32, 97, 114, 105, 97, 108, 59, 13, 10, 9, 102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 32, 49, 48, 48, 37, 59, 13, 10, 9, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 105, 109, 97, 103, 101, 58, 32, 117, 114, 108, 40, 105, 109, 103, 47, 98, 111, 100, 121, 46, 103, 105, 102, 41, 59, 13, 10, 9, 99, 111, 108, 111, 114, 32, 58, 32, 98, 108, 97, 99, 107, 59, 13, 10, 125, 13, 10, 13, 10, 116, 97, 98, 108, 101, 32, 123, 13, 10, 9, 102, 111, 110, 116, 45, 102, 97, 109, 105, 108, 121, 58, 32, 118, 101, 114, 100, 97, 110, 97, 44, 32, 97, 114, 105, 97, 108, 59, 13, 10, 9, 102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 32, 57, 48, 37, 59, 13, 10, 125, 13, 10, 13, 10, 46, 108, 111, 103, 105, 110, 102, 111, 114, 109, 32, 123, 13, 10, 9, 102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 32, 57, 48, 37, 59, 13, 10, 9, 99, 111, 108, 111, 114, 32, 58, 32, 98, 108, 97, 99, 107, 59, 13, 10, 125, 13, 10, 46, 98, 117, 116, 116, 111, 110, 32, 123, 13, 10, 9, 102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 56, 48, 37, 59, 13, 10, 9, 102, 111, 110, 116, 45, 119, 101, 105, 103, 104, 116, 58, 98, 111, 108, 100, 59, 13, 10, 9, 112, 97, 100, 100, 105, 110, 103, 58, 49, 59, 13, 10, 125, 13, 10, 46, 109, 97, 105, 110, 102, 111, 114, 109, 32, 123, 13, 10, 9, 99, 111, 108, 111, 114, 32, 58, 32, 98, 108, 97, 99, 107, 59, 13, 10, 9, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 99, 111, 108, 111, 114, 58, 35, 69, 48, 69, 48, 69, 48, 59, 13, 10, 9, 102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 55, 48, 37, 59, 13, 10, 9, 119, 105, 100, 116, 104, 58, 49, 48, 48, 37, 59, 13, 10, 9, 104, 101, 105, 103, 104, 116, 58, 49, 48, 48, 37, 59, 13, 10, 9, 112, 97, 100, 100, 105, 110, 103, 58, 48, 59, 13, 10, 9, 109, 97, 114, 103, 105, 110, 58, 48, 59, 13, 10, 13, 10, 125, 9, 13, 10, 46, 97, 116, 116, 101, 110, 100, 97, 110, 116, 102, 111, 114, 109, 32, 123, 13, 10, 9, 99, 111, 108, 111, 114, 32, 58, 32, 98, 108, 97, 99, 107, 59, 13, 10, 9, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 105, 109, 97, 103, 101, 58, 32, 117, 114, 108, 40, 105, 109, 103, 47, 98, 111, 100, 121, 46, 103, 105, 102, 41, 59, 13, 10, 9, 109, 97, 114, 103, 105, 110, 58, 48, 59, 13, 10, 9, 112, 97, 100, 100, 105, 110, 103, 58, 48, 59, 13, 10, 9, 119, 105, 100, 116, 104, 58, 49, 48, 48, 37, 59, 13, 10, 9, 104, 101, 105, 103, 104, 116, 58, 49, 48, 48, 37, 59, 13, 10, 125, 13, 10, 13, 10, 46, 109, 97, 105, 110, 116, 105, 116, 108, 101, 32, 123, 13, 10, 9, 102, 111, 110, 116, 45, 119, 101, 105, 103, 104, 116, 58, 32, 98, 111, 108, 100, 59, 13, 10, 9, 99, 111, 108, 111, 114, 32, 58, 32, 98, 108, 97, 99, 107, 59, 13, 10, 9, 108, 101, 116, 116, 101, 114, 45, 115, 112, 97, 99, 105, 110, 103, 58, 49, 59, 13, 10, 9, 104, 101, 105, 103, 104, 116, 58, 53, 48, 112, 120, 59, 13, 10, 9, 119, 105, 100, 116, 104, 58, 50, 51, 48, 112, 120, 59, 13, 10, 9, 112, 97, 100, 100, 105, 110, 103, 58, 48, 59, 13, 10, 9, 109, 97, 114, 103, 105, 110, 58, 48, 59, 13, 10, 9, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 105, 109, 97, 103, 101, 58, 32, 117, 114, 108, 40, 105, 109, 103, 47, 116, 111, 112, 46, 103, 105, 102, 41, 59, 13, 10, 125, 13, 10, 13, 10, 46, 97, 99, 116, 105, 111, 110, 109, 101, 110, 117, 32, 123, 13, 10, 9, 102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 32, 57, 48, 37, 59, 13, 10, 9, 99, 111, 108, 111, 114, 32, 58, 32, 98, 108, 97, 99, 107, 59, 13, 10, 9, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 99, 111, 108, 111, 114, 58, 35, 69, 48, 69, 48, 69, 48, 59, 13, 10, 9, 109, 97, 114, 103, 105, 110, 32, 58, 32, 53, 59, 13, 10, 9, 112, 97, 100, 100, 105, 110, 103, 58, 53, 59, 13, 10, 9, 119, 105, 100, 116, 104, 58, 57, 57, 37, 59, 13, 10, 13, 10, 125, 13, 10, 46, 97, 99, 116, 105, 111, 110, 100, 114, 111, 112, 100, 111, 119, 110, 32, 123, 13, 10, 9, 99, 111, 108, 111, 114, 32, 58, 32, 98, 108, 97, 99, 107, 59, 13, 10, 125, 13, 10, 13, 10, 46, 115, 101, 97, 114, 99, 104, 102, 111, 114, 109, 32, 123, 13, 10, 9, 102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 32, 57, 48, 37, 59, 13, 10, 9, 99, 111, 108, 111, 114, 32, 58, 32, 98, 108, 97, 99, 107, 59, 13, 10, 9, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 105, 109, 97, 103, 101, 58, 32, 117, 114, 108, 40, 105, 109, 103, 47, 98, 111, 100, 121, 46, 103, 105, 102, 41, 59, 13, 10, 125, 13, 10, 13, 10, 47, 42, 32, 85, 115, 101, 100, 32, 98, 121, 32, 116, 104, 101, 32, 115, 105, 100, 101, 98, 97, 114, 32, 42, 47, 13, 10, 35, 109, 97, 105, 110, 98, 111, 100, 121, 32, 123, 13, 10, 9, 104, 101, 105, 103, 104, 116, 58, 57, 57, 37, 59, 13, 10, 9, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 99, 111, 108, 111, 114, 58, 35, 69, 48, 69, 48, 69, 48, 59, 32, 13, 10, 9, 109, 105, 110, 45, 119, 105, 100, 116, 104, 58, 49, 51, 48, 112, 120, 59, 13, 10, 9, 108, 101, 102, 116, 58, 53, 59, 13, 10, 9, 116, 111, 112, 58, 51, 59, 13, 10, 9, 112, 111, 115, 105, 116, 105, 111, 110, 58, 97, 98, 115, 111, 108, 117, 116, 101, 59, 13, 10, 9, 13, 10, 125, 13, 10, 13, 10, 46, 109, 101, 110, 117, 116, 114, 101, 101, 32, 123, 13, 10, 9, 112, 97, 100, 100, 105, 110, 103, 58, 48, 59, 13, 10, 9, 97, 108, 105, 103, 110, 58, 99, 101, 110, 116, 101, 114, 59, 13, 10, 9, 99, 111, 108, 111, 114, 58, 32, 98, 108, 97, 99, 107, 59, 13, 10, 9, 109, 105, 110, 45, 119, 105, 100, 116, 104, 58, 50, 51, 48, 112, 120, 59, 13, 10, 9, 119, 105, 100, 116, 104, 58, 49, 48, 48, 37, 59, 13, 10, 125, 13, 10, 13, 10, 46, 115, 101, 116, 116, 105, 110, 103, 115, 98, 111, 100, 121, 32, 123, 13, 10, 9, 112, 97, 100, 100, 105, 110, 103, 58, 48, 59, 13, 10, 9, 97, 108, 105, 103, 110, 58, 99, 101, 110, 116, 101, 114, 59, 13, 10, 9, 99, 111, 108, 111, 114, 58, 32, 98, 108, 97, 99, 107, 59, 13, 10, 9, 109, 105, 110, 45, 119, 105, 100, 116, 104, 58, 49, 57, 56, 112, 120, 59, 13, 10, 9, 119, 105, 100, 116, 104, 58, 49, 48, 48, 37, 59, 13, 10, 9, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 105, 109, 97, 103, 101, 58, 32, 117, 114, 108, 40, 105, 109, 103, 47, 98, 111, 100, 121, 46, 103, 105, 102, 41, 59, 13, 10, 9, 116, 111, 112, 58, 55, 48, 112, 120, 59, 13, 10, 9, 112, 111, 115, 105, 116, 105, 111, 110, 58, 97, 98, 115, 111, 108, 117, 116, 101, 59, 13, 10, 9, 102, 111, 110, 116, 45, 119, 101, 105, 103, 104, 116, 58, 110, 111, 114, 109, 97, 108, 59, 13, 10, 9, 104, 101, 105, 103, 104, 116, 58, 57, 48, 37, 59, 13, 10, 9, 102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 56, 48, 37, 59, 13, 10, 125, 13, 10, 46, 115, 101, 116, 116, 105, 110, 103, 115, 108, 105, 115, 116, 32, 123, 13, 10, 9, 102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 56, 48, 37, 59, 13, 10, 125, 13, 10, 46, 105, 110, 112, 117, 116, 102, 105, 101, 108, 100, 32, 123, 13, 10, 9, 102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 57, 48, 37, 59, 13, 10, 125, 13, 10, 46, 115, 101, 116, 116, 105, 110, 103, 115, 104, 101, 97, 100, 105, 110, 103, 32, 123, 13, 10, 9, 112, 97, 100, 100, 105, 110, 103, 58, 48, 32, 48, 32, 48, 32, 49, 50, 59, 13, 10, 9, 119, 105, 100, 116, 104, 58, 51, 48, 37, 59, 13, 10, 125, 13, 10, 46, 116, 114, 101, 101, 114, 111, 119, 32, 123, 13, 10, 9, 102, 111, 110, 116, 45, 119, 101, 105, 103, 104, 116, 58, 110, 111, 114, 109, 97, 108, 59, 13, 10, 9, 102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 56, 53, 37, 59, 13, 10, 9, 118, 101, 114, 116, 105, 99, 97, 108, 45, 97, 108, 105, 103, 110, 58, 116, 101, 120, 116, 45, 116, 111, 112, 59, 13, 10, 9, 112, 97, 100, 100, 105, 110, 103, 58, 51, 32, 48, 32, 51, 32, 48, 32, 59, 13, 10, 9, 109, 97, 114, 103, 105, 110, 58, 48, 59, 13, 10, 9, 99, 111, 108, 111, 114, 32, 58, 32, 98, 108, 97, 99, 107, 59, 13, 10, 9, 99, 117, 114, 115, 111, 114, 58, 104, 97, 110, 100, 59, 13, 10, 9, 109, 105, 110, 45, 104, 101, 105, 103, 104, 116, 58, 49, 54, 112, 120, 59, 13, 10, 125, 13, 10, 46, 114, 111, 119, 104, 101, 97, 100, 105, 110, 103, 32, 123, 13, 10, 9, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 99, 111, 108, 111, 114, 58, 35, 67, 67, 67, 67, 67, 67, 59, 13, 10, 9, 102, 111, 110, 116, 45, 119, 101, 105, 103, 104, 116, 58, 98, 111, 108, 100, 59, 13, 10, 9, 99, 111, 108, 111, 114, 58, 98, 108, 97, 99, 107, 59, 13, 10, 9, 98, 111, 114, 100, 101, 114, 58, 51, 32, 111, 117, 116, 115, 101, 116, 32, 108, 105, 103, 104, 116, 103, 114, 97, 121, 59, 13, 10, 9, 109, 97, 114, 103, 105, 110, 58, 50, 112, 120, 59, 13, 10, 9, 112, 97, 100, 100, 105, 110, 103, 45, 108, 101, 102, 116, 58, 53, 59, 13, 10, 9, 99, 117, 114, 115, 111, 114, 58, 104, 97, 110, 100, 59, 13, 10, 9, 97, 108, 105, 103, 110, 58, 99, 101, 110, 116, 101, 114, 59, 13, 10, 125, 13, 10, 13, 10, 35, 109, 97, 105, 110, 99, 97, 116, 97, 108, 111, 103, 98, 111, 100, 121, 32, 123, 13, 10, 9, 104, 101, 105, 103, 104, 116, 58, 57, 57, 37, 59, 13, 10, 9, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 105, 109, 97, 103, 101, 58, 32, 117, 114, 108, 40, 105, 109, 103, 47, 98, 111, 100, 121, 46, 103, 105, 102, 41, 59, 13, 10, 9, 119, 105, 100, 116, 104, 58, 49, 48, 48, 37, 59, 13, 10, 9, 108, 101, 102, 116, 58, 53, 59, 13, 10, 9, 116, 111, 112, 58, 51, 59, 13, 10, 9, 112, 111, 115, 105, 116, 105, 111, 110, 58, 97, 98, 115, 111, 108, 117, 116, 101, 59, 13, 10, 125, 13, 10, 13, 10, 46, 105, 109, 103, 98, 117, 116, 116, 111, 110, 32, 123, 13, 10, 9, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 99, 111, 108, 111, 114, 58, 35, 67, 67, 67, 67, 67, 67, 59, 13, 10, 9, 102, 111, 110, 116, 45, 119, 101, 105, 103, 104, 116, 58, 98, 111, 108, 100, 59, 13, 10, 9, 99, 111, 108, 111, 114, 58, 98, 108, 97, 99, 107, 59, 13, 10, 9, 98, 111, 114, 100, 101, 114, 58, 51, 32, 111, 117, 116, 115, 101, 116, 32, 108, 105, 103, 104, 116, 103, 114, 97, 121, 59, 13, 10, 9, 109, 97, 114, 103, 105, 110, 58, 50, 112, 120, 59, 13, 10, 9, 112, 97, 100, 100, 105, 110, 103, 58, 50, 59, 13, 10, 9, 99, 117, 114, 115, 111, 114, 58, 104, 97, 110, 100, 59, 13, 10, 9, 97, 108, 105, 103, 110, 58, 99, 101, 110, 116, 101, 114, 59, 13, 10, 9, 102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 56, 48, 37, 59, 13, 10, 125, 13, 10, 13, 10, 46, 110, 117, 109, 98, 101, 114, 98, 117, 116, 116, 111, 110, 32, 123, 13, 10, 9, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 99, 111, 108, 111, 114, 58, 35, 67, 67, 67, 67, 67, 67, 59, 13, 10, 9, 102, 111, 110, 116, 45, 119, 101, 105, 103, 104, 116, 58, 110, 111, 114, 109, 97, 108, 59, 13, 10, 9, 99, 111, 108, 111, 114, 58, 98, 108, 97, 99, 107, 59, 13, 10, 9, 109, 97, 114, 103, 105, 110, 58, 49, 112, 120, 59, 13, 10, 9, 99, 117, 114, 115, 111, 114, 58, 104, 97, 110, 100, 59, 13, 10, 9, 97, 108, 105, 103, 110, 58, 99, 101, 110, 116, 101, 114, 59, 13, 10, 9, 98, 111, 114, 100, 101, 114, 58, 51, 32, 111, 117, 116, 115, 101, 116, 32, 108, 105, 103, 104, 116, 103, 114, 97, 121, 59, 13, 10, 9, 104, 101, 105, 103, 104, 116, 58, 50, 48, 112, 120, 59, 59, 13, 10, 9, 119, 105, 100, 116, 104, 58, 49, 50, 48, 112, 120, 59, 13, 10, 9, 118, 101, 114, 116, 105, 99, 97, 108, 45, 97, 108, 105, 103, 110, 58, 98, 111, 116, 116, 111, 109, 59, 13, 10, 9, 112, 97, 100, 100, 105, 110, 103, 32, 58, 32, 48, 32, 48, 32, 48, 32, 53, 59, 13, 10, 9, 102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 56, 48, 37, 59, 13, 10, 9, 13, 10, 125, 13, 10, 13, 10, 46, 110, 117, 109, 98, 101, 114, 98, 117, 116, 116, 111, 110, 112, 117, 115, 104, 101, 100, 32, 123, 13, 10, 9, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 99, 111, 108, 111, 114, 58, 35, 69, 48, 69, 48, 69, 48, 59, 13, 10, 9, 102, 111, 110, 116, 45, 119, 101, 105, 103, 104, 116, 58, 98, 111, 108, 100, 59, 13, 10, 9, 47, 42, 99, 111, 108, 111, 114, 58, 98, 108, 117, 101, 59, 42, 47, 13, 10, 9, 109, 97, 114, 103, 105, 110, 58, 49, 112, 120, 59, 13, 10, 9, 99, 117, 114, 115, 111, 114, 58, 104, 97, 110, 100, 59, 13, 10, 9, 97, 108, 105, 103, 110, 58, 99, 101, 110, 116, 101, 114, 59, 13, 10, 9, 98, 111, 114, 100, 101, 114, 58, 51, 32, 105, 110, 115, 101, 116, 32, 108, 105, 103, 104, 116, 103, 114, 97, 121, 59, 13, 10, 9, 104, 101, 105, 103, 104, 116, 58, 50, 48, 112, 120, 59, 59, 13, 10, 9, 119, 105, 100, 116, 104, 58, 49, 50, 48, 112, 120, 59, 13, 10, 9, 118, 101, 114, 116, 105, 99, 97, 108, 45, 97, 108, 105, 103, 110, 58, 98, 111, 116, 116, 111, 109, 59, 13, 10, 9, 112, 97, 100, 100, 105, 110, 103, 32, 58, 32, 48, 32, 48, 32, 48, 32, 53, 59, 13, 10, 9, 102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 56, 48, 37, 59, 13, 10, 9, 13, 10, 125, 13, 10, 46, 97, 99, 116, 105, 111, 110, 115, 109, 97, 108, 108, 98, 117, 116, 116, 111, 110, 32, 123, 13, 10, 9, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 99, 111, 108, 111, 114, 58, 35, 67, 67, 67, 67, 67, 67, 59, 13, 10, 9, 102, 111, 110, 116, 45, 119, 101, 105, 103, 104, 116, 58, 98, 111, 108, 100, 59, 13, 10, 9, 99, 111, 108, 111, 114, 58, 98, 108, 97, 99, 107, 59, 13, 10, 9, 109, 97, 114, 103, 105, 110, 58, 49, 112, 120, 59, 13, 10, 9, 99, 117, 114, 115, 111, 114, 58, 104, 97, 110, 100, 59, 13, 10, 9, 97, 108, 105, 103, 110, 58, 99, 101, 110, 116, 101, 114, 59, 13, 10, 9, 102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 55, 48, 37, 59, 13, 10, 9, 98, 111, 114, 100, 101, 114, 58, 50, 32, 111, 117, 116, 115, 101, 116, 32, 108, 105, 103, 104, 116, 103, 114, 97, 121, 59, 13, 10, 9, 104, 101, 105, 103, 104, 116, 58, 49, 49, 112, 120, 59, 13, 10, 9, 119, 105, 100, 116, 104, 58, 49, 49, 112, 120, 59, 13, 10, 9, 118, 101, 114, 116, 105, 99, 97, 108, 45, 97, 108, 105, 103, 110, 58, 98, 111, 116, 116, 111, 109, 59, 13, 10, 125, 13, 10, 46, 97, 99, 116, 105, 111, 110, 98, 117, 116, 116, 111, 110, 32, 123, 13, 10, 9, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 99, 111, 108, 111, 114, 58, 35, 67, 67, 67, 67, 67, 67, 59, 13, 10, 9, 102, 111, 110, 116, 45, 119, 101, 105, 103, 104, 116, 58, 98, 111, 108, 100, 59, 13, 10, 9, 99, 111, 108, 111, 114, 58, 98, 108, 97, 99, 107, 59, 13, 10, 9, 109, 97, 114, 103, 105, 110, 58, 50, 112, 120, 59, 13, 10, 9, 99, 117, 114, 115, 111, 114, 58, 104, 97, 110, 100, 59, 13, 10, 9, 97, 108, 105, 103, 110, 58, 99, 101, 110, 116, 101, 114, 59, 13, 10, 9, 102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 54, 48, 37, 59, 13, 10, 9, 98, 111, 114, 100, 101, 114, 58, 53, 32, 111, 117, 116, 115, 101, 116, 32, 108, 105, 103, 104, 116, 103, 114, 97, 121, 59, 13, 10, 9, 104, 101, 105, 103, 104, 116, 58, 50, 53, 112, 120, 59, 13, 10, 9, 119, 105, 100, 116, 104, 58, 50, 53, 112, 120, 59, 13, 10, 9, 118, 101, 114, 116, 105, 99, 97, 108, 45, 97, 108, 105, 103, 110, 58, 116, 111, 112, 59, 13, 10, 125, 13, 10, 13, 10, 46, 97, 99, 116, 105, 111, 110, 98, 117, 116, 116, 111, 110, 112, 117, 115, 104, 101, 100, 32, 123, 13, 10, 9, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 99, 111, 108, 111, 114, 58, 35, 69, 48, 69, 48, 69, 48, 59, 13, 10, 9, 102, 111, 110, 116, 45, 119, 101, 105, 103, 104, 116, 58, 98, 111, 108, 100, 59, 13, 10, 9, 99, 111, 108, 111, 114, 58, 98, 108, 97, 99, 107, 59, 13, 10, 9, 109, 97, 114, 103, 105, 110, 58, 50, 112, 120, 59, 13, 10, 9, 97, 108, 105, 103, 110, 58, 99, 101, 110, 116, 101, 114, 59, 13, 10, 9, 102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 55, 48, 37, 59, 13, 10, 9, 98, 111, 114, 100, 101, 114, 58, 53, 32, 105, 110, 115, 101, 116, 32, 108, 105, 103, 104, 116, 103, 114, 97, 121, 59, 13, 10, 9, 104, 101, 105, 103, 104, 116, 58, 50, 53, 112, 120, 59, 13, 10, 9, 119, 105, 100, 116, 104, 58, 50, 53, 112, 120, 59, 13, 10, 9, 118, 101, 114, 116, 105, 99, 97, 108, 45, 97, 108, 105, 103, 110, 58, 116, 111, 112, 59, 13, 10, 9, 99, 117, 114, 115, 111, 114, 58, 104, 97, 110, 100, 59, 13, 10, 9, 13, 10, 125, 13, 10, 13, 10, 13, 10, 46, 116, 114, 101, 101, 99, 101, 108, 108, 32, 123, 13, 10, 9, 112, 97, 100, 100, 105, 110, 103, 58, 48, 32, 48, 32, 50, 32, 50, 59, 13, 10, 125, 13, 10, 46, 116, 114, 101, 101, 115, 112, 97, 99, 101, 114, 32, 123, 13, 10, 9, 112, 97, 100, 100, 105, 110, 103, 58, 48, 59, 13, 10, 9, 109, 97, 114, 103, 105, 110, 58, 48, 59, 13, 10, 9, 109, 105, 110, 45, 104, 101, 105, 103, 104, 116, 58, 50, 112, 120, 59, 13, 10, 9, 102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 49, 112, 120, 59, 13, 10, 9, 119, 105, 100, 116, 104, 58, 50, 48, 48, 112, 120, 59, 13, 10, 9, 13, 10, 125, 13, 10, 46, 112, 111, 112, 117, 112, 102, 111, 114, 109, 32, 123, 13, 10, 9, 97, 108, 105, 103, 110, 32, 58, 32, 99, 101, 110, 116, 101, 114, 59, 13, 10, 9, 102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 32, 57, 48, 37, 59, 13, 10, 9, 99, 111, 108, 111, 114, 32, 58, 32, 98, 108, 97, 99, 107, 59, 13, 10, 9, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 105, 109, 97, 103, 101, 58, 32, 117, 114, 108, 40, 105, 109, 103, 47, 98, 111, 100, 121, 46, 103, 105, 102, 41, 59, 13, 10, 125, 13, 10, 13, 10, 46, 112, 111, 112, 117, 112, 116, 105, 116, 108, 101, 32, 123, 13, 10, 9, 102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 32, 49, 50, 48, 37, 59, 13, 10, 9, 102, 111, 110, 116, 45, 119, 101, 105, 103, 104, 116, 32, 58, 32, 98, 111, 108, 100, 59, 13, 10, 9, 108, 101, 116, 116, 101, 114, 45, 115, 112, 97, 99, 105, 110, 103, 32, 58, 32, 49, 59, 13, 10, 125, 13, 10, 46, 112, 111, 112, 117, 112, 116, 97, 98, 32, 123, 13, 10, 9, 102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 32, 49, 49, 48, 37, 59, 13, 10, 9, 108, 101, 116, 116, 101, 114, 45, 115, 112, 97, 99, 105, 110, 103, 32, 58, 32, 49, 59, 13, 10, 9, 98, 111, 114, 100, 101, 114, 45, 116, 111, 112, 32, 58, 32, 49, 32, 115, 111, 108, 105, 100, 32, 98, 108, 97, 99, 107, 59, 13, 10, 9, 98, 111, 114, 100, 101, 114, 45, 114, 105, 103, 104, 116, 32, 58, 32, 49, 32, 115, 111, 108, 105, 100, 32, 98, 108, 97, 99, 107, 59, 13, 10, 9, 98, 111, 114, 100, 101, 114, 45, 108, 101, 102, 116, 32, 58, 32, 49, 32, 115, 111, 108, 105, 100, 32, 98, 108, 97, 99, 107, 59, 13, 10, 9, 112, 97, 100, 100, 105, 110, 103, 32, 58, 32, 52, 59, 13, 10, 9, 109, 97, 114, 103, 105, 110, 32, 58, 32, 56, 32, 51, 32, 48, 32, 51, 59, 13, 10, 9, 119, 105, 100, 116, 104, 32, 58, 32, 49, 48, 48, 37, 59, 13, 10, 9, 104, 101, 105, 103, 104, 116, 58, 56, 48, 37, 59, 13, 10, 9, 118, 101, 114, 116, 105, 99, 97, 108, 45, 97, 108, 105, 103, 110, 58, 116, 101, 120, 116, 45, 116, 111, 112, 59, 13, 10, 9, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 99, 111, 108, 111, 114, 58, 98, 108, 97, 99, 107, 59, 13, 10, 9, 97, 108, 105, 103, 110, 58, 99, 101, 110, 116, 101, 114, 59, 9, 13, 10, 9, 99, 111, 108, 111, 114, 58, 98, 108, 97, 99, 107, 59, 13, 10, 9, 99, 117, 114, 115, 111, 114, 58, 104, 97, 110, 100, 59, 13, 10, 125, 13, 10, 46, 116, 97, 98, 115, 101, 108, 101, 99, 116, 101, 100, 32, 123, 13, 10, 9, 102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 32, 49, 49, 48, 37, 59, 13, 10, 9, 108, 101, 116, 116, 101, 114, 45, 115, 112, 97, 99, 105, 110, 103, 32, 58, 32, 49, 59, 13, 10, 9, 98, 111, 114, 100, 101, 114, 32, 58, 32, 49, 32, 115, 111, 108, 105, 100, 32, 98, 108, 97, 99, 107, 59, 13, 10, 9, 98, 111, 114, 100, 101, 114, 45, 98, 111, 116, 116, 111, 109, 32, 58, 32, 48, 59, 13, 10, 9, 112, 97, 100, 100, 105, 110, 103, 32, 58, 32, 52, 32, 52, 32, 48, 32, 52, 59, 13, 10, 9, 109, 97, 114, 103, 105, 110, 32, 58, 32, 48, 59, 13, 10, 9, 116, 101, 120, 116, 45, 97, 108, 105, 103, 110, 32, 58, 32, 108, 101, 102, 116, 59, 13, 10, 9, 118, 101, 114, 116, 105, 99, 97, 108, 45, 97, 108, 105, 103, 110, 58, 116, 101, 120, 116, 45, 116, 111, 112, 59, 13, 10, 9, 97, 108, 105, 103, 110, 58, 99, 101, 110, 116, 101, 114, 59, 13, 10, 9, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 99, 111, 108, 111, 114, 58, 35, 69, 48, 69, 48, 69, 48, 59, 13, 10, 9, 99, 111, 108, 111, 114, 58, 98, 108, 97, 99, 107, 59, 13, 10, 125, 13, 10, 13, 10, 46, 112, 111, 112, 117, 112, 98, 117, 116, 116, 111, 110, 32, 123, 13, 10, 9, 119, 105, 100, 116, 104, 58, 32, 49, 48, 48, 112, 120, 59, 13, 10, 125, 13, 10, 13, 10, 46, 114, 101, 115, 117, 108, 116, 108, 105, 115, 116, 32, 123, 13, 10, 9, 97, 108, 105, 103, 110, 58, 99, 101, 110, 116, 101, 114, 59, 13, 10, 9, 99, 111, 108, 111, 114, 58, 32, 98, 108, 97, 99, 107, 59, 13, 10, 9, 119, 105, 100, 116, 104, 58, 49, 48, 48, 37, 59, 13, 10, 9, 104, 101, 105, 103, 104, 116, 58, 56, 57, 37, 59, 13, 10, 9, 111, 118, 101, 114, 102, 108, 111, 119, 58, 97, 117, 116, 111, 59, 13, 10, 9, 112, 111, 115, 105, 116, 105, 111, 110, 58, 97, 98, 115, 111, 108, 117, 116, 101, 59, 13, 10, 9, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 99, 111, 108, 111, 114, 58, 35, 69, 48, 69, 48, 69, 48, 59, 13, 10, 9, 13, 10, 125, 13, 10, 46, 114, 101, 115, 117, 108, 116, 114, 111, 119, 32, 123, 13, 10, 9, 102, 111, 110, 116, 45, 119, 101, 105, 103, 104, 116, 58, 110, 111, 114, 109, 97, 108, 59, 13, 10, 9, 102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 55, 53, 37, 59, 13, 10, 9, 118, 101, 114, 116, 105, 99, 97, 108, 45, 97, 108, 105, 103, 110, 58, 116, 101, 120, 116, 45, 116, 111, 112, 59, 13, 10, 9, 112, 97, 100, 100, 105, 110, 103, 58, 49, 59, 13, 10, 9, 109, 97, 114, 103, 105, 110, 58, 48, 59, 13, 10, 9, 99, 111, 108, 111, 114, 32, 58, 32, 98, 108, 97, 99, 107, 59, 13, 10, 9, 99, 117, 114, 115, 111, 114, 58, 104, 97, 110, 100, 59, 13, 10, 9, 109, 105, 110, 45, 104, 101, 105, 103, 104, 116, 58, 49, 54, 112, 120, 59, 13, 10, 125, 13, 10, 46, 114, 101, 115, 117, 108, 116, 104, 101, 97, 100, 105, 110, 103, 32, 123, 13, 10, 9, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 99, 111, 108, 111, 114, 58, 35, 67, 67, 67, 67, 67, 67, 59, 13, 10, 9, 102, 111, 110, 116, 45, 119, 101, 105, 103, 104, 116, 58, 98, 111, 108, 100, 59, 13, 10, 9, 99, 111, 108, 111, 114, 58, 98, 108, 97, 99, 107, 59, 13, 10, 9, 98, 111, 114, 100, 101, 114, 58, 51, 32, 111, 117, 116, 115, 101, 116, 32, 108, 105, 103, 104, 116, 103, 114, 97, 121, 59, 13, 10, 9, 109, 97, 114, 103, 105, 110, 58, 50, 112, 120, 59, 13, 10, 9, 112, 97, 100, 100, 105, 110, 103, 45, 108, 101, 102, 116, 58, 53, 59, 13, 10, 9, 99, 117, 114, 115, 111, 114, 58, 104, 97, 110, 100, 59, 13, 10, 9, 97, 108, 105, 103, 110, 58, 99, 101, 110, 116, 101, 114, 59, 13, 10, 9, 102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 56, 53, 37, 59, 13, 10, 125, 13, 10, 46, 97, 99, 116, 105, 111, 110, 116, 101, 120, 116, 97, 114, 101, 97, 32, 123, 13, 10, 9, 102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 57, 48, 37, 59, 13, 10, 9, 116, 101, 120, 116, 45, 97, 108, 105, 103, 110, 58, 108, 101, 102, 116, 59, 13, 10, 9, 119, 105, 100, 116, 104, 58, 49, 48, 48, 37, 59, 13, 10, 9, 104, 101, 105, 103, 104, 116, 58, 49, 48, 48, 112, 120, 59, 13, 10, 125, 13, 10, 13, 10, 60, 47, 115, 116, 121, 108, 101, 62, 13, 10, 13, 10, 60, 47, 104, 101, 97, 100, 62, 13, 10, 60, 98, 111, 100, 121, 32, 111, 110, 108, 111, 97, 100, 61, 34, 105, 110, 105, 116, 40, 41, 59, 34, 32, 62, 13, 10, 13, 10, 13, 10, 60, 100, 105, 118, 32, 105, 100, 61, 34, 109, 97, 105, 110, 98, 111, 100, 121, 34, 32, 62, 13, 10, 13, 10, 60, 102, 111, 114, 109, 32, 110, 97, 109, 101, 61, 34, 114, 101, 115, 101, 116, 117, 115, 101, 114, 102, 111, 114, 109, 34, 32, 116, 97, 114, 103, 101, 116, 61, 34, 95, 115, 101, 108, 102, 34, 32, 97, 99, 116, 105, 111, 110, 61, 34, 115, 101, 114, 118, 108, 101, 116, 47, 68, 114, 115, 82, 101, 115, 101, 116, 85, 115, 101, 114, 34, 32, 109, 101, 116, 104, 111, 100, 61, 34, 112, 111, 115, 116, 34, 62, 13, 10, 60, 105, 110, 112, 117, 116, 32, 116, 121, 112, 101, 61, 104, 105, 100, 100, 101, 110, 32, 110, 97, 109, 101, 61, 34, 114, 101, 115, 101, 116, 117, 115, 101, 114, 95, 100, 105, 114, 105, 100, 34, 32, 105, 100, 61, 34, 114, 101, 115, 101, 116, 117, 115, 101, 114, 95, 100, 105, 114, 105, 100, 34, 32, 118, 97, 108, 117, 101, 61, 34, 51, 54, 49, 57, 48, 49, 48, 48, 48, 49, 58, 48, 52, 54, 49, 56, 50, 34, 62, 13, 10, 60, 47, 102, 111, 114, 109, 62, 13, 10, 13, 10, 60, 102, 111, 114, 109, 32, 110, 97, 109, 101, 61, 34, 112, 114, 101, 115, 101, 110, 99, 101, 102, 111, 114, 109, 34, 32, 116, 97, 114, 103, 101, 116, 61, 34, 95, 115, 101, 108, 102, 34, 32, 97, 99, 116, 105, 111, 110, 61, 34, 68, 114, 115, 80, 114, 101, 115, 101, 110, 99, 101, 34, 32, 109, 101, 116, 104, 111, 100, 61, 34, 112, 111, 115, 116, 34, 62, 13, 10, 60, 105, 110, 112, 117, 116, 32, 116, 121, 112, 101, 61, 104, 105, 100, 100, 101, 110, 32, 110, 97, 109, 101, 61, 34, 112, 114, 101, 115, 101, 110, 99, 101, 95, 99, 111, 100, 101, 34, 32, 105, 100, 61, 34, 112, 114, 101, 115, 101, 110, 99, 101, 95, 99, 111, 100, 101, 34, 32, 118, 97, 108, 117, 101, 61, 34, 34, 62, 13, 10, 60, 105, 110, 112, 117, 116, 32, 116, 121, 112, 101, 61, 104, 105, 100, 100, 101, 110, 32, 110, 97, 109, 101, 61, 34, 112, 114, 101, 115, 101, 110, 99, 101, 95, 100, 105, 118, 101, 114, 116, 110, 98, 114, 34, 32, 105, 100, 61, 34, 112, 114, 101, 115, 101, 110, 99, 101, 95, 100, 105, 118, 101, 114, 116, 110, 98, 114, 34, 32, 118, 97, 108, 117, 101, 61, 34, 34, 62, 13, 10, 60, 105, 110, 112, 117, 116, 32, 116, 121, 112, 101, 61, 104, 105, 100, 100, 101, 110, 32, 110, 97, 109, 101, 61, 34, 112, 114, 101, 115, 101, 110, 99, 101, 95, 117, 110, 116, 105, 108, 34, 32, 105, 100, 61, 34, 112, 114, 101, 115, 101, 110, 99, 101, 95, 117, 110, 116, 105, 108, 34, 32, 118, 97, 108, 117, 101, 61, 34, 34, 62, 13, 10, 60, 105, 110, 112, 117, 116, 32, 116, 121, 112, 101, 61, 104, 105, 100, 100, 101, 110, 32, 110, 97, 109, 101, 61, 34, 112, 114, 101, 115, 101, 110, 99, 101, 95, 100, 105, 114, 105, 100, 34, 32, 105, 100, 61, 34, 112, 114, 101, 115, 101, 110, 99, 101, 95, 100, 105, 114, 105, 100, 34, 32, 118, 97, 108, 117, 101, 61, 34, 34, 62, 13, 10, 60, 105, 110, 112, 117, 116, 32, 116, 121, 112, 101, 61, 104, 105, 100, 100, 101, 110, 32, 110, 97, 109, 101, 61, 34, 112, 114, 101, 115, 101, 110, 99, 101, 95, 116, 101, 120, 116, 34, 32, 105, 100, 61, 34, 112, 114, 101, 115, 101, 110, 99, 101, 95, 116, 101, 120, 116, 34, 32, 118, 97, 108, 117, 101, 61, 34, 34, 62, 13, 10, 60, 105, 110, 112, 117, 116, 32, 116, 121, 112, 101, 61, 104, 105, 100, 100, 101, 110, 32, 110, 97, 109, 101, 61, 34, 112, 114, 101, 115, 101, 110, 99, 101, 95, 112, 114, 101, 115, 101, 116, 34, 32, 105, 100, 61, 34, 112, 114, 101, 115, 101, 110, 99, 101, 95, 112, 114, 101, 115, 101, 116, 34, 32, 118, 97, 108, 117, 101, 61, 34, 34, 62, 13, 10, 60, 47, 102, 111, 114, 109, 62, 13, 10, 13, 10, 60, 100, 105, 118, 32, 99, 108, 97, 115, 115, 61, 34, 109, 97, 105, 110, 116, 105, 116, 108, 101, 34, 32, 115, 116, 121, 108, 101, 61, 34, 119, 105, 100, 116, 104, 58, 49, 48, 48, 37, 34, 62, 13, 10, 60, 116, 97, 98, 108, 101, 32, 99, 101, 108, 108, 115, 112, 97, 99, 105, 110, 103, 61, 48, 32, 99, 101, 108, 108, 112, 97, 100, 100, 105, 110, 103, 61, 51, 32, 119, 105, 100, 116, 104, 61, 34, 49, 48, 48, 37, 34, 32, 62, 13, 10, 60, 116, 114, 62, 13, 10, 9, 60, 116, 100, 32, 99, 108, 97, 115, 115, 61, 34, 109, 97, 105, 110, 116, 105, 116, 108, 101, 34, 32, 115, 116, 121, 108, 101, 61, 34, 119, 105, 100, 116, 104, 58, 49, 48, 48, 37, 34, 32, 97, 108, 105, 103, 110, 61, 98, 97, 115, 101, 108, 105, 110, 101, 62, 13, 10, 9, 60, 105, 109, 103, 32, 115, 114, 99, 61, 34, 105, 109, 103, 47, 115, 112, 97, 99, 101, 114, 46, 103, 105, 102, 34, 32, 104, 101, 105, 103, 104, 116, 61, 53, 48, 32, 119, 105, 100, 116, 104, 61, 50, 62, 13, 10, 9, 83, 97, 109, 98, 97, 108, 32, 66, 105, 106, 32, 32, 40, 49, 49, 48, 48, 41, 13, 10, 60, 33, 45, 45, 32, 116, 111, 111, 108, 98, 111, 120, 32, 45, 45, 62, 13, 10, 9, 60, 116, 100, 32, 97, 108, 105, 103, 110, 61, 114, 105, 103, 104, 116, 32, 32, 118, 97, 108, 105, 103, 110, 61, 98, 97, 115, 101, 108, 105, 110, 101, 32, 110, 111, 119, 114, 97, 112, 62, 32, 13, 10, 9, 9, 13, 10, 9, 9, 60, 115, 112, 97, 110, 32, 105, 100, 61, 34, 114, 101, 115, 101, 116, 98, 117, 116, 116, 111, 110, 34, 32, 32, 99, 108, 97, 115, 115, 61, 34, 97, 99, 116, 105, 111, 110, 98, 117, 116, 116, 111, 110, 34, 32, 111, 110, 99, 108, 105, 99, 107, 61, 34, 114, 101, 115, 101, 116, 85, 115, 101, 114, 83, 101, 116, 116, 105, 110, 103, 115, 40, 41, 34, 32, 32, 62, 13, 10, 9, 9, 9, 9, 60, 105, 109, 103, 32, 115, 114, 99, 61, 34, 105, 109, 103, 47, 115, 112, 97, 99, 101, 114, 46, 103, 105, 102, 34, 32, 119, 105, 100, 116, 104, 61, 34, 50, 53, 34, 32, 104, 101, 105, 103, 116, 104, 61, 34, 50, 53, 34, 62, 82, 101, 115, 101, 116, 32, 117, 115, 101, 114, 32, 115, 101, 116, 116, 105, 110, 103, 115, 13, 10, 9, 9, 60, 47, 115, 112, 97, 110, 62, 13, 10, 9, 9, 13, 10, 9, 9, 60, 115, 112, 97, 110, 32, 105, 100, 61, 34, 108, 111, 103, 111, 117, 116, 98, 117, 116, 116, 111, 110, 34, 32, 32, 99, 108, 97, 115, 115, 61, 34, 97, 99, 116, 105, 111, 110, 98, 117, 116, 116, 111, 110, 34, 32, 111, 110, 99, 108, 105, 99, 107, 61, 34, 108, 111, 103, 111, 117, 116, 40, 41, 34, 32, 32, 62, 13, 10, 9, 9, 9, 9, 60, 105, 109, 103, 32, 115, 114, 99, 61, 34, 105, 109, 103, 47, 115, 112, 97, 99, 101, 114, 46, 103, 105, 102, 34, 32, 119, 105, 100, 116, 104, 61, 34, 50, 53, 34, 32, 104, 101, 105, 103, 116, 104, 61, 34, 50, 53, 34, 62, 76, 111, 103, 32, 111, 117, 116, 13, 10, 9, 9, 60, 47, 115, 112, 97, 110, 62, 13, 10, 60, 116, 114, 62, 60, 116, 100, 32, 99, 111, 108, 115, 112, 97, 110, 61, 50, 62, 60, 104, 114, 62, 13, 10, 13, 10, 60, 47, 116, 97, 98, 108, 101, 62, 13, 10, 13, 10, 60, 47, 100, 105, 118, 62, 13, 10, 13, 10, 60, 100, 105, 118, 32, 99, 108, 97, 115, 115, 61, 34, 115, 101, 116, 116, 105, 110, 103, 115, 98, 111, 100, 121, 34, 32, 32, 105, 100, 61, 34, 112, 114, 101, 115, 101, 110, 99, 101, 109, 101, 110, 117, 34, 62, 13, 10, 13, 10, 60, 116, 97, 98, 108, 101, 32, 32, 115, 116, 121, 108, 101, 61, 34, 119, 105, 100, 116, 104, 58, 49, 48, 48, 37, 59, 99, 111, 108, 111, 114, 58, 98, 108, 97, 99, 107, 59, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 99, 111, 108, 111, 114, 58, 35, 69, 48, 69, 48, 69, 48, 34, 32, 98, 111, 114, 100, 101, 114, 61, 48, 32, 99, 101, 108, 108, 112, 97, 100, 100, 105, 110, 103, 61, 51, 32, 99, 101, 108, 108, 115, 112, 97, 99, 105, 110, 103, 61, 50, 62, 13, 10, 60, 116, 114, 62, 60, 116, 100, 32, 115, 116, 121, 108, 101, 61, 34, 119, 105, 100, 116, 104, 58, 51, 53, 37, 59, 98, 111, 114, 100, 101, 114, 58, 49, 32, 115, 111, 108, 105, 100, 32, 103, 114, 97, 121, 59, 34, 62, 13, 10, 13, 10, 9, 60, 116, 97, 98, 108, 101, 32, 32, 115, 116, 121, 108, 101, 61, 34, 119, 105, 100, 116, 104, 58, 49, 48, 48, 37, 59, 99, 111, 108, 111, 114, 58, 98, 108, 97, 99, 107, 59, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 99, 111, 108, 111, 114, 58, 35, 69, 48, 69, 48, 69, 48, 34, 32, 98, 111, 114, 100, 101, 114, 61, 48, 32, 99, 101, 108, 108, 112, 97, 100, 100, 105, 110, 103, 61, 51, 32, 99, 101, 108, 108, 115, 112, 97, 99, 105, 110, 103, 61, 50, 62, 13, 10, 9, 9, 60, 116, 114, 62, 60, 116, 100, 32, 32, 115, 116, 121, 108, 101, 61, 34, 102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 49, 48, 48, 37, 34, 62, 60, 98, 62, 80, 114, 101, 115, 101, 110, 99, 101, 13, 10, 9, 13, 10, 13, 10, 9, 9, 60, 116, 100, 32, 110, 111, 119, 114, 97, 112, 62, 9, 60, 105, 109, 103, 32, 115, 114, 99, 61, 39, 105, 109, 103, 47, 110, 111, 116, 95, 97, 118, 97, 105, 108, 97, 98, 108, 101, 95, 110, 111, 95, 67, 70, 80, 46, 103, 105, 102, 39, 62, 76, 101, 102, 116, 32, 102, 111, 114, 32, 116, 104, 101, 32, 100, 97, 121, 13, 10, 13, 10, 13, 10, 9, 60, 116, 114, 62, 13, 10, 9, 9, 60, 116, 100, 32, 99, 111, 108, 115, 112, 97, 110, 61, 50, 62, 60, 104, 114, 62, 13, 10, 9, 13, 10, 13, 10, 9, 9, 60, 116, 114, 32, 115, 116, 121, 108, 101, 61, 34, 100, 105, 115, 112, 108, 97, 121, 58, 34, 62, 60, 116, 100, 32, 99, 111, 108, 115, 112, 97, 110, 61, 50, 62, 80, 114, 101, 100, 101, 102, 105, 110, 101, 100, 32, 111, 112, 116, 105, 111, 110, 115, 13, 10, 9, 13, 10, 13, 10, 9, 9, 60, 116, 114, 32, 32, 115, 116, 121, 108, 101, 61, 34, 100, 105, 115, 112, 108, 97, 121, 58, 34, 62, 13, 10, 9, 9, 9, 60, 116, 100, 32, 32, 99, 111, 108, 115, 112, 97, 110, 61, 50, 32, 62, 13, 10, 9, 9, 9, 60, 115, 112, 97, 110, 32, 115, 116, 121, 108, 101, 61, 34, 119, 105, 100, 116, 104, 58, 55, 48, 37, 34, 32, 99, 108, 97, 115, 115, 61, 39, 105, 109, 103, 98, 117, 116, 116, 111, 110, 39, 32, 111, 110, 99, 108, 105, 99, 107, 61, 34, 112, 114, 101, 115, 101, 116, 80, 114, 101, 115, 101, 110, 99, 101, 40, 39, 48, 39, 41, 59, 34, 32, 62, 13, 10, 9, 9, 9, 9, 60, 105, 109, 103, 32, 115, 114, 99, 61, 39, 105, 109, 103, 47, 97, 118, 97, 105, 108, 97, 98, 108, 101, 46, 103, 105, 102, 39, 32, 119, 105, 100, 116, 104, 61, 49, 54, 32, 104, 101, 105, 103, 104, 116, 61, 49, 54, 62, 67, 104, 97, 110, 103, 101, 32, 116, 111, 32, 65, 118, 97, 105, 108, 97, 98, 108, 101, 13, 10, 9, 9, 9, 60, 47, 115, 112, 97, 110, 62, 13, 10, 9, 9, 9, 60, 98, 114, 62, 13, 10, 13, 10, 9, 9, 60, 116, 114, 32, 32, 115, 116, 121, 108, 101, 61, 34, 100, 105, 115, 112, 108, 97, 121, 58, 34, 62, 13, 10, 9, 9, 9, 60, 116, 100, 32, 32, 99, 111, 108, 115, 112, 97, 110, 61, 50, 32, 62, 13, 10, 9, 9, 9, 60, 115, 112, 97, 110, 32, 115, 116, 121, 108, 101, 61, 34, 119, 105, 100, 116, 104, 58, 55, 48, 37, 34, 32, 99, 108, 97, 115, 115, 61, 39, 105, 109, 103, 98, 117, 116, 116, 111, 110, 39, 32, 111, 110, 99, 108, 105, 99, 107, 61, 34, 112, 114, 101, 115, 101, 116, 80, 114, 101, 115, 101, 110, 99, 101, 40, 39, 49, 39, 41, 59, 34, 32, 62, 13, 10, 9, 9, 9, 9, 60, 105, 109, 103, 32, 115, 114, 99, 61, 39, 105, 109, 103, 47, 110, 111, 116, 95, 97, 118, 97, 105, 108, 97, 98, 108, 101, 95, 110, 111, 95, 67, 70, 80, 46, 103, 105, 102, 39, 32, 119, 105, 100, 116, 104, 61, 49, 54, 32, 104, 101, 105, 103, 104, 116, 61, 49, 54, 62, 67, 104, 97, 110, 103, 101, 32, 116, 111, 32, 66, 117, 115, 121, 13, 10, 9, 9, 9, 60, 47, 115, 112, 97, 110, 62, 13, 10, 9, 9, 9, 60, 98, 114, 62, 13, 10, 13, 10, 9, 9, 60, 116, 114, 32, 32, 115, 116, 121, 108, 101, 61, 34, 100, 105, 115, 112, 108, 97, 121, 58, 34, 62, 13, 10, 9, 9, 9, 60, 116, 100, 32, 32, 99, 111, 108, 115, 112, 97, 110, 61, 50, 32, 62, 13, 10, 9, 9, 9, 60, 115, 112, 97, 110, 32, 115, 116, 121, 108, 101, 61, 34, 119, 105, 100, 116, 104, 58, 55, 48, 37, 34, 32, 99, 108, 97, 115, 115, 61, 39, 105, 109, 103, 98, 117, 116, 116, 111, 110, 39, 32, 111, 110, 99, 108, 105, 99, 107, 61, 34, 112, 114, 101, 115, 101, 116, 80, 114, 101, 115, 101, 110, 99, 101, 40, 39, 50, 39, 41, 59, 34, 32, 62, 13, 10, 9, 9, 9, 9, 60, 105, 109, 103, 32, 115, 114, 99, 61, 39, 105, 109, 103, 47, 110, 111, 116, 95, 97, 118, 97, 105, 108, 97, 98, 108, 101, 95, 110, 111, 95, 67, 70, 80, 46, 103, 105, 102, 39, 32, 119, 105, 100, 116, 104, 61, 49, 54, 32, 104, 101, 105, 103, 104, 116, 61, 49, 54, 62, 67, 104, 97, 110, 103, 101, 32, 116, 111, 32, 77, 101, 101, 116, 105, 110, 103, 13, 10, 9, 9, 9, 60, 47, 115, 112, 97, 110, 62, 13, 10, 9, 9, 9, 60, 98, 114, 62, 13, 10, 13, 10, 9, 9, 60, 116, 114, 32, 32, 115, 116, 121, 108, 101, 61, 34, 100, 105, 115, 112, 108, 97, 121, 58, 34, 62, 13, 10, 9, 9, 9, 60, 116, 100, 32, 32, 99, 111, 108, 115, 112, 97, 110, 61, 50, 32, 62, 13, 10, 9, 9, 9, 60, 115, 112, 97, 110, 32, 115, 116, 121, 108, 101, 61, 34, 119, 105, 100, 116, 104, 58, 55, 48, 37, 34, 32, 99, 108, 97, 115, 115, 61, 39, 105, 109, 103, 98, 117, 116, 116, 111, 110, 39, 32, 111, 110, 99, 108, 105, 99, 107, 61, 34, 112, 114, 101, 115, 101, 116, 80, 114, 101, 115, 101, 110, 99, 101, 40, 39, 51, 39, 41, 59, 34, 32, 62, 13, 10, 9, 9, 9, 9, 60, 105, 109, 103, 32, 115, 114, 99, 61, 39, 105, 109, 103, 47, 110, 111, 116, 95, 97, 118, 97, 105, 108, 97, 98, 108, 101, 95, 110, 111, 95, 67, 70, 80, 46, 103, 105, 102, 39, 32, 119, 105, 100, 116, 104, 61, 49, 54, 32, 104, 101, 105, 103, 104, 116, 61, 49, 54, 62, 67, 104, 97, 110, 103, 101, 32, 116, 111, 32, 76, 117, 110, 99, 104, 13, 10, 9, 9, 9, 60, 47, 115, 112, 97, 110, 62, 13, 10, 9, 9, 9, 60, 98, 114, 62, 13, 10, 13, 10, 9, 9, 60, 116, 114, 32, 32, 115, 116, 121, 108, 101, 61, 34, 100, 105, 115, 112, 108, 97, 121, 58, 34, 62, 13, 10, 9, 9, 9, 60, 116, 100, 32, 32, 99, 111, 108, 115, 112, 97, 110, 61, 50, 32, 62, 13, 10, 9, 9, 9, 60, 115, 112, 97, 110, 32, 115, 116, 121, 108, 101, 61, 34, 119, 105, 100, 116, 104, 58, 55, 48, 37, 34, 32, 99, 108, 97, 115, 115, 61, 39, 105, 109, 103, 98, 117, 116, 116, 111, 110, 39, 32, 111, 110, 99, 108, 105, 99, 107, 61, 34, 112, 114, 101, 115, 101, 116, 80, 114, 101, 115, 101, 110, 99, 101, 40, 39, 52, 39, 41, 59, 34, 32, 62, 13, 10, 9, 9, 9, 9, 60, 105, 109, 103, 32, 115, 114, 99, 61, 39, 105, 109, 103, 47, 110, 111, 116, 95, 97, 118, 97, 105, 108, 97, 98, 108, 101, 95, 110, 111, 95, 67, 70, 80, 46, 103, 105, 102, 39, 32, 119, 105, 100, 116, 104, 61, 49, 54, 32, 104, 101, 105, 103, 104, 116, 61, 49, 54, 62, 67, 104, 97, 110, 103, 101, 32, 116, 111, 32, 76, 101, 102, 116, 32, 102, 111, 114, 32, 116, 104, 101, 32, 100, 97, 121, 13, 10, 9, 9, 9, 60, 47, 115, 112, 97, 110, 62, 13, 10, 9, 9, 9, 60, 98, 114, 62, 13, 10, 13, 10, 9, 9, 60, 116, 114, 62, 13, 10, 9, 9, 60, 116, 100, 32, 32, 99, 111, 108, 115, 112, 97, 110, 61, 50, 62, 60, 98, 114, 62, 60, 104, 114, 62, 13, 10, 9, 9, 13, 10, 9, 9, 60, 116, 114, 62, 60, 116, 100, 32, 62, 60, 97, 32, 104, 114, 101, 102, 61, 35, 32, 111, 110, 99, 108, 105, 99, 107, 61, 34, 115, 104, 111, 119, 109, 111, 114, 101, 111, 112, 116, 105, 111, 110, 115, 40, 41, 34, 32, 62, 77, 111, 114, 101, 32, 111, 112, 116, 105, 111, 110, 115, 46, 46, 46, 60, 47, 97, 62, 13, 10, 9, 9, 13, 10, 9, 9, 9, 60, 116, 100, 32, 115, 116, 121, 108, 101, 61, 34, 100, 105, 115, 112, 108, 97, 121, 58, 110, 111, 110, 101, 34, 32, 105, 100, 61, 34, 109, 111, 114, 101, 111, 112, 116, 105, 111, 110, 115, 98, 117, 116, 116, 111, 110, 34, 32, 110, 111, 119, 114, 97, 112, 32, 97, 108, 105, 103, 110, 61, 114, 105, 103, 104, 116, 62, 60, 115, 112, 97, 110, 32, 99, 108, 97, 115, 115, 61, 34, 105, 109, 103, 98, 117, 116, 116, 111, 110, 34, 32, 115, 116, 121, 108, 101, 61, 34, 102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 55, 53, 37, 34, 32, 111, 110, 99, 108, 105, 99, 107, 61, 34, 115, 101, 116, 80, 114, 101, 115, 101, 110, 99, 101, 40, 41, 59, 34, 62, 13, 10, 9, 9, 9, 9, 9, 60, 105, 109, 103, 32, 105, 100, 61, 34, 97, 99, 116, 105, 111, 110, 105, 109, 97, 103, 101, 34, 32, 115, 114, 99, 61, 34, 105, 109, 103, 47, 115, 112, 97, 99, 101, 114, 46, 103, 105, 102, 34, 62, 38, 110, 98, 115, 112, 59, 38, 110, 98, 115, 112, 59, 13, 10, 9, 9, 9, 9, 67, 104, 97, 110, 103, 101, 32, 110, 111, 119, 60, 47, 115, 112, 97, 110, 62, 13, 10, 9, 9, 13, 10, 13, 10, 9, 9, 60, 116, 114, 62, 13, 10, 9, 9, 60, 116, 100, 32, 99, 111, 108, 115, 112, 97, 110, 61, 50, 62, 13, 10, 9, 9, 60, 116, 97, 98, 108, 101, 32, 105, 100, 61, 34, 109, 111, 114, 101, 111, 112, 116, 105, 111, 110, 115, 116, 97, 98, 108, 101, 34, 32, 115, 116, 121, 108, 101, 61, 34, 100, 105, 115, 112, 108, 97, 121, 58, 110, 111, 110, 101, 34, 62, 13, 10, 9, 9, 60, 116, 114, 62, 13, 10, 9, 9, 9, 60, 116, 100, 32, 99, 111, 108, 115, 112, 97, 110, 61, 50, 32, 118, 97, 108, 105, 103, 110, 61, 116, 111, 112, 32, 62, 13, 10, 9, 9, 9, 60, 115, 101, 108, 101, 99, 116, 32, 115, 116, 121, 108, 101, 61, 34, 119, 105, 100, 116, 104, 58, 49, 48, 48, 37, 34, 32, 105, 100, 61, 34, 112, 99, 111, 100, 101, 108, 105, 115, 116, 34, 32, 32, 111, 110, 99, 104, 97, 110, 103, 101, 61, 34, 112, 99, 111, 100, 101, 67, 104, 97, 110, 103, 101, 100, 40, 116, 104, 105, 115, 41, 34, 32, 62, 13, 10, 9, 9, 9, 60, 111, 112, 116, 105, 111, 110, 32, 118, 97, 108, 117, 101, 61, 39, 39, 62, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 60, 47, 111, 112, 116, 105, 111, 110, 62, 13, 10, 60, 111, 112, 116, 105, 111, 110, 32, 118, 97, 108, 117, 101, 61, 39, 49, 95, 39, 62, 66, 117, 115, 121, 32, 45, 32, 78, 111, 32, 100, 105, 118, 101, 114, 115, 105, 111, 110, 10, 60, 111, 112, 116, 105, 111, 110, 32, 118, 97, 108, 117, 101, 61, 39, 49, 95, 45, 49, 39, 62, 66, 117, 115, 121, 32, 45, 32, 65, 108, 108, 32, 99, 97, 108, 108, 115, 32, 116, 111, 32, 109, 97, 105, 110, 32, 110, 117, 109, 98, 101, 114, 10, 60, 111, 112, 116, 105, 111, 110, 32, 118, 97, 108, 117, 101, 61, 39, 49, 95, 45, 50, 39, 62, 66, 117, 115, 121, 32, 45, 32, 65, 108, 108, 32, 99, 97, 108, 108, 115, 32, 116, 111, 32, 118, 111, 105, 99, 101, 109, 97, 105, 108, 10, 60, 111, 112, 116, 105, 111, 110, 32, 118, 97, 108, 117, 101, 61, 39, 49, 95, 120, 39, 62, 66, 117, 115, 121, 32, 45, 32, 65, 108, 108, 32, 99, 97, 108, 108, 115, 32, 116, 111, 32, 110, 117, 109, 98, 101, 114, 10, 60, 111, 112, 116, 105, 111, 110, 32, 118, 97, 108, 117, 101, 61, 39, 39, 62, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 60, 47, 111, 112, 116, 105, 111, 110, 62, 10, 60, 111, 112, 116, 105, 111, 110, 32, 118, 97, 108, 117, 101, 61, 39, 50, 95, 39, 62, 77, 101, 101, 116, 105, 110, 103, 32, 45, 32, 78, 111, 32, 100, 105, 118, 101, 114, 115, 105, 111, 110, 10, 60, 111, 112, 116, 105, 111, 110, 32, 118, 97, 108, 117, 101, 61, 39, 50, 95, 45, 49, 39, 62, 77, 101, 101, 116, 105, 110, 103, 32, 45, 32, 65, 108, 108, 32, 99, 97, 108, 108, 115, 32, 116, 111, 32, 109, 97, 105, 110, 32, 110, 117, 109, 98, 101, 114, 10, 60, 111, 112, 116, 105, 111, 110, 32, 118, 97, 108, 117, 101, 61, 39, 50, 95, 45, 50, 39, 62, 77, 101, 101, 116, 105, 110, 103, 32, 45, 32, 65, 108, 108, 32, 99, 97, 108, 108, 115, 32, 116, 111, 32, 118, 111, 105, 99, 101, 109, 97, 105, 108, 10, 60, 111, 112, 116, 105, 111, 110, 32, 118, 97, 108, 117, 101, 61, 39, 50, 95, 120, 39, 62, 77, 101, 101, 116, 105, 110, 103, 32, 45, 32, 65, 108, 108, 32, 99, 97, 108, 108, 115, 32, 116, 111, 32, 110, 117, 109, 98, 101, 114, 10, 60, 111, 112, 116, 105, 111, 110, 32, 118, 97, 108, 117, 101, 61, 39, 39, 62, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 60, 47, 111, 112, 116, 105, 111, 110, 62, 10, 60, 111, 112, 116, 105, 111, 110, 32, 118, 97, 108, 117, 101, 61, 39, 51, 95, 39, 62, 76, 117, 110, 99, 104, 32, 45, 32, 78, 111, 32, 100, 105, 118, 101, 114, 115, 105, 111, 110, 10, 60, 111, 112, 116, 105, 111, 110, 32, 118, 97, 108, 117, 101, 61, 39, 51, 95, 45, 49, 39, 62, 76, 117, 110, 99, 104, 32, 45, 32, 65, 108, 108, 32, 99, 97, 108, 108, 115, 32, 116, 111, 32, 109, 97, 105, 110, 32, 110, 117, 109, 98, 101, 114, 10, 60, 111, 112, 116, 105, 111, 110, 32, 118, 97, 108, 117, 101, 61, 39, 51, 95, 45, 50, 39, 62, 76, 117, 110, 99, 104, 32, 45, 32, 65, 108, 108, 32, 99, 97, 108, 108, 115, 32, 116, 111, 32, 118, 111, 105, 99, 101, 109, 97, 105, 108, 10, 60, 111, 112, 116, 105, 111, 110, 32, 118, 97, 108, 117, 101, 61, 39, 51, 95, 120, 39, 62, 76, 117, 110, 99, 104, 32, 45, 32, 65, 108, 108, 32, 99, 97, 108, 108, 115, 32, 116, 111, 32, 110, 117, 109, 98, 101, 114, 10, 60, 111, 112, 116, 105, 111, 110, 32, 118, 97, 108, 117, 101, 61, 39, 39, 62, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 60, 47, 111, 112, 116, 105, 111, 110, 62, 10, 60, 111, 112, 116, 105, 111, 110, 32, 118, 97, 108, 117, 101, 61, 39, 52, 95, 39, 62, 76, 101, 102, 116, 32, 102, 111, 114, 32, 116, 104, 101, 32, 100, 97, 121, 32, 45, 32, 78, 111, 32, 100, 105, 118, 101, 114, 115, 105, 111, 110, 10, 60, 111, 112, 116, 105, 111, 110, 32, 118, 97, 108, 117, 101, 61, 39, 52, 95, 45, 49, 39, 62, 76, 101, 102, 116, 32, 102, 111, 114, 32, 116, 104, 101, 32, 100, 97, 121, 32, 45, 32, 65, 108, 108, 32, 99, 97, 108, 108, 115, 32, 116, 111, 32, 109, 97, 105, 110, 32, 110, 117, 109, 98, 101, 114, 10, 60, 111, 112, 116, 105, 111, 110, 32, 118, 97, 108, 117, 101, 61, 39, 52, 95, 45, 50, 39, 62, 76, 101, 102, 116, 32, 102, 111, 114, 32, 116, 104, 101, 32, 100, 97, 121, 32, 45, 32, 65, 108, 108, 32, 99, 97, 108, 108, 115, 32, 116, 111, 32, 118, 111, 105, 99, 101, 109, 97, 105, 108, 10, 60, 111, 112, 116, 105, 111, 110, 32, 118, 97, 108, 117, 101, 61, 39, 52, 95, 120, 39, 62, 76, 101, 102, 116, 32, 102, 111, 114, 32, 116, 104, 101, 32, 100, 97, 121, 32, 45, 32, 65, 108, 108, 32, 99, 97, 108, 108, 115, 32, 116, 111, 32, 110, 117, 109, 98, 101, 114, 10, 60, 111, 112, 116, 105, 111, 110, 32, 118, 97, 108, 117, 101, 61, 39, 39, 62, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 60, 47, 111, 112, 116, 105, 111, 110, 62, 10, 60, 111, 112, 116, 105, 111, 110, 32, 118, 97, 108, 117, 101, 61, 39, 53, 95, 39, 62, 82, 101, 116, 117, 114, 110, 115, 32, 45, 32, 78, 111, 32, 100, 105, 118, 101, 114, 115, 105, 111, 110, 10, 60, 111, 112, 116, 105, 111, 110, 32, 118, 97, 108, 117, 101, 61, 39, 53, 95, 45, 49, 39, 62, 82, 101, 116, 117, 114, 110, 115, 32, 45, 32, 65, 108, 108, 32, 99, 97, 108, 108, 115, 32, 116, 111, 32, 109, 97, 105, 110, 32, 110, 117, 109, 98, 101, 114, 10, 60, 111, 112, 116, 105, 111, 110, 32, 118, 97, 108, 117, 101, 61, 39, 53, 95, 45, 50, 39, 62, 82, 101, 116, 117, 114, 110, 115, 32, 45, 32, 65, 108, 108, 32, 99, 97, 108, 108, 115, 32, 116, 111, 32, 118, 111, 105, 99, 101, 109, 97, 105, 108, 10, 60, 111, 112, 116, 105, 111, 110, 32, 118, 97, 108, 117, 101, 61, 39, 53, 95, 120, 39, 62, 82, 101, 116, 117, 114, 110, 115, 32, 45, 32, 65, 108, 108, 32, 99, 97, 108, 108, 115, 32, 116, 111, 32, 110, 117, 109, 98, 101, 114, 10, 60, 111, 112, 116, 105, 111, 110, 32, 118, 97, 108, 117, 101, 61, 39, 39, 62, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 60, 47, 111, 112, 116, 105, 111, 110, 62, 10, 13, 10, 9, 9, 9, 9, 9, 13, 10, 9, 9, 9, 60, 47, 115, 101, 108, 101, 99, 116, 62, 13, 10, 9, 9, 9, 60, 116, 114, 62, 60, 116, 100, 32, 99, 111, 108, 115, 112, 97, 110, 61, 50, 62, 13, 10, 9, 9, 9, 9, 60, 105, 110, 112, 117, 116, 32, 116, 121, 112, 101, 61, 116, 101, 120, 116, 32, 118, 97, 108, 117, 101, 61, 34, 34, 32, 111, 110, 107, 101, 121, 117, 112, 61, 34, 78, 117, 109, 98, 101, 114, 67, 104, 97, 110, 103, 101, 100, 40, 116, 104, 105, 115, 41, 34, 32, 115, 116, 121, 108, 101, 61, 34, 100, 105, 115, 112, 108, 97, 121, 58, 110, 111, 110, 101, 34, 32, 105, 100, 61, 34, 100, 105, 118, 101, 114, 115, 105, 111, 110, 110, 98, 114, 34, 62, 13, 10, 13, 10, 9, 60, 116, 114, 62, 13, 10, 9, 60, 116, 100, 32, 115, 116, 121, 108, 101, 61, 34, 102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 57, 48, 37, 59, 34, 32, 110, 111, 119, 114, 97, 112, 32, 99, 111, 108, 115, 112, 97, 110, 61, 50, 62, 66, 97, 99, 107, 32, 13, 10, 9, 9, 60, 115, 112, 97, 110, 32, 115, 116, 121, 108, 101, 61, 34, 102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 55, 53, 37, 34, 62, 40, 77, 77, 47, 100, 100, 47, 121, 121, 121, 121, 41, 60, 47, 115, 112, 97, 110, 62, 13, 10, 9, 9, 9, 60, 105, 110, 112, 117, 116, 32, 116, 121, 112, 101, 61, 116, 101, 120, 116, 32, 105, 100, 61, 34, 117, 110, 116, 105, 108, 100, 97, 116, 101, 34, 32, 118, 97, 108, 117, 101, 61, 34, 34, 32, 115, 105, 122, 101, 61, 34, 49, 48, 34, 62, 13, 10, 9, 9, 60, 115, 112, 97, 110, 32, 115, 116, 121, 108, 101, 61, 34, 102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 55, 53, 37, 34, 62, 40, 72, 72, 58, 109, 109, 41, 60, 47, 115, 112, 97, 110, 62, 13, 10, 9, 9, 9, 60, 105, 110, 112, 117, 116, 32, 116, 121, 112, 101, 61, 116, 101, 120, 116, 32, 105, 100, 61, 34, 117, 110, 116, 105, 108, 116, 105, 109, 101, 34, 32, 118, 97, 108, 117, 101, 61, 34, 34, 32, 115, 105, 122, 101, 61, 34, 53, 34, 62, 13, 10, 9, 60, 116, 114, 62, 13, 10, 9, 9, 9, 60, 116, 100, 32, 99, 111, 108, 115, 112, 97, 110, 61, 50, 32, 118, 97, 108, 105, 103, 110, 61, 116, 111, 112, 32, 119, 105, 100, 116, 104, 61, 51, 48, 37, 62, 60, 98, 62, 77, 101, 115, 115, 97, 103, 101, 13, 10, 9, 9, 13, 10, 9, 9, 60, 116, 114, 32, 62, 9, 9, 9, 13, 10, 9, 9, 9, 60, 116, 100, 32, 99, 111, 108, 115, 112, 97, 110, 61, 50, 32, 118, 97, 108, 105, 103, 110, 61, 116, 111, 112, 32, 62, 13, 10, 9, 9, 9, 60, 116, 101, 120, 116, 97, 114, 101, 97, 32, 115, 116, 121, 108, 101, 61, 34, 119, 105, 100, 116, 104, 58, 57, 57, 37, 59, 34, 32, 114, 111, 119, 115, 61, 53, 32, 99, 108, 97, 115, 115, 110, 97, 109, 101, 61, 34, 97, 99, 116, 105, 111, 110, 116, 101, 120, 116, 97, 114, 101, 97, 34, 13, 10, 9, 9, 9, 9, 105, 100, 61, 34, 112, 95, 116, 101, 120, 116, 34, 32, 111, 110, 107, 101, 121, 100, 111, 119, 110, 61, 34, 116, 104, 105, 115, 46, 118, 97, 108, 117, 101, 61, 39, 39, 59, 116, 104, 105, 115, 46, 111, 110, 107, 101, 121, 100, 111, 119, 110, 61, 110, 117, 108, 108, 34, 32, 111, 110, 107, 101, 121, 117, 112, 61, 34, 100, 105, 118, 109, 115, 103, 67, 104, 97, 110, 103, 101, 100, 40, 116, 104, 105, 115, 41, 34, 62, 72, 101, 114, 101, 32, 121, 111, 117, 32, 99, 97, 110, 32, 119, 114, 105, 116, 101, 32, 121, 111, 117, 114, 32, 109, 101, 115, 115, 97, 103, 101, 32, 116, 111, 32, 116, 104, 101, 32, 97, 116, 116, 101, 110, 100, 97, 110, 116, 32, 97, 110, 100, 32, 111, 116, 104, 101, 114, 115, 46, 32, 77, 97, 120, 32, 50, 53, 53, 32, 99, 104, 97, 114, 97, 99, 116, 101, 114, 115, 46, 60, 47, 116, 101, 120, 116, 97, 114, 101, 97, 62, 13, 10, 9, 9, 13, 10, 9, 9, 13, 10, 9, 9, 9, 60, 47, 116, 97, 98, 108, 101, 62, 60, 33, 45, 45, 109, 111, 114, 101, 32, 111, 112, 116, 105, 111, 110, 115, 45, 45, 62, 13, 10, 9, 60, 47, 116, 97, 98, 108, 101, 62, 13, 10, 13, 10, 60, 33, 45, 45, 32, 67, 97, 108, 108, 32, 100, 101, 102, 108, 101, 99, 116, 32, 45, 45, 62, 13, 10, 60, 116, 100, 32, 115, 116, 121, 108, 101, 61, 34, 119, 105, 100, 116, 104, 58, 51, 53, 37, 59, 98, 111, 114, 100, 101, 114, 58, 49, 32, 115, 111, 108, 105, 100, 32, 103, 114, 97, 121, 59, 100, 105, 115, 112, 108, 97, 121, 58, 110, 111, 110, 101, 34, 32, 118, 97, 108, 105, 103, 110, 61, 116, 111, 112, 62, 13, 10, 9, 60, 116, 97, 98, 108, 101, 32, 32, 115, 116, 121, 108, 101, 61, 34, 99, 111, 108, 111, 114, 58, 98, 108, 97, 99, 107, 59, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 99, 111, 108, 111, 114, 58, 35, 69, 48, 69, 48, 69, 48, 59, 119, 105, 100, 116, 104, 58, 49, 48, 48, 37, 34, 32, 98, 111, 114, 100, 101, 114, 61, 48, 32, 99, 101, 108, 108, 112, 97, 100, 100, 105, 110, 103, 61, 51, 32, 99, 101, 108, 108, 115, 112, 97, 99, 105, 110, 103, 61, 50, 62, 13, 10, 9, 9, 60, 116, 114, 62, 60, 116, 100, 32, 115, 116, 121, 108, 101, 61, 34, 102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 49, 48, 48, 37, 34, 62, 60, 98, 62, 68, 101, 102, 108, 101, 99, 116, 32, 99, 97, 108, 108, 13, 10, 9, 9, 9, 60, 116, 100, 32, 97, 108, 105, 103, 110, 61, 114, 105, 103, 104, 116, 62, 60, 105, 110, 112, 117, 116, 32, 32, 99, 108, 97, 115, 115, 61, 34, 105, 109, 103, 98, 117, 116, 116, 111, 110, 34, 32, 115, 116, 121, 108, 101, 61, 34, 102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 56, 48, 37, 59, 34, 32, 13, 10, 9, 9, 9, 9, 116, 121, 112, 101, 61, 34, 98, 117, 116, 116, 111, 110, 34, 32, 118, 97, 108, 117, 101, 61, 34, 67, 104, 97, 110, 103, 101, 34, 32, 111, 110, 99, 108, 105, 99, 107, 61, 34, 83, 101, 116, 68, 101, 102, 108, 101, 99, 116, 40, 41, 34, 32, 62, 13, 10, 9, 9, 9, 13, 10, 9, 9, 60, 116, 114, 62, 60, 116, 100, 32, 99, 111, 108, 115, 112, 97, 110, 61, 50, 62, 60, 104, 114, 62, 9, 13, 10, 9, 9, 60, 116, 114, 32, 111, 110, 109, 111, 117, 115, 101, 111, 118, 101, 114, 61, 34, 116, 114, 95, 109, 111, 117, 115, 101, 111, 118, 101, 114, 40, 116, 104, 105, 115, 41, 59, 34, 32, 111, 110, 109, 111, 117, 115, 101, 111, 117, 116, 61, 34, 116, 114, 95, 109, 111, 117, 115, 101, 111, 117, 116, 40, 116, 104, 105, 115, 41, 34, 32, 99, 108, 97, 115, 115, 61, 116, 114, 101, 101, 114, 111, 119, 62, 13, 10, 9, 9, 9, 60, 116, 100, 32, 99, 111, 108, 115, 112, 97, 110, 61, 50, 62, 60, 105, 110, 112, 117, 116, 32, 111, 110, 99, 108, 105, 99, 107, 61, 34, 99, 102, 67, 108, 105, 99, 107, 101, 100, 40, 116, 104, 105, 115, 41, 59, 34, 32, 116, 121, 112, 101, 61, 114, 97, 100, 105, 111, 32, 105, 100, 61, 34, 99, 102, 95, 111, 112, 101, 114, 97, 116, 111, 114, 34, 32, 110, 97, 109, 101, 61, 34, 99, 102, 34, 32, 118, 97, 108, 117, 101, 61, 34, 45, 49, 34, 32, 62, 38, 110, 98, 115, 112, 59, 38, 110, 98, 115, 112, 59, 77, 97, 105, 110, 32, 110, 117, 109, 98, 101, 114, 13, 10, 9, 9, 60, 116, 114, 32, 111, 110, 109, 111, 117, 115, 101, 111, 118, 101, 114, 61, 34, 116, 114, 95, 109, 111, 117, 115, 101, 111, 118, 101, 114, 40, 116, 104, 105, 115, 41, 59, 34, 32, 111, 110, 109, 111, 117, 115, 101, 111, 117, 116, 61, 34, 116, 114, 95, 109, 111, 117, 115, 101, 111, 117, 116, 40, 116, 104, 105, 115, 41, 34, 32, 99, 108, 97, 115, 115, 61, 116, 114, 101, 101, 114, 111, 119, 62, 13, 10, 9, 9, 9, 60, 116, 100, 32, 99, 111, 108, 115, 112, 97, 110, 61, 50, 62, 60, 105, 110, 112, 117, 116, 32, 111, 110, 99, 108, 105, 99, 107, 61, 34, 99, 102, 67, 108, 105, 99, 107, 101, 100, 40, 116, 104, 105, 115, 41, 59, 34, 32, 116, 121, 112, 101, 61, 114, 97, 100, 105, 111, 32, 105, 100, 61, 34, 99, 102, 95, 118, 111, 105, 99, 101, 109, 97, 105, 108, 34, 32, 110, 97, 109, 101, 61, 34, 99, 102, 34, 32, 118, 97, 108, 117, 101, 61, 34, 45, 50, 34, 32, 62, 38, 110, 98, 115, 112, 59, 38, 110, 98, 115, 112, 59, 86, 111, 105, 99, 101, 109, 97, 105, 108, 13, 10, 9, 9, 60, 116, 114, 32, 111, 110, 109, 111, 117, 115, 101, 111, 118, 101, 114, 61, 34, 116, 114, 95, 109, 111, 117, 115, 101, 111, 118, 101, 114, 40, 116, 104, 105, 115, 41, 59, 34, 32, 111, 110, 109, 111, 117, 115, 101, 111, 117, 116, 61, 34, 116, 114, 95, 109, 111, 117, 115, 101, 111, 117, 116, 40, 116, 104, 105, 115, 41, 34, 32, 99, 108, 97, 115, 115, 61, 116, 114, 101, 101, 114, 111, 119, 62, 13, 10, 9, 9, 9, 60, 116, 100, 32, 99, 111, 108, 115, 112, 97, 110, 61, 50, 62, 60, 105, 110, 112, 117, 116, 32, 111, 110, 99, 108, 105, 99, 107, 61, 34, 99, 102, 67, 108, 105, 99, 107, 101, 100, 40, 116, 104, 105, 115, 41, 59, 34, 32, 116, 121, 112, 101, 61, 114, 97, 100, 105, 111, 32, 105, 100, 61, 34, 99, 102, 95, 120, 34, 32, 110, 97, 109, 101, 61, 34, 99, 102, 34, 32, 118, 97, 108, 117, 101, 61, 34, 88, 34, 32, 62, 38, 110, 98, 115, 112, 59, 38, 110, 98, 115, 112, 59, 80, 104, 111, 110, 101, 13, 10, 9, 9, 9, 60, 105, 110, 112, 117, 116, 32, 116, 121, 112, 101, 61, 116, 101, 120, 116, 32, 110, 97, 109, 101, 61, 34, 99, 102, 95, 110, 117, 109, 98, 101, 114, 34, 32, 105, 100, 61, 34, 99, 102, 95, 110, 117, 109, 98, 101, 114, 34, 32, 111, 110, 107, 101, 121, 117, 112, 61, 34, 78, 117, 109, 98, 101, 114, 67, 104, 97, 110, 103, 101, 100, 40, 116, 104, 105, 115, 41, 59, 34, 32, 115, 116, 121, 108, 101, 61, 34, 118, 105, 115, 105, 98, 105, 108, 105, 116, 121, 58, 104, 105, 100, 100, 101, 110, 34, 32, 118, 97, 108, 117, 101, 61, 34, 34, 62, 13, 10, 9, 9, 13, 10, 9, 60, 47, 116, 97, 98, 108, 101, 62, 13, 10, 13, 10, 13, 10, 60, 102, 111, 114, 109, 32, 110, 97, 109, 101, 61, 34, 99, 97, 108, 108, 100, 101, 102, 108, 101, 99, 116, 102, 111, 114, 109, 34, 32, 116, 97, 114, 103, 101, 116, 61, 34, 95, 115, 101, 108, 102, 34, 32, 97, 99, 116, 105, 111, 110, 61, 34, 115, 101, 114, 118, 108, 101, 116, 47, 68, 114, 115, 68, 101, 102, 108, 101, 99, 116, 34, 32, 109, 101, 116, 104, 111, 100, 61, 34, 112, 111, 115, 116, 34, 62, 13, 10, 60, 105, 110, 112, 117, 116, 32, 116, 121, 112, 101, 61, 104, 105, 100, 100, 101, 110, 32, 110, 97, 109, 101, 61, 34, 100, 105, 114, 105, 100, 34, 32, 105, 100, 61, 34, 100, 105, 114, 105, 100, 34, 32, 118, 97, 108, 117, 101, 61, 34, 34, 62, 13, 10, 60, 105, 110, 112, 117, 116, 32, 116, 121, 112, 101, 61, 104, 105, 100, 100, 101, 110, 32, 110, 97, 109, 101, 61, 34, 99, 97, 108, 108, 100, 101, 102, 108, 101, 99, 116, 110, 114, 34, 32, 105, 100, 61, 34, 99, 97, 108, 108, 100, 101, 102, 108, 101, 99, 116, 110, 114, 34, 32, 118, 97, 108, 117, 101, 61, 34, 34, 62, 13, 10, 60, 47, 102, 111, 114, 109, 62, 13, 10, 13, 10, 60, 33, 45, 45, 32, 67, 68, 71, 47, 104, 117, 110, 116, 103, 114, 111, 117, 112, 115, 32, 45, 45, 62, 13, 10, 60, 116, 100, 32, 115, 116, 121, 108, 101, 61, 34, 119, 105, 100, 116, 104, 58, 51, 53, 37, 59, 98, 111, 114, 100, 101, 114, 58, 49, 32, 115, 111, 108, 105, 100, 32, 103, 114, 97, 121, 59, 34, 32, 118, 97, 108, 105, 103, 110, 61, 116, 111, 112, 62, 13, 10, 9, 60, 102, 111, 114, 109, 32, 110, 97, 109, 101, 61, 34, 104, 103, 115, 101, 116, 116, 110, 103, 34, 32, 116, 97, 114, 103, 101, 116, 61, 34, 95, 115, 101, 108, 102, 34, 32, 97, 99, 116, 105, 111, 110, 61, 34, 115, 101, 114, 118, 108, 101, 116, 47, 68, 114, 115, 72, 117, 110, 116, 71, 114, 111, 117, 112, 34, 32, 109, 101, 116, 104, 111, 100, 61, 34, 112, 111, 115, 116, 34, 62, 13, 10, 9, 60, 105, 110, 112, 117, 116, 32, 116, 121, 112, 101, 61, 104, 105, 100, 100, 101, 110, 32, 110, 97, 109, 101, 61, 34, 100, 105, 114, 105, 100, 34, 32, 105, 100, 61, 34, 100, 105, 114, 105, 100, 34, 32, 118, 97, 108, 117, 101, 61, 34, 34, 62, 13, 10, 9, 60, 116, 97, 98, 108, 101, 32, 32, 115, 116, 121, 108, 101, 61, 34, 99, 111, 108, 111, 114, 58, 98, 108, 97, 99, 107, 59, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45, 99, 111, 108, 111, 114, 58, 35, 69, 48, 69, 48, 69, 48, 59, 119, 105, 100, 116, 104, 58, 49, 48, 48, 37, 34, 32, 98, 111, 114, 100, 101, 114, 61, 48, 32, 99, 101, 108, 108, 112, 97, 100, 100, 105, 110, 103, 61, 51, 32, 99, 101, 108, 108, 115, 112, 97, 99, 105, 110, 103, 61, 50, 62, 13, 10, 9, 9, 60, 116, 114, 62, 60, 116, 100, 32, 115, 116, 121, 108, 101, 61, 34, 102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 49, 48, 48, 37, 59, 34, 62, 60, 98, 62, 65, 99, 116, 105, 118, 97, 116, 101, 47, 100, 101, 97, 99, 116, 105, 118, 97, 116, 101, 32, 60, 98, 114, 62, 67, 97, 108, 108, 32, 100, 105, 115, 116, 114, 105, 98, 117, 116, 105, 111, 110, 32, 103, 114, 111, 117, 112, 115, 13, 10, 9, 9, 9, 60, 116, 100, 32, 97, 108, 105, 103, 110, 61, 114, 105, 103, 104, 116, 32, 118, 97, 108, 105, 103, 110, 61, 116, 111, 112, 62, 60, 105, 110, 112, 117, 116, 32, 32, 99, 108, 97, 115, 115, 61, 34, 105, 109, 103, 98, 117, 116, 116, 111, 110, 34, 32, 115, 116, 121, 108, 101, 61, 34, 102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 56, 48, 37, 59, 34, 32, 13, 10, 9, 9, 9, 9, 116, 121, 112, 101, 61, 34, 98, 117, 116, 116, 111, 110, 34, 32, 118, 97, 108, 117, 101, 61, 34, 67, 104, 97, 110, 103, 101, 34, 32, 111, 110, 99, 108, 105, 99, 107, 61, 34, 65, 99, 116, 105, 118, 97, 116, 101, 71, 114, 111, 117, 112, 115, 40, 41, 34, 32, 62, 13, 10, 9, 9, 60, 116, 114, 62, 60, 116, 100, 32, 99, 111, 108, 115, 112, 97, 110, 61, 50, 62, 60, 104, 114, 62, 9, 13, 10, 60, 116, 114, 62, 60, 116, 100, 62, 78, 111, 116, 32, 109, 101, 109, 98, 101, 114, 32, 111, 102, 32, 97, 110, 121, 32, 99, 97, 108, 108, 32, 100, 105, 115, 116, 114, 105, 98, 117, 116, 105, 111, 110, 32, 103, 114, 111, 117, 112, 10, 13, 10, 9, 60, 47, 102, 111, 114, 109, 62, 13, 10, 9, 60, 47, 116, 97, 98, 108, 101, 62, 13, 10, 13, 10, 60, 47, 116, 97, 98, 108, 101, 62, 13, 10, 60, 47, 100, 105, 118, 62, 13, 10, 60, 47, 100, 105, 118, 62, 13, 10, 13, 10, 60, 47, 98, 111, 100, 121, 62, 13, 10, 60, 47, 104, 116, 109, 108, 62, 13, 10 };
static const OCTETSTRING os_0(22089, os_0_octets);
static const CHARSTRING cs_25(0, NULL),
cs_10('/'),
cs_23('0'),
cs_4(3, "508"),
cs_17(3, "510"),
cs_15(3, "643"),
cs_16(643, "<\?xml version= '1.0' encoding='ISO-8859-1' standalone='yes'\?>\n<!DOCTYPE ANS>\n<ANS ver=\"3.00\">\n<LIA>\n<GMT_OFF>+0100</GMT_OFF>\n<POS msid=\"1234512345\">\n<PD>\n<TIME>20000626171825</TIME>\n<ARC>\n<LL_POINT>\n<LAT>N301628</LAT>\n<LONG>W974425</LONG>\n</LL_POINT>\n<IN_RAD>1100</IN_RAD>\n<OUT_RAD>1650</OUT_RAD>\n<START_ANGLE>120</START_ANGLE>\n<STOP_ANGLE>240</STOP_ANGLE>\n</ARC>\n</PD>\n</POS>\n<POS msid=\"1234512346\">\n<PD>\n<TIME>20000626171825</TIME>\n<ARC>\n<LL_POINT>\n<LAT>N301630</LAT>\n<LONG>W974450</LONG>\n</LL_POINT>\n<IN_RAD>0</IN_RAD>\n<OUT_RAD>1650</OUT_RAD>\n<START_ANGLE> 120 </START_ANGLE>\n<STOP_ANGLE>240</STOP_ANGLE>\n</ARC>\n</PD>\n</POS>\n</LIA>\n</ANS>\n\n"),
cs_11(508, "<\?xml version='1.0' encoding='ISO-8859-1' standalone='yes'\?><!DOCTYPE ANS SYSTEM 'file://mpp50_ans.dtd'><ANS ver=\"5.00\"><PUSH_USER><PUSH_ID>clientPush</PUSH_ID><PUSH_PWD>clientPush</PUSH_PWD></PUSH_USER><LPA><GMT_OFF>+0100</GMT_OFF><POS msid=\"4670112345\"><PD><TIME>20040117132719</TIME><POLYGON><LL_POINT><LAT>N100410</LAT><LONG>E0202020</LONG></LL_POINT><LL_POINT><LAT>N101610</LAT><LONG>E0202620</LONG></LL_POINT><LL_POINT><LAT>N101610</LAT><LONG>E0201420</LONG></LL_POINT></POLYGON></PD></POS></LPA></ANS>"),
cs_19(510, "<\?xml version='1.0' encoding='ISO-8859-1' standalone='yes'\?><!DOCTYPE ANS SYSTEM 'file://mpp50_ans.dtd'><ANS ver=\"5.00\"><PUSH_USER><PUSH_ID>clientPush</PUSH_ID><PUSH_PWD>clientPush</PUSH_PWD></PUSH_USER><LPA><GMT_OFF>+0100</GMT_OFF><POS msid=\"4670112345\"><PD><TIME>20040117132719</TIME><POLYGON><LL_POINT><LAT>N100410</LAT><LONG>E0202020</LONG></LL_POINT><LL_POINT><LAT>N101610</LAT><LONG>E0202620</LONG></LL_POINT><LL_POINT><LAT>N101610</LAT><LONG>E0201420</LONG></LL_POINT></POLYGON></PD></POS></LPA></ANS>xy"),
cs_3(14, "Content-Length"),
cs_1(12, "Content-Type"),
cs_5(7, "Expires"),
cs_24(3, "GET"),
cs_21(21455, "HTTP/1.1 200 OK\r\nDate: Wed, 22 Feb 2006 13:37:49 GMT\r\nContent-Type: text/html\r\nTransfer-Encoding: chunked\r\n\r\n0fe8\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\r\n\r\n<html>\r\n<head>\r\n<title>Presence</title>\r\n\r\n<script>\r\nvar frameset2 = null;\r\nvar frameset1 = null;\r\n\r\nvar winW = 630, winH = 460;\r\n\r\nfunction getWinSize() {\r\n\tif (parseInt(navigator.appVersion)>3) {\r\n\t if (navigator.appName==\"Netscape\") {\r\n\t  winW = window.innerWidth;\r\n\t  winH = window.innerHeight;\r\n\t }\r\n\t if (navigator.appName.indexOf(\"Microsoft\")!=-1) {\r\n\t  winW = document.body.offsetWidth;\r\n\t  winH = document.body.offsetHeight;\r\n\t }\r\n\t}\r\n\t//alert(\"winW=\" + winW + \" winH=\" + winH);\r\n}\r\nvar currRow = null;\r\nfunction tr_mouseover(row) {\r\n\tif (!row) {\r\n\t\trow = getrow(window.event.srcElement);\r\n\t\tif (!row)return;\r\n\t}\r\n\tif (row.style.backgroundColor == \"\") {\r\n\t\trow.style.backgroundColor = \"lightgrey\";\r\n\t}\r\n}\r\n\r\nfunction tr_mouseout(row) {\r\n\tif (!row) {\r\n\t\trow = getrow(window.event.srcElement);\r\n\t\tif (!row)return;\r\n\t}\r\n\tif (row.style.backgroundColor == \"lightgrey\") {\r\n\t\trow.style.backgroundColor= \"\";\r\n\t}\r\n}\r\n\r\nfunction getrow(obj)\r\n{\r\n\twhile(obj && obj.tagName != \"TR\") obj = obj.parentNode;\r\n\treturn obj;\r\n}\r\n// Remove leading and trailing white space\r\nfunction trim(txt) {\t\r\n\t//alert(\"trim=\" + txt);\r\n\t\r\n\ttry {\r\n\t\treturn txt.replace(/(^ +)|( +$)|(\t)/g,\"\");\r\n\t} catch (e) {\r\n\t\tvar x = new String(txt);\r\n\t\t\t//alert(\"x=\" + x);\r\n\t\twhile (x.charAt(0) == \" \") {\r\n\t\t\tx = x.substring(1);\r\n\t\t\tif (x.length == 0) return \"\";\r\n\t\t\t//alert(\"x=\" + x);\r\n\t\t}\r\n\t\tif (x.length == 0) return \"\";\r\n\t\twhile (x.charAt(x.length - 1) == \" \") {\r\n\t\t\tx = x.substring(0, x.length-1);\r\n\t\t\tif (x.length == 0) return \"\";\r\n\t\t}\r\n\t\r\n\t\treturn x;\t\r\n\t\t\r\n\t\r\n\t}\r\n\r\n}\r\n\r\nfunction notyetimplemented()\r\n{\r\n\talert(\"not yet implemented\");\r\n}\r\n\r\nfunction logout()\r\n{\r\n\ttop.frames[\"_owu_hidden\"].location.assign(\"hidden_logout.jsp\");\r\n//\twindow.parent.frames[\"_owu_hidden\"].location.assign(\"hidden_logout.jsp\");\r\n}\r\nfunction dorefresh()\r\n{\r\n\ttry {\r\n\t\ttop.frames[\"_owu_sidebar\"].location = \"PrepareSidebar\?noselect\";\r\n\t} catch (e) {\r\n\t\talert(\"failed to reload frames\" + e.toString());\r\n\t}\r\n}\r\n\r\nfunction NumberChanged(obj) {\r\n\r\n\tvar val = obj.value;\r\n\tvar leadingplus = false;\r\n\tif (val.search(/^\\+/) == 0) {\r\n\t\tleadingplus = true;\r\n\t\tval  = val.substring(1);\r\n\t}\r\n\tif (val.search(/[^0-9]/) >= 0) { \r\n\t\t//alert(\"Give a number\");\r\n\t\tval = val.replace(/[^0-9]/g, \"\");\r\n\t\tif (leadingplus) {\r\n\t\t\tobj.value = \"+\" + val;\r\n\t\t} else {\r\n\t\t\tobj.value = val;\r\n\t\t}\r\n\t}\r\n\t\r\n}\r\n\r\nvar modalObj, modalFunc, modalWin;\r\nfunction showModal(obj, func, filename, args, args1) {\r\n\tvar retval = \"\";\r\n//\tif (window.showModalDialog) {\r\n//\t\tretval = window.showModalDialog(filename, args, args1);\r\n//\t} else {\r\n\t\tmodalObj = obj;\r\n\t\tmodalFunc = func;\r\n\t\tdocument.getElementById(\"modalArg\").value = args;\r\n\t\targs1 = args1.replace(/;/g, \",\");\r\n\t\targs1 = args1.replace(/:/g, \"=\");\r\n\t\targs1 = args1.replace(/dialogWidth/g, \"width\");\r\n\t\targs1 = args1.replace(/dialogHeight/g, \"height\");\r\n\t\targs1 = args1.replace(/dialogTop/g, \"top\");\r\n\t\targs1 = args1.replace(/dialogLeft/g, \"left\");\r\n\t\targs1 = args1.replace(/scroll/g, \"scrollbars\");\r\n\t\t\r\n\t\t//alert(\"modal:\" + args1 );\r\n\t\t//alert(\"window.left=\" + window.screen.left + \" window.top=\" + window.screen.top\r\n\t\t//\t+ \"\\window.screeX=\" + window.screenX + \" window.screenY=\" + window.screenY);\r\n\r\n\t\t//alert(\"showmodal:\" + args1);\r\n\t   \t//modalWin = window.open(filename, \" \", args1 );\r\n\t   \t//filename = \"indexpopup.jsp\?\" + filename;\r\n\t\tmodalWin = window.open(filename, \"_owu_popup\", args1);\r\n\t\tmodalWin.focus();\r\n\t\t\r\n//\t}\r\n\treturn retval;\r\n}\r\n\r\nfunction modalDone() {\r\n\tif (modalObj && modalFunc) {\r\n\t\tmodalFunc(modalObj,  document.getElementById(\"modalRetval\").value);\r\n\t}\r\n}\r\n\r\nfunction goBack() {\r\n\tif (window.name == \"_owu_list\") {\r\n\t\twindow.location.assign(\"list_catalog.jsp\?catalog=catalogue\");\r\n\t} else {\r\n\t\twindow.history.go(-1);\r\n\t}\r\n}\r\nfunction scroll2View(obj)\r\n{\r\n   try {\r\n    var parent = obj.parentNode;\r\n    while (parent && parent.tagName != (\"DIV\")) parent = parent.parentNode;\r\n   \r\n    //alert(\"scroll2view=\" + parent.id);\r\n    var totsize  = parent.offsetHeight;  // this is the visible area \r\n0fe8\r\nsize\r\n    var currtop = parent.scrollTop;      //here begins the visible area\r\n    var beginPos = obj.offsetTop;\r\n    var step = obj.offsetHeight + 3;\r\n   //\talert(\"step=\" + step + \" padding=\" + obj.style.paddingTop);\r\n    var endPos = beginPos + step;\r\n    \r\n    while (endPos > (currtop + totsize))  {\r\n       currtop += step;\r\n    }\r\n    while (beginPos < currtop) {\r\n       currtop -= step;\r\n    }\r\n    parent.scrollTop = currtop;\r\n    //window.status = \"scrolltop=\" + currtop;\r\n   } catch(e) {\r\n      window.status = \"Failed  scroll2view\";\r\n   }\r\n}\r\n\r\n</script>\r\n\r\n<script>\r\n\r\nfunction init() {\r\n\t//document.getElementById(\"p_text\").select();\r\n\r\n\r\n\t\tvar doreload = \"reload\";\r\n\t\tif (doreload== \"reload\") {\r\n\t\t\tdorefresh();\r\n\t\t}\r\n\t\t\r\n\t\tvar errormsg = \"\";\r\n\t\tif (errormsg != \"\") {\r\n\t\t\terrormsg = errormsg.replace(/^error=/i, \"\");\r\n\t\t\terrormsg = errormsg.replace(/\\%20/g, \" \");\r\n\t\t\talert(errormsg);\r\n\t\t}\r\n\t\r\n}\r\n\r\nfunction removePresence() {\r\n\tdocument.getElementById(\"presence_code\").value = \"0\";\r\n\tdocument.forms[\"presenceform\"].submit();\r\n}\r\n\r\nfunction pcodeChanged(obj) {\r\n\t//alert(\"pcodechanged=\" + obj.options[obj.selectedIndex].value);\r\n\tvar pcodes = obj.options[obj.selectedIndex].value;\r\n\tif (pcodes == \"\") return;\r\n\t\r\n\tvar tmp = pcodes.split(\"_\");\r\n\tvar pcode = tmp[0];\r\n\tvar number = tmp[1];\r\n\t\r\n\tvar actionimage = document.getElementById(\"actionimage\");\r\n\tif (actionimage) {\r\n\t\tif (number == \"\") {\r\n\t\t\tactionimage.src=\"img/not_available_no_CFP.gif\";\r\n\t\t} else {\r\n\t\t\tactionimage.src=\"img/not_available_CFP.gif\";\r\n\t\t}\r\n\t}\r\n\tif (number == \"x\") {\r\n\t\tdocument.getElementById(\"diversionnbr\").style.display = \"\";\r\n\t} else {\r\n\t\tdocument.getElementById(\"diversionnbr\").style.display = \"none\";\r\n\t}\r\n}\r\nfunction setPresence() {\r\n\tvar pcodelist = document.getElementById(\"pcodelist\");\r\n\tif (pcodelist.selectedIndex <0 || pcodelist.options[pcodelist.selectedIndex].value == \"\") {\r\n\t\talert(\"do pick a valid option\")\r\n\t\treturn;\r\n\t}\r\n\tvar pcodes = pcodelist.options[pcodelist.selectedIndex].value ;\r\n\tvar tmp = pcodes.split(\"_\");\r\n\tvar pcode = tmp[0];\r\n\tvar number = tmp[1];\r\n\t\r\n\tdocument.getElementById(\"presence_code\").value = pcode;\r\n\tif (number == \"x\") {\r\n\t\tnumber = trim(document.getElementById(\"diversionnbr\").value);\r\n\t} \r\n\tdocument.getElementById(\"presence_divertnbr\").value = number;\r\n\t\r\n\tvar until = document.getElementById(\"untildate\").value \r\n\t\t\t\t+ \" \" + document.getElementById(\"untiltime\").value;\r\n\tuntil = trim(until);\r\n\tif (until != \"\") {\r\n\t\tdocument.getElementById(\"presence_until\").value = until;\r\n\t}\r\n\t\r\n\tvar msgelem  = document.getElementById(\"p_text\");\r\n\t//just make sure that the text is not the initial expl. text.\r\n\tif (msgelem.onkeydown == null) { \r\n\t\tvar ptext = trim(msgelem.value);\r\n\t\tif (ptext != \"\") {\r\n\t\t\tdocument.getElementById(\"presence_text\").value = ptext;\r\n\t\t}\r\n\t}\r\n\tdocument.forms[\"presenceform\"].submit();\r\n}\r\nfunction presetPresence(idx) {\r\n\tdocument.getElementById(\"presence_preset\").value = idx;\r\n\tdocument.forms[\"presenceform\"].submit();\r\n\t\r\n}\r\n\r\nfunction SetDeflect()\r\n{\r\n\tvar elems = document.getElementsByName(\"cf\");\r\n\tfor (var i=0; i <elems.length; i++) {\r\n\t\tif (elems[i].checked) {\r\n\t\t\tvar deflectnr = elems[i].value;\r\n\t\t\tif (deflectnr == \"X\") {\r\n\t\t\t\tdeflectnr = document.getElementById(\"cf_number\").value;\r\n\t\t\t}\r\n\t\t\tdocument.getElementById(\"calldeflectnr\").value = deflectnr;\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\tdocument.forms[\"calldeflectform\"].submit();\r\n}\r\n\r\nfunction cfClicked(obj) {\r\n\t//alert(\"obj=\" + obj.checked);\r\n\tif (obj.checked && obj.value == \"X\") {\r\n\t\tdocument.getElementById(\"cf_number\").style.visibility = \"\";\r\n\t\tdocument.getElementById(\"cf_number\").focus();\r\n\t} else {\r\n\t\tdocument.getElementById(\"cf_number\").style.visibility = \"hidden\";\r\n\t}\r\n}\r\n\r\nfunction ActivateGroups()\r\n{\r\n\tdocument.forms[\"hgsettng\"].submit();\r\n}\r\n\r\nfunction showmoreoptions() {\r\n\tdocument.getElementById(\"moreoptionstable\").style.display = \"\";\r\n\tdocument.getElementById(\"moreoptionsbutton\").style.display = \"\";\r\n}\r\nfunction divmsgChanged(obj) {\r\n\tif (parseInt(obj.value.length) > 255) {\r\n\t\tobj.value = obj.value.substring(0,255);\r\n\t\talert(\"Max 255\");\r\n\t\r\n0fe8\r\n}\r\n\t//window.status = obj.value.length;\r\n}\t\r\nfunction resetUserSettings() \r\n{\r\n\tdocument.forms[\"resetuserform\"].submit();\r\n}\r\n</script>\r\n<style type=\"text/css\">\r\n\r\nbody {\r\n\tfont-family: verdana, arial;\r\n\tfont-size: 100%;\r\n\tbackground-image: url(img/body.gif);\r\n\tcolor : black;\r\n}\r\n\r\ntable {\r\n\tfont-family: verdana, arial;\r\n\tfont-size: 90%;\r\n}\r\n\r\n.loginform {\r\n\tfont-size: 90%;\r\n\tcolor : black;\r\n}\r\n.button {\r\n\tfont-size:80%;\r\n\tfont-weight:bold;\r\n\tpadding:1;\r\n}\r\n.mainform {\r\n\tcolor : black;\r\n\tbackground-color:#E0E0E0;\r\n\tfont-size:70%;\r\n\twidth:100%;\r\n\theight:100%;\r\n\tpadding:0;\r\n\tmargin:0;\r\n\r\n}\t\r\n.attendantform {\r\n\tcolor : black;\r\n\tbackground-image: url(img/body.gif);\r\n\tmargin:0;\r\n\tpadding:0;\r\n\twidth:100%;\r\n\theight:100%;\r\n}\r\n\r\n.maintitle {\r\n\tfont-weight: bold;\r\n\tcolor : black;\r\n\tletter-spacing:1;\r\n\theight:50px;\r\n\twidth:230px;\r\n\tpadding:0;\r\n\tmargin:0;\r\n\tbackground-image: url(img/top.gif);\r\n}\r\n\r\n.actionmenu {\r\n\tfont-size: 90%;\r\n\tcolor : black;\r\n\tbackground-color:#E0E0E0;\r\n\tmargin : 5;\r\n\tpadding:5;\r\n\twidth:99%;\r\n\r\n}\r\n.actiondropdown {\r\n\tcolor : black;\r\n}\r\n\r\n.searchform {\r\n\tfont-size: 90%;\r\n\tcolor : black;\r\n\tbackground-image: url(img/body.gif);\r\n}\r\n\r\n/* Used by the sidebar */\r\n#mainbody {\r\n\theight:99%;\r\n\tbackground-color:#E0E0E0; \r\n\tmin-width:130px;\r\n\tleft:5;\r\n\ttop:3;\r\n\tposition:absolute;\r\n\t\r\n}\r\n\r\n.menutree {\r\n\tpadding:0;\r\n\talign:center;\r\n\tcolor: black;\r\n\tmin-width:230px;\r\n\twidth:100%;\r\n}\r\n\r\n.settingsbody {\r\n\tpadding:0;\r\n\talign:center;\r\n\tcolor: black;\r\n\tmin-width:198px;\r\n\twidth:100%;\r\n\tbackground-image: url(img/body.gif);\r\n\ttop:70px;\r\n\tposition:absolute;\r\n\tfont-weight:normal;\r\n\theight:90%;\r\n\tfont-size:80%;\r\n}\r\n.settingslist {\r\n\tfont-size:80%;\r\n}\r\n.inputfield {\r\n\tfont-size:90%;\r\n}\r\n.settingsheading {\r\n\tpadding:0 0 0 12;\r\n\twidth:30%;\r\n}\r\n.treerow {\r\n\tfont-weight:normal;\r\n\tfont-size:85%;\r\n\tvertical-align:text-top;\r\n\tpadding:3 0 3 0 ;\r\n\tmargin:0;\r\n\tcolor : black;\r\n\tcursor:hand;\r\n\tmin-height:16px;\r\n}\r\n.rowheading {\r\n\tbackground-color:#CCCCCC;\r\n\tfont-weight:bold;\r\n\tcolor:black;\r\n\tborder:3 outset lightgray;\r\n\tmargin:2px;\r\n\tpadding-left:5;\r\n\tcursor:hand;\r\n\talign:center;\r\n}\r\n\r\n#maincatalogbody {\r\n\theight:99%;\r\n\tbackground-image: url(img/body.gif);\r\n\twidth:100%;\r\n\tleft:5;\r\n\ttop:3;\r\n\tposition:absolute;\r\n}\r\n\r\n.imgbutton {\r\n\tbackground-color:#CCCCCC;\r\n\tfont-weight:bold;\r\n\tcolor:black;\r\n\tborder:3 outset lightgray;\r\n\tmargin:2px;\r\n\tpadding:2;\r\n\tcursor:hand;\r\n\talign:center;\r\n\tfont-size:80%;\r\n}\r\n\r\n.numberbutton {\r\n\tbackground-color:#CCCCCC;\r\n\tfont-weight:normal;\r\n\tcolor:black;\r\n\tmargin:1px;\r\n\tcursor:hand;\r\n\talign:center;\r\n\tborder:3 outset lightgray;\r\n\theight:20px;;\r\n\twidth:120px;\r\n\tvertical-align:bottom;\r\n\tpadding : 0 0 0 5;\r\n\tfont-size:80%;\r\n\t\r\n}\r\n\r\n.numberbuttonpushed {\r\n\tbackground-color:#E0E0E0;\r\n\tfont-weight:bold;\r\n\t/*color:blue;*/\r\n\tmargin:1px;\r\n\tcursor:hand;\r\n\talign:center;\r\n\tborder:3 inset lightgray;\r\n\theight:20px;;\r\n\twidth:120px;\r\n\tvertical-align:bottom;\r\n\tpadding : 0 0 0 5;\r\n\tfont-size:80%;\r\n\t\r\n}\r\n.actionsmallbutton {\r\n\tbackground-color:#CCCCCC;\r\n\tfont-weight:bold;\r\n\tcolor:black;\r\n\tmargin:1px;\r\n\tcursor:hand;\r\n\talign:center;\r\n\tfont-size:70%;\r\n\tborder:2 outset lightgray;\r\n\theight:11px;\r\n\twidth:11px;\r\n\tvertical-align:bottom;\r\n}\r\n.actionbutton {\r\n\tbackground-color:#CCCCCC;\r\n\tfont-weight:bold;\r\n\tcolor:black;\r\n\tmargin:2px;\r\n\tcursor:hand;\r\n\talign:center;\r\n\tfont-size:60%;\r\n\tborder:5 outset lightgray;\r\n\theight:25px;\r\n\twidth:25px;\r\n\tvertical-align:top;\r\n}\r\n\r\n.actionbuttonpushed {\r\n\tbackground-color:#E0E0E0;\r\n\tfont-weight:bold;\r\n\tcolor:black;\r\n\tmargin:2px;\r\n\talign:center;\r\n\tfont-size:70%;\r\n\tborder:5 inset lightgray;\r\n\theight:25px;\r\n\twidth:25px;\r\n\tvertical-align:top;\r\n\tcursor:hand;\r\n\t\r\n}\r\n\r\n\r\n.treecell {\r\n\tpadding:0 0 2 2;\r\n}\r\n.treespacer {\r\n\tpadding:0;\r\n\tmargin:0;\r\n\tmin-height:2px;\r\n\tfont-size:1px;\r\n\twidth:200px;\r\n\t\r\n}\r\n.popupform {\r\n\talign : center;\r\n\tfont-size: 90%;\r\n\tcolor : black;\r\n\tbackground-image: url(img/body.gif);\r\n}\r\n\r\n.popuptitle {\r\n\tfont-size: 120%;\r\n\tfont-weight : bold;\r\n\tletter-spacing : 1;\r\n}\r\n.popuptab {\r\n\tfont-size: 110%;\r\n\tletter-spacing : 1;\r\n\tborder-top : 1 solid black;\r\n\tborder-right : 1 solid black;\r\n\tbor\r\n0438\r\nder-left : 1 solid black;\r\n\tpadding : 4;\r\n\tmargin : 8 3 0 3;\r\n\twidth : 100%;\r\n\theight:80%;\r\n\tvertical-align:text-top;\r\n\tbackground-color:black;\r\n\talign:center;\t\r\n\tcolor:black;\r\n\tcursor:hand;\r\n}\r\n.tabselected {\r\n\tfont-size: 110%;\r\n\tletter-spacing : 1;\r\n\tborder : 1 solid black;\r\n\tborder-bottom : 0;\r\n\tpadding : 4 4 0 4;\r\n\tmargin : 0;\r\n\ttext-align : left;\r\n\tvertical-align:text-top;\r\n\talign:center;\r\n\tbackground-color:#E0E0E0;\r\n\tcolor:black;\r\n}\r\n\r\n.popupbutton {\r\n\twidth: 100px;\r\n}\r\n\r\n.resultlist {\r\n\talign:center;\r\n\tcolor: black;\r\n\twidth:100%;\r\n\theight:89%;\r\n\toverflow:auto;\r\n\tposition:absolute;\r\n\tbackground-color:#E0E0E0;\r\n\t\r\n}\r\n.resultrow {\r\n\tfont-weight:normal;\r\n\tfont-size:75%;\r\n\tvertical-align:text-top;\r\n\tpadding:1;\r\n\tmargin:0;\r\n\tcolor : black;\r\n\tcursor:hand;\r\n\tmin-height:16px;\r\n}\r\n.resultheading {\r\n\tbackground-color:#CCCCCC;\r\n\tfont-weight:bold;\r\n\tcolor:black;\r\n\tborder:3 outset lightgray;\r\n\tmargin:2px;\r\n\tpadding-left:5;\r\n\tcursor:hand;\r\n\talign:center;\r\n\tfont-size:85%;\r\n}\r\n.actiontextarea {\r\n\tfont-size:90%;\r\n\ttext-align:left;\r\n\twidth:100%;\r\n\theight:100px;\r\n}\r\n\r\n</style>\r\n0fe8\r\n\r\n\r\n</head>\r\n<body onload=\"init();\" >\r\n\r\n\r\n<div id=\"mainbody\" >\r\n\r\n<form name=\"resetuserform\" target=\"_self\" action=\"servlet/DrsResetUser\" method=\"post\">\r\n<input type=hidden name=\"resetuser_dirid\" id=\"resetuser_dirid\" value=\"3619010001:046182\">\r\n</form>\r\n\r\n<form name=\"presenceform\" target=\"_self\" action=\"DrsPresence\" method=\"post\">\r\n<input type=hidden name=\"presence_code\" id=\"presence_code\" value=\"\">\r\n<input type=hidden name=\"presence_divertnbr\" id=\"presence_divertnbr\" value=\"\">\r\n<input type=hidden name=\"presence_until\" id=\"presence_until\" value=\"\">\r\n<input type=hidden name=\"presence_dirid\" id=\"presence_dirid\" value=\"\">\r\n<input type=hidden name=\"presence_text\" id=\"presence_text\" value=\"\">\r\n<input type=hidden name=\"presence_preset\" id=\"presence_preset\" value=\"\">\r\n</form>\r\n\r\n<div class=\"maintitle\" style=\"width:100%\">\r\n<table cellspacing=0 cellpadding=3 width=\"100%\" >\r\n<tr>\r\n\t<td class=\"maintitle\" style=\"width:100%\" align=baseline>\r\n\t<img src=\"img/spacer.gif\" height=50 width=2>\r\n\tSambal Bij  (1100)\r\n<!-- toolbox -->\r\n\t<td align=right  valign=baseline nowrap> \r\n\t\t\r\n\t\t<span id=\"resetbutton\"  class=\"actionbutton\" onclick=\"resetUserSettings()\"  >\r\n\t\t\t\t<img src=\"img/spacer.gif\" width=\"25\" heigth=\"25\">Reset user settings\r\n\t\t</span>\r\n\t\t\r\n\t\t<span id=\"logoutbutton\"  class=\"actionbutton\" onclick=\"logout()\"  >\r\n\t\t\t\t<img src=\"img/spacer.gif\" width=\"25\" heigth=\"25\">Log out\r\n\t\t</span>\r\n<tr><td colspan=2><hr>\r\n\r\n</table>\r\n\r\n</div>\r\n\r\n<div class=\"settingsbody\"  id=\"presencemenu\">\r\n\r\n<table  style=\"width:100%;color:black;background-color:#E0E0E0\" border=0 cellpadding=3 cellspacing=2>\r\n<tr><td style=\"width:35%;border:1 solid gray;\">\r\n\r\n\t<table  style=\"width:100%;color:black;background-color:#E0E0E0\" border=0 cellpadding=3 cellspacing=2>\r\n\t\t<tr><td  style=\"font-size:100%\"><b>Presence\r\n\t\r\n\r\n\t\t<td nowrap>\t<img src='img/not_available_no_CFP.gif'>Left for the day\r\n\r\n\r\n\t<tr>\r\n\t\t<td colspan=2><hr>\r\n\t\r\n\r\n\t\t<tr style=\"display:\"><td colspan=2>Predefined options\r\n\t\r\n\r\n\t\t<tr  style=\"display:\">\r\n\t\t\t<td  colspan=2 >\r\n\t\t\t<span style=\"width:70%\" class='imgbutton' onclick=\"presetPresence('0');\" >\r\n\t\t\t\t<img src='img/available.gif' width=16 height=16>Change to Available\r\n\t\t\t</span>\r\n\t\t\t<br>\r\n\r\n\t\t<tr  style=\"display:\">\r\n\t\t\t<td  colspan=2 >\r\n\t\t\t<span style=\"width:70%\" class='imgbutton' onclick=\"presetPresence('1');\" >\r\n\t\t\t\t<img src='img/not_available_no_CFP.gif' width=16 height=16>Change to Busy\r\n\t\t\t</span>\r\n\t\t\t<br>\r\n\r\n\t\t<tr  style=\"display:\">\r\n\t\t\t<td  colspan=2 >\r\n\t\t\t<span style=\"width:70%\" class='imgbutton' onclick=\"presetPresence('2');\" >\r\n\t\t\t\t<img src='img/not_available_no_CFP.gif' width=16 height=16>Change to Meeting\r\n\t\t\t</span>\r\n\t\t\t<br>\r\n\r\n\t\t<tr  style=\"display:\">\r\n\t\t\t<td  colspan=2 >\r\n\t\t\t<span style=\"width:70%\" class='imgbutton' onclick=\"presetPresence('3');\" >\r\n\t\t\t\t<img src='img/not_available_no_CFP.gif' width=16 height=16>Change to Lunch\r\n\t\t\t</span>\r\n\t\t\t<br>\r\n\r\n\t\t<tr  style=\"display:\">\r\n\t\t\t<td  colspan=2 >\r\n\t\t\t<span style=\"width:70%\" class='imgbutton' onclick=\"presetPresence('4');\" >\r\n\t\t\t\t<img src='img/not_available_no_CFP.gif' width=16 height=16>Change to Left for the day\r\n\t\t\t</span>\r\n\t\t\t<br>\r\n\r\n\t\t<tr>\r\n\t\t<td  colspan=2><br><hr>\r\n\t\t\r\n\t\t<tr><td ><a href=# onclick=\"showmoreoptions()\" >More options...</a>\r\n\t\t\r\n\t\t\t<td style=\"display:none\" id=\"moreoptionsbutton\" nowrap align=right><span class=\"imgbutton\" style=\"font-size:75%\" onclick=\"setPresence();\">\r\n\t\t\t\t\t<img id=\"actionimage\" src=\"img/spacer.gif\">&nbsp;&nbsp;\r\n\t\t\t\tChange now</span>\r\n\t\t\r\n\r\n\t\t<tr>\r\n\t\t<td colspan=2>\r\n\t\t<table id=\"moreoptionstable\" style=\"display:none\">\r\n\t\t<tr>\r\n\t\t\t<td colspan=2 valign=top >\r\n\t\t\t<select style=\"width:100%\" id=\"pcodelist\"  onchange=\"pcodeChanged(this)\" >\r\n\t\t\t<option value=''>------------------------------------</option>\r\n<option value='1_'>Busy - No diversion\n<option value='1_-1'>Busy - All calls to main number\n<option value='1_-2'>Busy - All calls to voicemail\n<option value='1_x'>Busy - All calls to number\n<option value=''>------------------------------------</option>\n<option value='2_'>Meeting - No diversion\n<option value='2_-1'>Meeting - All calls to\r\n0f53\r\n main number\n<option value='2_-2'>Meeting - All calls to voicemail\n<option value='2_x'>Meeting - All calls to number\n<option value=''>------------------------------------</option>\n<option value='3_'>Lunch - No diversion\n<option value='3_-1'>Lunch - All calls to main number\n<option value='3_-2'>Lunch - All calls to voicemail\n<option value='3_x'>Lunch - All calls to number\n<option value=''>------------------------------------</option>\n<option value='4_'>Left for the day - No diversion\n<option value='4_-1'>Left for the day - All calls to main number\n<option value='4_-2'>Left for the day - All calls to voicemail\n<option value='4_x'>Left for the day - All calls to number\n<option value=''>------------------------------------</option>\n<option value='5_'>Returns - No diversion\n<option value='5_-1'>Returns - All calls to main number\n<option value='5_-2'>Returns - All calls to voicemail\n<option value='5_x'>Returns - All calls to number\n<option value=''>------------------------------------</option>\n\r\n\t\t\t\t\t\r\n\t\t\t</select>\r\n\t\t\t<tr><td colspan=2>\r\n\t\t\t\t<input type=text value=\"\" onkeyup=\"NumberChanged(this)\" style=\"display:none\" id=\"diversionnbr\">\r\n\r\n\t<tr>\r\n\t<td style=\"font-size:90%;\" nowrap colspan=2>Back \r\n\t\t<span style=\"font-size:75%\">(MM/dd/yyyy)</span>\r\n\t\t\t<input type=text id=\"untildate\" value=\"\" size=\"10\">\r\n\t\t<span style=\"font-size:75%\">(HH:mm)</span>\r\n\t\t\t<input type=text id=\"untiltime\" value=\"\" size=\"5\">\r\n\t<tr>\r\n\t\t\t<td colspan=2 valign=top width=30%><b>Message\r\n\t\t\r\n\t\t<tr >\t\t\t\r\n\t\t\t<td colspan=2 valign=top >\r\n\t\t\t<textarea style=\"width:99%;\" rows=5 classname=\"actiontextarea\"\r\n\t\t\t\tid=\"p_text\" onkeydown=\"this.value='';this.onkeydown=null\" onkeyup=\"divmsgChanged(this)\">Here you can write your message to the attendant and others. Max 255 characters.</textarea>\r\n\t\t\r\n\t\t\r\n\t\t\t</table><!--more options-->\r\n\t</table>\r\n\r\n<!-- Call deflect -->\r\n<td style=\"width:35%;border:1 solid gray;display:none\" valign=top>\r\n\t<table  style=\"color:black;background-color:#E0E0E0;width:100%\" border=0 cellpadding=3 cellspacing=2>\r\n\t\t<tr><td style=\"font-size:100%\"><b>Deflect call\r\n\t\t\t<td align=right><input  class=\"imgbutton\" style=\"font-size:80%;\" \r\n\t\t\t\ttype=\"button\" value=\"Change\" onclick=\"SetDeflect()\" >\r\n\t\t\t\r\n\t\t<tr><td colspan=2><hr>\t\r\n\t\t<tr onmouseover=\"tr_mouseover(this);\" onmouseout=\"tr_mouseout(this)\" class=treerow>\r\n\t\t\t<td colspan=2><input onclick=\"cfClicked(this);\" type=radio id=\"cf_operator\" name=\"cf\" value=\"-1\" >&nbsp;&nbsp;Main number\r\n\t\t<tr onmouseover=\"tr_mouseover(this);\" onmouseout=\"tr_mouseout(this)\" class=treerow>\r\n\t\t\t<td colspan=2><input onclick=\"cfClicked(this);\" type=radio id=\"cf_voicemail\" name=\"cf\" value=\"-2\" >&nbsp;&nbsp;Voicemail\r\n\t\t<tr onmouseover=\"tr_mouseover(this);\" onmouseout=\"tr_mouseout(this)\" class=treerow>\r\n\t\t\t<td colspan=2><input onclick=\"cfClicked(this);\" type=radio id=\"cf_x\" name=\"cf\" value=\"X\" >&nbsp;&nbsp;Phone\r\n\t\t\t<input type=text name=\"cf_number\" id=\"cf_number\" onkeyup=\"NumberChanged(this);\" style=\"visibility:hidden\" value=\"\">\r\n\t\t\r\n\t</table>\r\n\r\n\r\n<form name=\"calldeflectform\" target=\"_self\" action=\"servlet/DrsDeflect\" method=\"post\">\r\n<input type=hidden name=\"dirid\" id=\"dirid\" value=\"\">\r\n<input type=hidden name=\"calldeflectnr\" id=\"calldeflectnr\" value=\"\">\r\n</form>\r\n\r\n<!-- CDG/huntgroups -->\r\n<td style=\"width:35%;border:1 solid gray;\" valign=top>\r\n\t<form name=\"hgsettng\" target=\"_self\" action=\"servlet/DrsHuntGroup\" method=\"post\">\r\n\t<input type=hidden name=\"dirid\" id=\"dirid\" value=\"\">\r\n\t<table  style=\"color:black;background-color:#E0E0E0;width:100%\" border=0 cellpadding=3 cellspacing=2>\r\n\t\t<tr><td style=\"font-size:100%;\"><b>Activate/deactivate <br>Call distribution groups\r\n\t\t\t<td align=right valign=top><input  class=\"imgbutton\" style=\"font-size:80%;\" \r\n\t\t\t\ttype=\"button\" value=\"Change\" onclick=\"ActivateGroups()\" >\r\n\t\t<tr><td colspan=2><hr>\t\r\n<tr><td>Not member of any call distribution group\n\r\n\t</form>\r\n\t</table>\r\n\r\n</table>\r\n</div>\r\n</div>\r\n\r\n</body>\r\n</html>\r\n\r\n0000\r\n\r\n"),
cs_20(705, "HTTP/1.1 302 Moved Temporarily\r\nDate: Wed, 22 Feb 2006 13:37:49 GMT\r\nPragma: no-cache\r\nLocation: http://caylem.etm.ericsson.se:7001/McxOwu/list_useractions.jsp\?reload\r\nContent-Type: text/html\r\nExpires: Sat, 6 May 1995 12:00:00 GMT\r\nTransfer-Encoding: chunked\r\nCache-Control: no-store, no-cache, must-revalidate\r\nCache-Control: post-check=0, pre-check=0\r\n\r\n014d\r\n<html><head><title>302 Moved Temporarily</title></head>\r\n<body bgcolor=\"#FFFFFF\">\r\n<p>This document you requested has moved temporarily.</p>\r\n<p>It's now at <a href=\"http://caylem.etm.ericsson.se:7001/McxOwu/list_useractions.jsp\?reload\">http://caylem.etm.ericsson.se:7001/McxOwu/list_useractions.jsp\?reload</a>.</p>\r\n</body></html>\r\n\r\n0000\r\n\r\n"),
cs_22(4, "Host"),
cs_12(2, "OK"),
cs_9(5, "POS T"),
cs_18(4, "POST"),
cs_7(6, "Pragma"),
cs_6(29, "Sat, 01 Jan 2000 00:00:00 GMT"),
cs_13(6, "Server"),
cs_14(41, "TTCN Test Suite simulated HTTP/1.1 server"),
cs_8(8, "no-cache"),
cs_2(8, "text/xml"),
cs_0(19, "www.eth.ericsson.se");
static const unsigned char module_checksum[] = { 0x3c, 0xfa, 0xcd, 0x6f, 0xb3, 0x86, 0x1d, 0x45, 0xcd, 0xcf, 0x58, 0xf9, 0x70, 0xdc, 0x2f, 0xd8 };

/* Global variable definitions */

static CHARSTRING modulepar_HttpServerHostName;
const CHARSTRING& HttpServerHostName = modulepar_HttpServerHostName;
static INTEGER modulepar_HttpServerPort;
const INTEGER& HttpServerPort = modulepar_HttpServerPort;
static BOOLEAN modulepar_HTTPClientUseSSL;
const BOOLEAN& HTTPClientUseSSL = modulepar_HTTPClientUseSSL;
static INTEGER modulepar_HttpServerListenPort;
const INTEGER& HttpServerListenPort = modulepar_HttpServerListenPort;
static BOOLEAN modulepar_HttpServerUseSSL;
const BOOLEAN& HttpServerUseSSL = modulepar_HttpServerUseSSL;
const TTCN_Typedescriptor_t& MTC_descr_ = COMPONENT_descr_;
const TTCN_Typedescriptor_t& HTTP__client_descr_ = COMPONENT_descr_;
HTTPmsg__PortType::HTTPmsg__PT HTTP__client_component_HTTP__client__port("HTTP_client_port");
const TTCN_Typedescriptor_t& HTTP__server_descr_ = COMPONENT_descr_;
HTTPmsg__PortType::HTTPmsg__PT HTTP__server_component_HTTP__server__port("HTTP_server_port");
// No XER for CHARSTRINGS
const TTCN_Typedescriptor_t CHARSTRINGS_descr_ = { "@HTTP_Test_no_ASPs.CHARSTRINGS", NULL, NULL, NULL, NULL, NULL, NULL, &CHARSTRING_descr_, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       CHARSTRINGS_0_xer_ = { {"CHARSTRING>\n", "CHARSTRING>\n"}, {12, 12}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_Typedescriptor_t CHARSTRINGS_0_descr_ = { "@HTTP_Test_no_ASPs.CHARSTRINGS.<oftype>", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &CHARSTRINGS_0_xer_, &CHARSTRING_json_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for OCTETSTRINGS
const TTCN_Typedescriptor_t OCTETSTRINGS_descr_ = { "@HTTP_Test_no_ASPs.OCTETSTRINGS", NULL, NULL, NULL, NULL, NULL, NULL, &OCTETSTRING_descr_, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       OCTETSTRINGS_0_xer_ = { {"OCTETSTRING>\n", "OCTETSTRING>\n"}, {13, 13}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const int OCTETSTRINGS_0_oer_ext_arr_[0] = {};
const int OCTETSTRINGS_0_oer_p_[0] = {};
const TTCN_OERdescriptor_t OCTETSTRINGS_0_oer_ = { -1, TRUE, -1, FALSE, 0, 0, OCTETSTRINGS_0_oer_ext_arr_, 0, OCTETSTRINGS_0_oer_p_};
const TTCN_Typedescriptor_t OCTETSTRINGS_0_descr_ = { "@HTTP_Test_no_ASPs.OCTETSTRINGS.<oftype>", &OCTETSTRING_ber_, &OCTETSTRING_raw_, &OCTETSTRING_text_, &OCTETSTRINGS_0_xer_, &OCTETSTRING_json_, &OCTETSTRINGS_0_oer_, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for ptcList
const TTCN_Typedescriptor_t ptcList_descr_ = { "@HTTP_Test_no_ASPs.ptcList", NULL, NULL, NULL, NULL, NULL, NULL, &COMPONENT_descr_, TTCN_Typedescriptor_t::DONTCARE };
static HTTPmsg__Types::Half__close_template template_h;
const HTTPmsg__Types::Half__close_template& h = template_h;
static HTTPmsg__Types::HTTPMessage_template template_recv__resp;
const HTTPmsg__Types::HTTPMessage_template& recv__resp = template_recv__resp;
static HTTPmsg__Types::HTTPMessage_template template_recv__req;
const HTTPmsg__Types::HTTPMessage_template& recv__req = template_recv__req;
static HTTPmsg__Types::HTTPMessage_template template_recv__err;
const HTTPmsg__Types::HTTPMessage_template& recv__err = template_recv__err;
TTCN_Module module_object("HTTP_Test_no_ASPs", __DATE__, __TIME__, module_checksum, pre_init_module, NULL, 0U, 4294967295U, 4294967295U, 4294967295U, NULL, 0LU, 0, post_init_module, set_module_param, NULL, log_module_param, init_comp_type, init_system_port, start_ptc_function, module_control_part);

static const RuntimeVersionChecker ver_checker(  current_runtime_version.requires_major_version_6,
  current_runtime_version.requires_minor_version_4,
  current_runtime_version.requires_patch_level_2,  current_runtime_version.requires_runtime_1);

/* Member functions of C++ classes */


const COMPONENT ptcList::UNBOUND_ELEM;
ptcList::ptcList()
{
val_ptr = NULL;
}

ptcList::ptcList(null_type)
{
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
}

ptcList::ptcList(const ptcList& other_value)
{
if (!other_value.is_bound()) TTCN_error("Copying an unbound value of type @HTTP_Test_no_ASPs.ptcList.");
val_ptr = other_value.val_ptr;
val_ptr->ref_count++;
}

ptcList::~ptcList()
{
clean_up();
if (val_ptr != NULL) val_ptr = NULL;
}

void ptcList::clean_up()
{
if (val_ptr != NULL) {
if (val_ptr->ref_count > 1) {
val_ptr->ref_count--;
val_ptr = NULL;
}
else if (val_ptr->ref_count == 1) {
for (int elem_count = 0; elem_count < val_ptr->n_elements;
elem_count++)
if (val_ptr->value_elements[elem_count] != NULL)
delete val_ptr->value_elements[elem_count];
free_pointers((void**)val_ptr->value_elements);
delete val_ptr;
val_ptr = NULL;
}
else
TTCN_error("Internal error: Invalid reference counter in a record of/set of value.");
}
}

ptcList& ptcList::operator=(null_type)
{
clean_up();
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
return *this;
}

ptcList& ptcList::operator=(const ptcList& other_value)
{
if (other_value.val_ptr == NULL) TTCN_error("Assigning an unbound value of type @HTTP_Test_no_ASPs.ptcList.");
if (this != &other_value) {
clean_up();
val_ptr = other_value.val_ptr;
val_ptr->ref_count++;
}
return *this;
}

boolean ptcList::operator==(null_type) const
{
if (val_ptr == NULL)
TTCN_error("The left operand of comparison is an unbound value of type @HTTP_Test_no_ASPs.ptcList.");
return val_ptr->n_elements == 0 ;
}

boolean ptcList::operator==(const ptcList& other_value) const
{
if (val_ptr == NULL) TTCN_error("The left operand of comparison is an unbound value of type @HTTP_Test_no_ASPs.ptcList.");
if (other_value.val_ptr == NULL) TTCN_error("The right operand of comparison is an unbound value of type @HTTP_Test_no_ASPs.ptcList.");
if (val_ptr == other_value.val_ptr) return TRUE;
if (val_ptr->n_elements != (other_value.val_ptr)->n_elements)
return FALSE;
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++){
if (val_ptr->value_elements[elem_count] != NULL){
if ((other_value.val_ptr)->value_elements[elem_count] != NULL){
  if (*val_ptr->value_elements[elem_count] != *(other_value.val_ptr)->value_elements[elem_count]) return FALSE;
} else return FALSE;
} else {
if ((other_value.val_ptr)->value_elements[elem_count] != NULL) return FALSE;
}
}
return TRUE;
}

COMPONENT& ptcList::operator[](int index_value)
{
if (index_value < 0) TTCN_error("Accessing an element of type @HTTP_Test_no_ASPs.ptcList using a negative index: %d.", index_value);
if (val_ptr == NULL) {
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
} else if (val_ptr->ref_count > 1) {
struct recordof_setof_struct *new_val_ptr = new recordof_setof_struct;
new_val_ptr->ref_count = 1;
new_val_ptr->n_elements = (index_value >= val_ptr->n_elements) ? index_value + 1 : val_ptr->n_elements;
new_val_ptr->value_elements = (COMPONENT**)allocate_pointers(new_val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++){
if (val_ptr->value_elements[elem_count] != NULL){
new_val_ptr->value_elements[elem_count] = new COMPONENT(*(val_ptr->value_elements[elem_count]));
}
}
clean_up();
val_ptr = new_val_ptr;
}
if (index_value >= val_ptr->n_elements) set_size(index_value + 1);
if (val_ptr->value_elements[index_value] == NULL) {
val_ptr->value_elements[index_value] = new COMPONENT;
}
return *val_ptr->value_elements[index_value];
}

COMPONENT& ptcList::operator[](const INTEGER& index_value)
{
index_value.must_bound("Using an unbound integer value for indexing a value of type @HTTP_Test_no_ASPs.ptcList.");
return (*this)[(int)index_value];
}

const COMPONENT& ptcList::operator[](int index_value) const
{
if (val_ptr == NULL)
TTCN_error("Accessing an element in an unbound value of type @HTTP_Test_no_ASPs.ptcList.");
if (index_value < 0) TTCN_error("Accessing an element of type @HTTP_Test_no_ASPs.ptcList using a negative index: %d.", index_value);
if (index_value >= val_ptr->n_elements) TTCN_error("Index overflow in a value of type @HTTP_Test_no_ASPs.ptcList: The index is %d, but the value has only %d elements.", index_value, val_ptr->n_elements);
return (val_ptr->value_elements[index_value] == NULL) ?
UNBOUND_ELEM : *val_ptr->value_elements[index_value];
}

const COMPONENT& ptcList::operator[](const INTEGER& index_value) const
{
index_value.must_bound("Using an unbound integer value for indexing a value of type @HTTP_Test_no_ASPs.ptcList.");
return (*this)[(int)index_value];
}

ptcList ptcList::operator<<=(int rotate_count) const
{
return *this >>= (-rotate_count);
}

ptcList ptcList::operator<<=(const INTEGER& rotate_count) const
{
rotate_count.must_bound("Unbound integer operand of rotate left operator.");
return *this >>= (int)(-rotate_count);
}

ptcList ptcList::operator>>=(const INTEGER& rotate_count) const
{
rotate_count.must_bound("Unbound integer operand of rotate right operator.");
return *this >>= (int)rotate_count;
}

ptcList ptcList::operator>>=(int rotate_count) const
{
if (val_ptr == NULL) TTCN_error("Performing rotation operation on an unbound value of type @HTTP_Test_no_ASPs.ptcList.");
if (val_ptr->n_elements == 0) return *this;
int rc;
if (rotate_count>=0) rc = rotate_count % val_ptr->n_elements;
else rc = val_ptr->n_elements - ((-rotate_count) % val_ptr->n_elements);
if (rc == 0) return *this;
ptcList ret_val;
ret_val.set_size(val_ptr->n_elements);
for (int i=0; i<val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[(i+rc)%val_ptr->n_elements] =new COMPONENT(*val_ptr->value_elements[i]);
}
}
return ret_val;
}

ptcList ptcList::operator+(const ptcList& other_value) const
{
if (val_ptr == NULL || other_value.val_ptr == NULL) TTCN_error("Unbound operand of @HTTP_Test_no_ASPs.ptcList concatenation.");
if (val_ptr->n_elements == 0) return other_value;
if (other_value.val_ptr->n_elements == 0) return *this;
ptcList ret_val;
ret_val.set_size(val_ptr->n_elements+other_value.val_ptr->n_elements);
for (int i=0; i<val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i] = new COMPONENT(*val_ptr->value_elements[i]);
}
}
for (int i=0; i<other_value.val_ptr->n_elements; i++) {
if (other_value.val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i+val_ptr->n_elements] = new COMPONENT(*other_value.val_ptr->value_elements[i]);
}
}
return ret_val;
}

ptcList ptcList::substr(int index, int returncount) const
{
if (val_ptr == NULL) TTCN_error("The first argument of substr() is an unbound value of type @HTTP_Test_no_ASPs.ptcList.");
check_substr_arguments(val_ptr->n_elements, index, returncount, "@HTTP_Test_no_ASPs.ptcList","element");
ptcList ret_val;
ret_val.set_size(returncount);
for (int i=0; i<returncount; i++) {
if (val_ptr->value_elements[i+index] != NULL) {
ret_val.val_ptr->value_elements[i] = new COMPONENT(*val_ptr->value_elements[i+index]);
}
}
return ret_val;
}

ptcList ptcList::replace(int index, int len, const ptcList& repl) const
{
if (val_ptr == NULL) TTCN_error("The first argument of replace() is an unbound value of type @HTTP_Test_no_ASPs.ptcList.");
if (repl.val_ptr == NULL) TTCN_error("The fourth argument of replace() is an unbound value of type @HTTP_Test_no_ASPs.ptcList.");
check_replace_arguments(val_ptr->n_elements, index, len, "@HTTP_Test_no_ASPs.ptcList","element");
ptcList ret_val;
ret_val.set_size(val_ptr->n_elements + repl.val_ptr->n_elements - len);
for (int i = 0; i < index; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i] = new COMPONENT(*val_ptr->value_elements[i]);
}
}
for (int i = 0; i < repl.val_ptr->n_elements; i++) {
if (repl.val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i+index] = new COMPONENT(*repl.val_ptr->value_elements[i]);
}
}
for (int i = 0; i < val_ptr->n_elements - index - len; i++) {
if (val_ptr->value_elements[index+i+len] != NULL) {
ret_val.val_ptr->value_elements[index+i+repl.val_ptr->n_elements] = new COMPONENT(*val_ptr->value_elements[index+i+len]);
}
}
return ret_val;
}

ptcList ptcList::replace(int index, int len, const ptcList_template& repl) const
{
if (!repl.is_value()) TTCN_error("The fourth argument of function replace() is a template with non-specific value.");
return replace(index, len, repl.valueof());
}

void ptcList::set_size(int new_size)
{
if (new_size < 0) TTCN_error("Internal error: Setting a negative size for a value of type @HTTP_Test_no_ASPs.ptcList.");
if (val_ptr == NULL) {
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
} else if (val_ptr->ref_count > 1) {
struct recordof_setof_struct *new_val_ptr = new recordof_setof_struct;
new_val_ptr->ref_count = 1;
new_val_ptr->n_elements = (new_size < val_ptr->n_elements) ? new_size : val_ptr->n_elements;
new_val_ptr->value_elements = (COMPONENT**)allocate_pointers(new_val_ptr->n_elements);
for (int elem_count = 0; elem_count < new_val_ptr->n_elements; elem_count++) {
if (val_ptr->value_elements[elem_count] != NULL){
new_val_ptr->value_elements[elem_count] = new COMPONENT(*(val_ptr->value_elements[elem_count]));
}
}
clean_up();
val_ptr = new_val_ptr;
}
if (new_size > val_ptr->n_elements) {
val_ptr->value_elements = (COMPONENT**)reallocate_pointers((void**)val_ptr->value_elements, val_ptr->n_elements, new_size);
#ifdef TITAN_MEMORY_DEBUG_SET_RECORD_OF
if((val_ptr->n_elements/1000)!=(new_size/1000)) TTCN_warning("New size of type @HTTP_Test_no_ASPs.ptcList: %d",new_size);
#endif
val_ptr->n_elements = new_size;
} else if (new_size < val_ptr->n_elements) {
for (int elem_count = new_size; elem_count < val_ptr->n_elements; elem_count++)
if (val_ptr->value_elements[elem_count] != NULL)delete val_ptr->value_elements[elem_count];
val_ptr->value_elements = (COMPONENT**)reallocate_pointers((void**)val_ptr->value_elements, val_ptr->n_elements, new_size);
val_ptr->n_elements = new_size;
}
}

boolean ptcList::is_value() const
{
if (val_ptr == NULL) return FALSE;
for(int i = 0; i < val_ptr->n_elements; ++i) {
if (val_ptr->value_elements[i] == NULL || !val_ptr->value_elements[i]->is_value()) return FALSE;
}
return TRUE;
}

int ptcList::size_of() const
{
if (val_ptr == NULL) TTCN_error("Performing sizeof operation on an unbound value of type @HTTP_Test_no_ASPs.ptcList.");
return val_ptr->n_elements;
}

int ptcList::lengthof() const
{
if (val_ptr == NULL) TTCN_error("Performing lengthof operation on an unbound value of type @HTTP_Test_no_ASPs.ptcList.");
for (int my_length=val_ptr->n_elements; my_length>0; my_length--) if (val_ptr->value_elements[my_length-1] != NULL) return my_length;
return 0;
}

void ptcList::log() const
{
if (val_ptr == NULL) {;
TTCN_Logger::log_event_unbound();
return;
}
switch (val_ptr->n_elements) {
case 0:
TTCN_Logger::log_event_str("{ }");
break;
default:
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
(*this)[elem_count].log();
}
TTCN_Logger::log_event_str(" }");
}
}

void ptcList::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE|Module_Param::BC_LIST, "record of value");
  switch (param.get_operation_type()) {
  case Module_Param::OT_ASSIGN:
    if (param.get_type()==Module_Param::MP_Value_List && param.get_size()==0) {
      *this = NULL_VALUE;
      return;
    }
    switch (param.get_type()) {
    case Module_Param::MP_Value_List:
      set_size(param.get_size());
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        if (curr->get_type()!=Module_Param::MP_NotUsed) {
          (*this)[i].set_param(*curr);
          if (!(*this)[i].is_bound()) {
            delete val_ptr->value_elements[i];
            val_ptr->value_elements[i] = NULL;
          }
        }
      }
      break;
    case Module_Param::MP_Indexed_List:
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        (*this)[curr->get_id()->get_index()].set_param(*curr);
        if (!(*this)[curr->get_id()->get_index()].is_bound()) {
          delete val_ptr->value_elements[curr->get_id()->get_index()];
          val_ptr->value_elements[curr->get_id()->get_index()] = NULL;
        }
      }
      break;
    default:
      param.type_error("record of value", "@HTTP_Test_no_ASPs.ptcList");
    }
    break;
  case Module_Param::OT_CONCAT:
    switch (param.get_type()) {
    case Module_Param::MP_Value_List: {
      if (!is_bound()) *this = NULL_VALUE;
      int start_idx = lengthof();
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        if ((curr->get_type()!=Module_Param::MP_NotUsed)) {
          (*this)[start_idx+(int)i].set_param(*curr);
        }
      }
    } break;
    case Module_Param::MP_Indexed_List:
      param.error("Cannot concatenate an indexed value list");
      break;
    default:
      param.type_error("record of value", "@HTTP_Test_no_ASPs.ptcList");
    }
    break;
  default:
    TTCN_error("Internal error: Unknown operation type.");
  }
}

void ptcList::set_implicit_omit()
{
if (val_ptr == NULL) return;
for (int i = 0; i < val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) val_ptr->value_elements[i]->set_implicit_omit();
}
}

void ptcList::encode_text(Text_Buf& text_buf) const
{
if (val_ptr == NULL) TTCN_error("Text encoder: Encoding an unbound value of type @HTTP_Test_no_ASPs.ptcList.");
text_buf.push_int(val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++)
(*this)[elem_count].encode_text(text_buf);
}

void ptcList::decode_text(Text_Buf& text_buf)
{
clean_up();
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = text_buf.pull_int().get_val();
if (val_ptr->n_elements < 0) TTCN_error("Text decoder: Negative size was received for a value of type @HTTP_Test_no_ASPs.ptcList.");
val_ptr->value_elements = (COMPONENT**)allocate_pointers(val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++) {
val_ptr->value_elements[elem_count] = new COMPONENT;
val_ptr->value_elements[elem_count]->decode_text(text_buf);
}
}

void ptcList_template::copy_value(const ptcList& other_value)
{
if (!other_value.is_bound()) TTCN_error("Initialization of a template of type @HTTP_Test_no_ASPs.ptcList with an unbound value.");
single_value.n_elements = other_value.size_of();
single_value.value_elements = (COMPONENT_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (other_value[elem_count].is_bound()) {
single_value.value_elements[elem_count] = new COMPONENT_template(other_value[elem_count]);
} else {
single_value.value_elements[elem_count] = new COMPONENT_template;
}
}
set_selection(SPECIFIC_VALUE);
}

void ptcList_template::copy_template(const ptcList_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value.n_elements = other_value.single_value.n_elements;
single_value.value_elements = (COMPONENT_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (UNINITIALIZED_TEMPLATE != other_value.single_value.value_elements[elem_count]->get_selection()) {
single_value.value_elements[elem_count] = new COMPONENT_template(*other_value.single_value.value_elements[elem_count]);
} else {
single_value.value_elements[elem_count] = new COMPONENT_template;
}
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new ptcList_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @HTTP_Test_no_ASPs.ptcList.");
break;
}
set_selection(other_value);
}

boolean ptcList_template::match_function_specific(const Base_Type *value_ptr, int value_index, const Restricted_Length_Template *template_ptr, int template_index, boolean legacy)
{
if (value_index >= 0) return ((const ptcList_template*)template_ptr)->single_value.value_elements[template_index]->match((*(const ptcList*)value_ptr)[value_index], legacy);
else return ((const ptcList_template*)template_ptr)->single_value.value_elements[template_index]->is_any_or_omit();
}

ptcList_template::ptcList_template()
{
}

ptcList_template::ptcList_template(template_sel other_value)
 : Record_Of_Template(other_value)
{
check_single_selection(other_value);
}

ptcList_template::ptcList_template(null_type)
 : Record_Of_Template(SPECIFIC_VALUE)
{
single_value.n_elements = 0;
single_value.value_elements = NULL;
}

ptcList_template::ptcList_template(const ptcList& other_value)
{
copy_value(other_value);
}

ptcList_template::ptcList_template(const OPTIONAL<ptcList>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const ptcList&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @HTTP_Test_no_ASPs.ptcList from an unbound optional field.");
}
}

ptcList_template::ptcList_template(const ptcList_template& other_value)
 : Record_Of_Template()
{
copy_template(other_value);
}

ptcList_template::~ptcList_template()
{
clean_up();
}

void ptcList_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
delete single_value.value_elements[elem_count];
free_pointers((void**)single_value.value_elements);
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

ptcList_template& ptcList_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

ptcList_template& ptcList_template::operator=(null_type)
{
clean_up();
set_selection(SPECIFIC_VALUE);
single_value.n_elements = 0;
single_value.value_elements = NULL;
return *this;
}

ptcList_template& ptcList_template::operator=(const ptcList& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

ptcList_template& ptcList_template::operator=(const OPTIONAL<ptcList>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const ptcList&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @HTTP_Test_no_ASPs.ptcList.");
}
return *this;
}

ptcList_template& ptcList_template::operator=(const ptcList_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

COMPONENT_template& ptcList_template::operator[](int index_value)
{
if (index_value < 0) TTCN_error("Accessing an element of a template for type @HTTP_Test_no_ASPs.ptcList using a negative index: %d.", index_value);
switch (template_selection)
{
  case SPECIFIC_VALUE:
    if(index_value < single_value.n_elements) break;
    // no break
  case OMIT_VALUE:
  case ANY_VALUE:
  case ANY_OR_OMIT:
  case UNINITIALIZED_TEMPLATE:
    set_size(index_value + 1);
    break;
  default:
    TTCN_error("Accessing an element of a non-specific template for type @HTTP_Test_no_ASPs.ptcList.");
    break;
}
return *single_value.value_elements[index_value];
}

COMPONENT_template& ptcList_template::operator[](const INTEGER& index_value)
{
index_value.must_bound("Using an unbound integer value for indexing a template of type @HTTP_Test_no_ASPs.ptcList.");
return (*this)[(int)index_value];
}

const COMPONENT_template& ptcList_template::operator[](int index_value) const
{
if (index_value < 0) TTCN_error("Accessing an element of a template for type @HTTP_Test_no_ASPs.ptcList using a negative index: %d.", index_value);
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing an element of a non-specific template for type @HTTP_Test_no_ASPs.ptcList.");
if (index_value >= single_value.n_elements) TTCN_error("Index overflow in a template of type @HTTP_Test_no_ASPs.ptcList: The index is %d, but the template has only %d elements.", index_value, single_value.n_elements);
return *single_value.value_elements[index_value];
}

const COMPONENT_template& ptcList_template::operator[](const INTEGER& index_value) const
{
index_value.must_bound("Using an unbound integer value for indexing a template of type @HTTP_Test_no_ASPs.ptcList.");
return (*this)[(int)index_value];
}

void ptcList_template::set_size(int new_size)
{
if (new_size < 0) TTCN_error("Internal error: Setting a negative size for a template of type @HTTP_Test_no_ASPs.ptcList.");
template_sel old_selection = template_selection;
if (old_selection != SPECIFIC_VALUE) {
clean_up();
set_selection(SPECIFIC_VALUE);
single_value.n_elements = 0;
single_value.value_elements = NULL;
}
if (new_size > single_value.n_elements) {
single_value.value_elements = (COMPONENT_template**)reallocate_pointers((void**)single_value.value_elements, single_value.n_elements, new_size);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
for (int elem_count = single_value.n_elements; elem_count < new_size; elem_count++)
single_value.value_elements[elem_count] = new COMPONENT_template(ANY_VALUE);
} else {
for (int elem_count = single_value.n_elements; elem_count < new_size; elem_count++)
single_value.value_elements[elem_count] = new COMPONENT_template;
}
single_value.n_elements = new_size;
} else if (new_size < single_value.n_elements) {
for (int elem_count = new_size; elem_count < single_value.n_elements; elem_count++)
delete single_value.value_elements[elem_count];
single_value.value_elements = (COMPONENT_template**)reallocate_pointers((void**)single_value.value_elements, single_value.n_elements, new_size);
single_value.n_elements = new_size;
}
}

int ptcList_template::n_elem() const
{
  switch (template_selection) {
  case SPECIFIC_VALUE:
    return single_value.n_elements;
    break;
  case VALUE_LIST:
    return value_list.n_values;
    break;
  default:
    TTCN_error("Performing n_elem");
  }
}

int ptcList_template::size_of(boolean is_size) const
{
const char* op_name = is_size ? "size" : "length";
int min_size;
boolean has_any_or_none;
if (is_ifpresent) TTCN_error("Performing %sof() operation on a template of type @HTTP_Test_no_ASPs.ptcList which has an ifpresent attribute.", op_name);
switch (template_selection)
{
case SPECIFIC_VALUE: {
  min_size = 0;
  has_any_or_none = FALSE;
  int elem_count = single_value.n_elements;
  if (!is_size) { while (elem_count>0 && !single_value.value_elements[elem_count-1]->is_bound()) elem_count--; }
  for (int i=0; i<elem_count; i++) {
    switch (single_value.value_elements[i]->get_selection()) {
    case OMIT_VALUE:
      TTCN_error("Performing %sof() operation on a template of type @HTTP_Test_no_ASPs.ptcList containing omit element.", op_name);
    case ANY_OR_OMIT:
      has_any_or_none = TRUE;
      break;
    default:
      min_size++;
      break;
    }
  }
} break;
case OMIT_VALUE:
  TTCN_error("Performing %sof() operation on a template of type @HTTP_Test_no_ASPs.ptcList containing omit value.", op_name);
case ANY_VALUE:
case ANY_OR_OMIT:
  min_size = 0;
  has_any_or_none = TRUE;
  break;
case VALUE_LIST:
{
  if (value_list.n_values<1)
    TTCN_error("Performing %sof() operation on a template of type @HTTP_Test_no_ASPs.ptcList containing an empty list.", op_name);
  int item_size = value_list.list_value[0].size_of(is_size);
  for (unsigned int i = 1; i < value_list.n_values; i++) {
    if (value_list.list_value[i].size_of(is_size)!=item_size)
      TTCN_error("Performing %sof() operation on a template of type @HTTP_Test_no_ASPs.ptcList containing a value list with different sizes.", op_name);
  }
  min_size = item_size;
  has_any_or_none = FALSE;
  break;
}
case COMPLEMENTED_LIST:
  TTCN_error("Performing %sof() operation on a template of type @HTTP_Test_no_ASPs.ptcList containing complemented list.", op_name);
default:
  TTCN_error("Performing %sof() operation on an uninitialized/unsupported template of type @HTTP_Test_no_ASPs.ptcList.", op_name);
}
return check_section_is_single(min_size, has_any_or_none, op_name, "a", "template of type @HTTP_Test_no_ASPs.ptcList");
}

boolean ptcList_template::match(const ptcList& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
int value_length = other_value.size_of();
if (!match_length(value_length)) return FALSE;
switch (template_selection) {
case SPECIFIC_VALUE:
return match_record_of(&other_value, value_length, this, single_value.n_elements, match_function_specific, legacy);
case OMIT_VALUE:
return FALSE;
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching with an uninitialized/unsupported template of type @HTTP_Test_no_ASPs.ptcList.");
}
return FALSE;
}

boolean ptcList_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
if (!single_value.value_elements[elem_count]->is_value()) return FALSE;
return TRUE;
}

ptcList ptcList_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) TTCN_error("Performing a valueof or send operation on a non-specific template of type @HTTP_Test_no_ASPs.ptcList.");
ptcList ret_val;
ret_val.set_size(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
if (single_value.value_elements[elem_count]->is_bound()) {
ret_val[elem_count] = single_value.value_elements[elem_count]->valueof();
}
return ret_val;
}

ptcList ptcList_template::substr(int index, int returncount) const
{
if (!is_value()) TTCN_error("The first argument of function substr() is a template with non-specific value.");
return valueof().substr(index, returncount);
}

ptcList ptcList_template::replace(int index, int len, const ptcList_template& repl) const
{
if (!is_value()) TTCN_error("The first argument of function replace() is a template with non-specific value.");
if (!repl.is_value()) TTCN_error("The fourth argument of function replace() is a template with non-specific value.");
return valueof().replace(index, len, repl.valueof());
}

ptcList ptcList_template::replace(int index, int len, const ptcList& repl) const
{
if (!is_value()) TTCN_error("The first argument of function replace() is a template with non-specific value.");
return valueof().replace(index, len, repl);
}

void ptcList_template::set_type(template_sel template_type, unsigned int list_length)
{
clean_up();
switch (template_type) {
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = list_length;
value_list.list_value = new ptcList_template[list_length];
break;
default:
TTCN_error("Internal error: Setting an invalid type for a template of type @HTTP_Test_no_ASPs.ptcList.");
}
set_selection(template_type);
}

ptcList_template& ptcList_template::list_item(unsigned int list_index)
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST) TTCN_error("Internal error: Accessing a list element of a non-list template of type @HTTP_Test_no_ASPs.ptcList.");
if (list_index >= value_list.n_values) TTCN_error("Internal error: Index overflow in a value list template of type @HTTP_Test_no_ASPs.ptcList.");
return value_list.list_value[list_index];
}

void ptcList_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
if (single_value.n_elements > 0) {
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
if (permutation_starts_at(elem_count)) TTCN_Logger::log_event_str("permutation(");
single_value.value_elements[elem_count]->log();
if (permutation_ends_at(elem_count)) TTCN_Logger::log_char(')');
}
TTCN_Logger::log_event_str(" }");
} else TTCN_Logger::log_event_str("{ }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_restricted();
log_ifpresent();
}

void ptcList_template::log_match(const ptcList& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
}else{
if (template_selection == SPECIFIC_VALUE && single_value.n_elements > 0 && get_number_of_permutations() == 0 && single_value.n_elements == match_value.size_of()) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if(!single_value.value_elements[elem_count]->match(match_value[elem_count], legacy)){
TTCN_Logger::log_logmatch_info("[%d]", elem_count);
single_value.value_elements[elem_count]->log_match(match_value[elem_count], legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
log_match_length(single_value.n_elements);
} else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE && single_value.n_elements > 0 && get_number_of_permutations() == 0 && single_value.n_elements == match_value.size_of()) {
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
single_value.value_elements[elem_count]->log_match(match_value[elem_count], legacy);
}
TTCN_Logger::log_event_str(" }");
log_match_length(single_value.n_elements);
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void ptcList_template::encode_text(Text_Buf& text_buf) const
{
encode_text_permutation(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
text_buf.push_int(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
single_value.value_elements[elem_count]->encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @HTTP_Test_no_ASPs.ptcList.");
}
}

void ptcList_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_permutation(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value.n_elements = text_buf.pull_int().get_val();
if (single_value.n_elements < 0) TTCN_error("Text decoder: Negative size was received for a template of type @HTTP_Test_no_ASPs.ptcList.");
single_value.value_elements = (COMPONENT_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
single_value.value_elements[elem_count] = new COMPONENT_template;
single_value.value_elements[elem_count]->decode_text(text_buf);
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new ptcList_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received for a template of type @HTTP_Test_no_ASPs.ptcList.");
}
}

boolean ptcList_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean ptcList_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int i=0; i<value_list.n_values; i++)
if (value_list.list_value[i].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

void ptcList_template::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_TEMPLATE|Module_Param::BC_LIST, "record of template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    ptcList_template temp;
    temp.set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      temp.list_item(p_i).set_param(*param.get_elem(p_i));
    }
    *this = temp;
    break; }
  case Module_Param::MP_Indexed_List:
    if (template_selection!=SPECIFIC_VALUE) set_size(0);
    for (size_t p_i=0; p_i<param.get_size(); ++p_i) {
      (*this)[(int)(param.get_elem(p_i)->get_id()->get_index())].set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List: {
    set_size(param.get_size());
    int curr_idx = 0;
    for (size_t p_i=0; p_i<param.get_size(); ++p_i) {
      switch (param.get_elem(p_i)->get_type()) {
      case Module_Param::MP_NotUsed:
        curr_idx++;
        break;
      case Module_Param::MP_Permutation_Template: {
        int perm_start_idx = curr_idx;
        Module_Param* param_i = param.get_elem(p_i);
        for (size_t perm_i=0; perm_i<param_i->get_size(); perm_i++) {
          (*this)[curr_idx].set_param(*(param_i->get_elem(perm_i)));
          curr_idx++;
        }
        int perm_end_idx = curr_idx - 1;
        add_permutation(perm_start_idx, perm_end_idx);
      } break;
      default:
        (*this)[curr_idx].set_param(*param.get_elem(p_i));
        curr_idx++;
      }
    }
  } break;
  default:
    param.type_error("record of template", "@HTTP_Test_no_ASPs.ptcList");
  }
  is_ifpresent = param.get_ifpresent();
  set_length_range(param);
}

void ptcList_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
for (int i=0; i<single_value.n_elements; i++) single_value.value_elements[i]->check_restriction(t_res, t_name ? t_name : "@HTTP_Test_no_ASPs.ptcList");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@HTTP_Test_no_ASPs.ptcList");
}

boolean ptcList_template::get_istemplate_kind(const char* type) const {
if (!strcmp(type, "AnyElement")) {
  if (template_selection != SPECIFIC_VALUE) {
    return FALSE;
  }
  for (int i = 0; i < single_value.n_elements; i++) {
    if (single_value.value_elements[i]->get_selection() == ANY_VALUE) {
      return TRUE;
    }
  }
  return FALSE;
} else if (!strcmp(type, "AnyElementsOrNone")) {
  if (template_selection != SPECIFIC_VALUE) {
    return FALSE;
  }
  for (int i = 0; i < single_value.n_elements; i++) {
    if (single_value.value_elements[i]->get_selection() == ANY_OR_OMIT) {
      return TRUE;
    }
  }
  return FALSE;
} else if (!strcmp(type, "permutation")) {
  return number_of_permutations;
} else if (!strcmp(type, "length")) {
  return length_restriction_type != NO_LENGTH_RESTRICTION;
} else {
  return Base_Template::get_istemplate_kind(type);
}
}

/* Bodies of functions, altsteps and testcases */

boolean operator==(null_type, const ptcList& other_value)
{
if (other_value.val_ptr == NULL)
TTCN_error("The right operand of comparison is an unbound value of type @HTTP_Test_no_ASPs.ptcList.");
return other_value.val_ptr->n_elements == 0;
}

void TC()
{
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 53 */
HTTPmsg__Types::HeaderLines hd;
hd.set_size(4);
{
HTTPmsg__Types::HeaderLine& tmp_0 = hd[0];
tmp_0.header__name() = cs_1;
tmp_0.header__value() = cs_2;
}
{
HTTPmsg__Types::HeaderLine& tmp_1 = hd[1];
tmp_1.header__name() = cs_3;
tmp_1.header__value() = cs_4;
}
{
HTTPmsg__Types::HeaderLine& tmp_2 = hd[2];
tmp_2.header__name() = cs_5;
tmp_2.header__value() = cs_6;
}
{
HTTPmsg__Types::HeaderLine& tmp_3 = hd[3];
tmp_3.header__name() = cs_7;
tmp_3.header__value() = cs_8;
}
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 57 */
HTTPmsg__Types::HTTPRequest r;
r.client__id() = OMIT_VALUE;
r.method() = cs_9;
r.uri() = cs_10;
r.version__major() = 1;
r.version__minor() = 0;
r.header() = hd;
r.body() = cs_11;
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 59 */
HTTPmsg__Types::HTTPMessage send__req;
send__req.request() = r;
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 60 */
HTTPmsg__Types::Connect conn;
conn.hostname() = HttpServerHostName;
conn.portnumber() = HttpServerPort;
conn.use__ssl() = HTTPClientUseSSL;
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 62 */
HTTPmsg__Types::Close c;
c.client__id() = OMIT_VALUE;
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 64 */
TTCN_Runtime::map_port(self, HTTP__client_component_HTTP__client__port.get_name(), SYSTEM_COMPREF, "HTTP_client_port");
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 66 */
BOOLEAN conn__ok(FALSE);
for ( ; ; ) {
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 67 */
if (!(conn__ok == FALSE)) break;
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 69 */
TIMER t__connect("t_connect", 2.0);
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 70 */
t__connect.start();
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 71 */
HTTP__client_component_HTTP__client__port.send(conn);
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 72 */
{
tmp_4:
alt_status tmp_4_alt_flag_0 = ALT_MAYBE;
alt_status tmp_4_alt_flag_1 = ALT_MAYBE;
alt_status tmp_4_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_4_alt_flag_0 == ALT_MAYBE) {
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 73 */
tmp_4_alt_flag_0 = HTTP__client_component_HTTP__client__port.receive(recv__err, NULL, any_compref, NULL, NULL, NULL);
if (tmp_4_alt_flag_0 == ALT_YES) {
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 74 */
TIMER t__wait("t_wait", 2.0);
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 75 */
t__wait.start();
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 76 */
{
tmp_5:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = t__wait.timeout(NULL);
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_5;
}
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 76 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone timeout statement failed in file ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 76.");
TTCN_Snapshot::take_new(TRUE);
}
}
break;
}
}
if (tmp_4_alt_flag_1 == ALT_MAYBE) {
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 77 */
tmp_4_alt_flag_1 = t__connect.timeout(NULL);
if (tmp_4_alt_flag_1 == ALT_YES) {
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 78 */
conn__ok = TRUE;
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 79 */
TTCN_Logger::log_str(TTCN_USER, "connection to server ok");
break;
}
}
if (tmp_4_default_flag == ALT_MAYBE) {
tmp_4_default_flag = TTCN_Default::try_altsteps();
if (tmp_4_default_flag == ALT_YES || tmp_4_default_flag == ALT_BREAK) break;
else if (tmp_4_default_flag == ALT_REPEAT) goto tmp_4;
}
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 72 */
if (tmp_4_alt_flag_0 == ALT_NO && tmp_4_alt_flag_1 == ALT_NO && tmp_4_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn between lines 72 and 80.");
TTCN_Snapshot::take_new(TRUE);
}
}
}
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 83 */
TIMER T__guard("T_guard", 5.0);
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 84 */
T__guard.start();
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 85 */
HTTP__client_component_HTTP__client__port.send(send__req);
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 87 */
{
tmp_7:
alt_status tmp_7_alt_flag_0 = ALT_MAYBE;
alt_status tmp_7_alt_flag_1 = ALT_MAYBE;
alt_status tmp_7_alt_flag_2 = ALT_MAYBE;
alt_status tmp_7_alt_flag_3 = ALT_MAYBE;
alt_status tmp_7_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_7_alt_flag_0 == ALT_MAYBE) {
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 88 */
tmp_7_alt_flag_0 = HTTP__client_component_HTTP__client__port.receive(h, NULL, any_compref, NULL, NULL, NULL);
if (tmp_7_alt_flag_0 == ALT_YES) {
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 89 */
HTTP__client_component_HTTP__client__port.send(c);
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 90 */
TTCN_Runtime::setverdict(FAIL);
break;
}
}
if (tmp_7_alt_flag_1 == ALT_MAYBE) {
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 91 */
tmp_7_alt_flag_1 = HTTP__client_component_HTTP__client__port.receive(recv__resp, NULL, any_compref, NULL, NULL, NULL);
if (tmp_7_alt_flag_1 == ALT_YES) {
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 92 */
TIMER t("t", 1.0e1);
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 93 */
t.start();
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 94 */
{
tmp_8:
alt_status tmp_8_alt_flag_0 = ALT_MAYBE;
alt_status tmp_8_alt_flag_1 = ALT_MAYBE;
alt_status tmp_8_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_8_alt_flag_0 == ALT_MAYBE) {
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 95 */
tmp_8_alt_flag_0 = HTTP__client_component_HTTP__client__port.receive(h, NULL, any_compref, NULL, NULL, NULL);
if (tmp_8_alt_flag_0 == ALT_YES) {
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 96 */
HTTP__client_component_HTTP__client__port.send(c);
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 97 */
t.stop();
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 98 */
TTCN_Runtime::setverdict(PASS);
break;
}
}
if (tmp_8_alt_flag_1 == ALT_MAYBE) {
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 99 */
tmp_8_alt_flag_1 = t.timeout(NULL);
if (tmp_8_alt_flag_1 == ALT_YES) {
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 100 */
HTTP__client_component_HTTP__client__port.send(c);
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 101 */
t.stop();
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 102 */
TTCN_Runtime::setverdict(FAIL);
break;
}
}
if (tmp_8_default_flag == ALT_MAYBE) {
tmp_8_default_flag = TTCN_Default::try_altsteps();
if (tmp_8_default_flag == ALT_YES || tmp_8_default_flag == ALT_BREAK) break;
else if (tmp_8_default_flag == ALT_REPEAT) goto tmp_8;
}
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 94 */
if (tmp_8_alt_flag_0 == ALT_NO && tmp_8_alt_flag_1 == ALT_NO && tmp_8_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn between lines 94 and 103.");
TTCN_Snapshot::take_new(TRUE);
}
}
break;
}
}
if (tmp_7_alt_flag_2 == ALT_MAYBE) {
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 105 */
tmp_7_alt_flag_2 = HTTP__client_component_HTTP__client__port.receive(any_compref, NULL, NULL, NULL);
if (tmp_7_alt_flag_2 == ALT_YES) {
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 106 */
HTTP__client_component_HTTP__client__port.send(c);
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 107 */
TTCN_Runtime::setverdict(FAIL);
break;
}
}
if (tmp_7_alt_flag_3 == ALT_MAYBE) {
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 109 */
tmp_7_alt_flag_3 = T__guard.timeout(NULL);
if (tmp_7_alt_flag_3 == ALT_YES) {
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 110 */
TTCN_Runtime::setverdict(FAIL);
break;
}
}
if (tmp_7_default_flag == ALT_MAYBE) {
tmp_7_default_flag = TTCN_Default::try_altsteps();
if (tmp_7_default_flag == ALT_YES || tmp_7_default_flag == ALT_BREAK) break;
else if (tmp_7_default_flag == ALT_REPEAT) goto tmp_7;
}
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 87 */
if (tmp_7_alt_flag_0 == ALT_NO && tmp_7_alt_flag_1 == ALT_NO && tmp_7_alt_flag_2 == ALT_NO && tmp_7_alt_flag_3 == ALT_NO && tmp_7_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn between lines 87 and 111.");
TTCN_Snapshot::take_new(TRUE);
}
}
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 113 */
TTCN_Runtime::unmap_port(self, HTTP__client_component_HTTP__client__port.get_name(), SYSTEM_COMPREF, "HTTP_client_port");
}

void start_TC(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function TC(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "HTTP_Test_no_ASPs", "TC", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void server__TC()
{
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 118 */
HTTPmsg__Types::Listen listen;
listen.local__hostname() = OMIT_VALUE;
listen.portnumber() = HttpServerListenPort;
listen.use__ssl() = HttpServerUseSSL;
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 119 */
HTTPmsg__Types::HTTPResponse resp;
resp.client__id() = OMIT_VALUE;
resp.version__major() = 1;
resp.version__minor() = 1;
resp.statuscode() = 200;
resp.statustext() = cs_12;
{
HTTPmsg__Types::HeaderLines& tmp_9 = resp.header();
tmp_9.set_size(2);
{
HTTPmsg__Types::HeaderLine& tmp_10 = tmp_9[0];
tmp_10.header__name() = cs_13;
tmp_10.header__value() = cs_14;
}
{
HTTPmsg__Types::HeaderLine& tmp_11 = tmp_9[1];
tmp_11.header__name() = cs_3;
tmp_11.header__value() = cs_15;
}
}
resp.body() = cs_16;
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 123 */
HTTPmsg__Types::HTTPMessage send__resp;
send__resp.response() = resp;
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 124 */
HTTPmsg__Types::Close c;
c.client__id() = OMIT_VALUE;
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 126 */
TTCN_Runtime::map_port(self, HTTP__server_component_HTTP__server__port.get_name(), SYSTEM_COMPREF, "HTTP_server_port");
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 128 */
HTTP__server_component_HTTP__server__port.send(listen);
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 130 */
TIMER T__guard("T_guard", 5.0e2);
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 131 */
T__guard.start();
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 132 */
BOOLEAN ready(FALSE);
for ( ; ; ) {
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 134 */
if (!(ready == FALSE)) break;
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 135 */
{
tmp_12:
alt_status tmp_12_alt_flag_0 = ALT_MAYBE;
alt_status tmp_12_alt_flag_1 = ALT_MAYBE;
alt_status tmp_12_alt_flag_2 = ALT_MAYBE;
alt_status tmp_12_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_12_alt_flag_0 == ALT_MAYBE) {
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 136 */
tmp_12_alt_flag_0 = HTTP__server_component_HTTP__server__port.receive(recv__req, NULL, any_compref, NULL, NULL, NULL);
if (tmp_12_alt_flag_0 == ALT_YES) {
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 137 */
HTTP__server_component_HTTP__server__port.send(send__resp);
break;
}
}
if (tmp_12_alt_flag_1 == ALT_MAYBE) {
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 139 */
tmp_12_alt_flag_1 = HTTP__server_component_HTTP__server__port.receive(h, NULL, any_compref, NULL, NULL, NULL);
if (tmp_12_alt_flag_1 == ALT_YES) {
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 140 */
HTTP__server_component_HTTP__server__port.send(c);
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 141 */
ready = TRUE;
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 142 */
TTCN_Runtime::setverdict(PASS);
break;
}
}
if (tmp_12_alt_flag_2 == ALT_MAYBE) {
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 144 */
tmp_12_alt_flag_2 = T__guard.timeout(NULL);
if (tmp_12_alt_flag_2 == ALT_YES) {
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 145 */
TTCN_Runtime::setverdict(FAIL);
break;
}
}
if (tmp_12_default_flag == ALT_MAYBE) {
tmp_12_default_flag = TTCN_Default::try_altsteps();
if (tmp_12_default_flag == ALT_YES || tmp_12_default_flag == ALT_BREAK) break;
else if (tmp_12_default_flag == ALT_REPEAT) goto tmp_12;
}
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 135 */
if (tmp_12_alt_flag_0 == ALT_NO && tmp_12_alt_flag_1 == ALT_NO && tmp_12_alt_flag_2 == ALT_NO && tmp_12_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn between lines 135 and 147.");
TTCN_Snapshot::take_new(TRUE);
}
}
}
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 150 */
TTCN_Runtime::unmap_port(self, HTTP__server_component_HTTP__server__port.get_name(), SYSTEM_COMPREF, "HTTP_server_port");
}

void start_server__TC(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function server_TC(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "HTTP_Test_no_ASPs", "server_TC", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__singleEncDecCheck(const HTTPmsg__Types::HTTPMessage& p__msg)
{
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 157 */
HTTPmsg__Types::HTTPMessage_template tr__expectedMsg(p__msg);
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 158 */
if (p__msg.ischosen(HTTPmsg__Types::HTTPMessage::ALT_request)) {
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 159 */
tr__expectedMsg.request().client__id() = ANY_OR_OMIT;
}
else {
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 161 */
if (p__msg.ischosen(HTTPmsg__Types::HTTPMessage::ALT_response)) {
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 162 */
tr__expectedMsg.response().client__id() = ANY_OR_OMIT;
}
}
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 165 */
OCTETSTRING vloc__encodedMsg;
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 166 */
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("Original message:");
p__msg.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 167 */
TTCN_Logger::log_str(TTCN_USER, "\n======================\n");
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 168 */
vloc__encodedMsg = HTTPmsg__Types::enc__HTTPMessage(p__msg);
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 169 */
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("Encoded message:");
vloc__encodedMsg.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 172 */
HTTPmsg__Types::HTTPMessage vloc__decodedMsg;
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 173 */
INTEGER vl__lengthOfRemainingMsg(HTTPmsg__Types::dec__HTTPMessage(vloc__encodedMsg, vloc__decodedMsg, HTTPmsg__Types::dec__HTTPMessage_socket__debugging_defval));
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 174 */
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("length of the encoded msg: ");
{
INTEGER tmp_17(vloc__encodedMsg.lengthof());
tmp_17.log();
}
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 175 */
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("length of the remaining msg after encoding:");
vl__lengthOfRemainingMsg.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 176 */
if ((vl__lengthOfRemainingMsg < vloc__encodedMsg.lengthof())) {
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 178 */
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("The decoded message:");
vloc__decodedMsg.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 180 */
if (tr__expectedMsg.match(vloc__decodedMsg)) {
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 182 */
TTCN_Runtime::setverdict(PASS);
}
else {
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 186 */
try {
TTCN_Logger::begin_event(TTCN_USER);
(tr__expectedMsg).log_match(vloc__decodedMsg);
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 187 */
TTCN_Runtime::setverdict(FAIL);
}
}
else {
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 192 */
TTCN_Logger::log_str(TTCN_USER, "Decoding not happened");
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 193 */
TTCN_Runtime::setverdict(FAIL);
}
}

void f__EncDec()
{
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 202 */
HTTPmsg__Types::HeaderLines hd;
hd.set_size(4);
{
HTTPmsg__Types::HeaderLine& tmp_18 = hd[0];
tmp_18.header__name() = cs_1;
tmp_18.header__value() = cs_2;
}
{
HTTPmsg__Types::HeaderLine& tmp_19 = hd[1];
tmp_19.header__name() = cs_3;
tmp_19.header__value() = cs_17;
}
{
HTTPmsg__Types::HeaderLine& tmp_20 = hd[2];
tmp_20.header__name() = cs_5;
tmp_20.header__value() = cs_6;
}
{
HTTPmsg__Types::HeaderLine& tmp_21 = hd[3];
tmp_21.header__name() = cs_7;
tmp_21.header__value() = cs_8;
}
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 206 */
HTTPmsg__Types::HTTPRequest r;
r.client__id() = OMIT_VALUE;
r.method() = cs_18;
r.uri() = cs_10;
r.version__major() = 1;
r.version__minor() = 0;
r.header() = hd;
r.body() = cs_19;
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 209 */
HTTPmsg__Types::HTTPMessage send__req;
send__req.request() = r;
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 210 */
f__singleEncDecCheck(send__req);
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 213 */
HTTPmsg__Types::HTTPResponse resp;
resp.client__id() = OMIT_VALUE;
resp.version__major() = 1;
resp.version__minor() = 1;
resp.statuscode() = 200;
resp.statustext() = cs_12;
{
HTTPmsg__Types::HeaderLines& tmp_22 = resp.header();
tmp_22.set_size(2);
{
HTTPmsg__Types::HeaderLine& tmp_23 = tmp_22[0];
tmp_23.header__name() = cs_13;
tmp_23.header__value() = cs_14;
}
{
HTTPmsg__Types::HeaderLine& tmp_24 = tmp_22[1];
tmp_24.header__name() = cs_3;
tmp_24.header__value() = cs_15;
}
}
resp.body() = cs_16;
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 217 */
HTTPmsg__Types::HTTPMessage send__resp;
send__resp.response() = resp;
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 219 */
f__singleEncDecCheck(send__resp);
}

void start_f__EncDec(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_EncDec(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "HTTP_Test_no_ASPs", "f_EncDec", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__EncDec2()
{
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 227 */
CHARSTRINGS test__msgs;
test__msgs.set_size(2);
test__msgs[0] = cs_20;
test__msgs[1] = cs_21;
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 236 */
HTTPmsg__Types::HTTPResponse resp;
resp.client__id() = OMIT_VALUE;
resp.version__major() = 1;
resp.version__minor() = 1;
resp.statuscode() = 200;
resp.statustext() = cs_12;
{
HTTPmsg__Types::HeaderLines& tmp_25 = resp.header();
tmp_25.set_size(2);
{
HTTPmsg__Types::HeaderLine& tmp_26 = tmp_25[0];
tmp_26.header__name() = cs_13;
tmp_26.header__value() = cs_14;
}
{
HTTPmsg__Types::HeaderLine& tmp_27 = tmp_25[1];
tmp_27.header__name() = cs_3;
tmp_27.header__value() = int2str((const_cast< const CHARSTRINGS&>(test__msgs)[0].lengthof() + const_cast< const CHARSTRINGS&>(test__msgs)[1].lengthof()));
}
}
resp.body() = (const_cast< const CHARSTRINGS&>(test__msgs)[0] + const_cast< const CHARSTRINGS&>(test__msgs)[1]);
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 240 */
HTTPmsg__Types::HTTPMessage send__resp;
send__resp.response() = resp;
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 242 */
f__singleEncDecCheck(send__resp);
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 244 */
OCTETSTRING received__reply(os_0);
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 253 */
INTEGER vl__remainingStringLength(received__reply.lengthof());
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 254 */
CHARSTRINGS vl__decodedMessagePieces(NULL_VALUE);
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 255 */
HTTPmsg__Types::HTTPMessage vloc__decodedMsg;
for ( ; ; ) {
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 256 */
if (!(vl__remainingStringLength > 0)) break;
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 258 */
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("Original msg string length = ");
{
INTEGER tmp_28(received__reply.lengthof());
tmp_28.log();
}
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 259 */
vl__remainingStringLength = HTTPmsg__Types::dec__HTTPMessage(received__reply, vloc__decodedMsg, TRUE);
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 260 */
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str(" The decoded message Piece = ");
vloc__decodedMsg.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 261 */
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("remaining msg string length:");
vl__remainingStringLength.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
}
}

void start_f__EncDec2(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_EncDec2(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "HTTP_Test_no_ASPs", "f_EncDec2", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void singleTC()
{
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 273 */
HTTPmsg__Types::HeaderLines hd;
hd.set_size(2);
{
HTTPmsg__Types::HeaderLine& tmp_30 = hd[0];
tmp_30.header__name() = cs_22;
tmp_30.header__value() = HttpServerHostName;
}
{
HTTPmsg__Types::HeaderLine& tmp_31 = hd[1];
tmp_31.header__name() = cs_3;
tmp_31.header__value() = cs_23;
}
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 277 */
HTTPmsg__Types::HTTPRequest r;
r.client__id() = OMIT_VALUE;
r.method() = cs_24;
r.uri() = cs_10;
r.version__major() = 1;
r.version__minor() = 1;
r.header() = hd;
r.body() = cs_25;
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 280 */
HTTPmsg__Types::HTTPMessage send__req;
send__req.request() = r;
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 281 */
HTTPmsg__Types::Connect conn;
conn.hostname() = HttpServerHostName;
conn.portnumber() = HttpServerPort;
conn.use__ssl() = HTTPClientUseSSL;
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 283 */
HTTPmsg__Types::Close c;
c.client__id() = OMIT_VALUE;
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 284 */
TIMER T__guard("T_guard", 5.0);
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 285 */
INTEGER i;
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 286 */
INTEGER how__many__times(1);
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 288 */
TTCN_Runtime::map_port(self, HTTP__client_component_HTTP__client__port.get_name(), SYSTEM_COMPREF, "HTTP_client_port");
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 290 */
HTTP__client_component_HTTP__client__port.send(conn);
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 292 */
i = 0;
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 292 */
for ( ; ; ) {
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 292 */
if (!(i < how__many__times)) break;
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 293 */
HTTP__client_component_HTTP__client__port.send(send__req);
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 294 */
if (T__guard.running(NULL)) {
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 294 */
T__guard.stop();
}
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 296 */
T__guard.start();
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 298 */
{
tmp_33:
alt_status tmp_33_alt_flag_0 = ALT_MAYBE;
alt_status tmp_33_alt_flag_1 = ALT_MAYBE;
alt_status tmp_33_alt_flag_2 = ALT_MAYBE;
alt_status tmp_33_alt_flag_3 = ALT_MAYBE;
alt_status tmp_33_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_33_alt_flag_0 == ALT_MAYBE) {
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 299 */
tmp_33_alt_flag_0 = HTTP__client_component_HTTP__client__port.receive(recv__resp, NULL, any_compref, NULL, NULL, NULL);
if (tmp_33_alt_flag_0 == ALT_YES) {
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 300 */
if ((i == (how__many__times - 1))) {
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 301 */
HTTP__client_component_HTTP__client__port.send(c);
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 302 */
TTCN_Runtime::setverdict(PASS);
}
break;
}
}
if (tmp_33_alt_flag_1 == ALT_MAYBE) {
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 305 */
tmp_33_alt_flag_1 = HTTP__client_component_HTTP__client__port.receive(h, NULL, any_compref, NULL, NULL, NULL);
if (tmp_33_alt_flag_1 == ALT_YES) {
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 306 */
HTTP__client_component_HTTP__client__port.send(c);
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 307 */
TTCN_Runtime::setverdict(FAIL);
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 308 */
i = how__many__times;
break;
}
}
if (tmp_33_alt_flag_2 == ALT_MAYBE) {
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 310 */
tmp_33_alt_flag_2 = HTTP__client_component_HTTP__client__port.receive(any_compref, NULL, NULL, NULL);
if (tmp_33_alt_flag_2 == ALT_YES) {
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 311 */
HTTP__client_component_HTTP__client__port.send(c);
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 312 */
TTCN_Runtime::setverdict(FAIL);
break;
}
}
if (tmp_33_alt_flag_3 == ALT_MAYBE) {
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 314 */
tmp_33_alt_flag_3 = T__guard.timeout(NULL);
if (tmp_33_alt_flag_3 == ALT_YES) {
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 315 */
TTCN_Runtime::setverdict(FAIL);
break;
}
}
if (tmp_33_default_flag == ALT_MAYBE) {
tmp_33_default_flag = TTCN_Default::try_altsteps();
if (tmp_33_default_flag == ALT_YES || tmp_33_default_flag == ALT_BREAK) break;
else if (tmp_33_default_flag == ALT_REPEAT) goto tmp_33;
}
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 298 */
if (tmp_33_alt_flag_0 == ALT_NO && tmp_33_alt_flag_1 == ALT_NO && tmp_33_alt_flag_2 == ALT_NO && tmp_33_alt_flag_3 == ALT_NO && tmp_33_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn between lines 298 and 316.");
TTCN_Snapshot::take_new(TRUE);
}
}
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 292 */
{
INTEGER tmp_35;
++i;
}
}
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 319 */
TTCN_Runtime::unmap_port(self, HTTP__client_component_HTTP__client__port.get_name(), SYSTEM_COMPREF, "HTTP_client_port");
}

void start_singleTC(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function singleTC(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "HTTP_Test_no_ASPs", "singleTC", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

verdicttype testcase_parallel__TC__client(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
try {
TTCN_Runtime::begin_testcase("HTTP_Test_no_ASPs", "parallel_TC_client", "HTTP_Test_no_ASPs", "HTTP_client", "HTTP_Test_no_ASPs", "HTTP_client", has_timer, timer_value);
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 328 */
COMPONENT client__PTC;
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 329 */
client__PTC = TTCN_Runtime::create_component("HTTP_Test_no_ASPs", "HTTP_client", NULL, NULL, FALSE);
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 330 */
start_TC(client__PTC);
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 331 */
{
tmp_37:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = client__PTC.done(NULL, NULL);
if (alt_flag == ALT_YES) break;
else if (alt_flag == ALT_REPEAT) goto tmp_37;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_37;
}
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 331 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone done statement failed in file ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 331.");
TTCN_Snapshot::take_new(TRUE);
}
}
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case parallel_TC_client was stopped.");
}
return TTCN_Runtime::end_testcase();
}

verdicttype testcase_tc__parallel__server(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
try {
TTCN_Runtime::begin_testcase("HTTP_Test_no_ASPs", "tc_parallel_server", "HTTP_Test_no_ASPs", "HTTP_server", "HTTP_Test_no_ASPs", "HTTP_server", has_timer, timer_value);
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 336 */
COMPONENT server__PTC;
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 337 */
server__PTC = TTCN_Runtime::create_component("HTTP_Test_no_ASPs", "HTTP_server", NULL, NULL, FALSE);
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 338 */
start_server__TC(server__PTC);
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 339 */
{
tmp_39:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = server__PTC.done(NULL, NULL);
if (alt_flag == ALT_YES) break;
else if (alt_flag == ALT_REPEAT) goto tmp_39;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_39;
}
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 339 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone done statement failed in file ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 339.");
TTCN_Snapshot::take_new(TRUE);
}
}
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case tc_parallel_server was stopped.");
}
return TTCN_Runtime::end_testcase();
}

verdicttype testcase_tc__stress(const INTEGER& n, boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
try {
TTCN_Runtime::begin_testcase("HTTP_Test_no_ASPs", "tc_stress", "HTTP_Test_no_ASPs", "HTTP_client", "HTTP_Test_no_ASPs", "HTTP_client", has_timer, timer_value);
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 344 */
ptcList ptc;
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 345 */
INTEGER r;
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 347 */
r = 0;
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 347 */
for ( ; ; ) {
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 347 */
if (!(r < n)) break;
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 348 */
ptc[r] = TTCN_Runtime::create_component("HTTP_Test_no_ASPs", "HTTP_client", NULL, NULL, FALSE);
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 347 */
{
INTEGER tmp_42;
++r;
}
}
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 351 */
r = 0;
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 351 */
for ( ; ; ) {
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 351 */
if (!(r < n)) break;
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 352 */
start_singleTC(const_cast< const ptcList&>(ptc)[r]);
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 351 */
{
INTEGER tmp_44;
++r;
}
}
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 355 */
r = 0;
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 355 */
for ( ; ; ) {
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 355 */
if (!(r < n)) break;
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 356 */
{
tmp_46:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = const_cast< const ptcList&>(ptc)[r].done(NULL, NULL);
if (alt_flag == ALT_YES) break;
else if (alt_flag == ALT_REPEAT) goto tmp_46;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_46;
}
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 356 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone done statement failed in file ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 356.");
TTCN_Snapshot::take_new(TRUE);
}
}
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 355 */
{
INTEGER tmp_47;
++r;
}
}
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case tc_stress was stopped.");
}
return TTCN_Runtime::end_testcase();
}

verdicttype testcase_tc__stress__Persistent__both(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
try {
TTCN_Runtime::begin_testcase("HTTP_Test_no_ASPs", "tc_stress_Persistent_both", "HTTP_Test_no_ASPs", "HTTP_client", "HTTP_Test_no_ASPs", "HTTP_client", has_timer, timer_value);
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 362 */
COMPONENT client__PTC;
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 363 */
client__PTC = TTCN_Runtime::create_component("HTTP_Test_no_ASPs", "HTTP_client", NULL, NULL, FALSE);
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 364 */
COMPONENT server__PTC;
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 365 */
server__PTC = TTCN_Runtime::create_component("HTTP_Test_no_ASPs", "HTTP_server", NULL, NULL, FALSE);
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 367 */
start_server__TC(server__PTC);
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 368 */
TIMER t__wait("t_wait", 1.0e-1);
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 369 */
t__wait.start();
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 370 */
{
tmp_50:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = t__wait.timeout(NULL);
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_50;
}
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 370 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone timeout statement failed in file ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 370.");
TTCN_Snapshot::take_new(TRUE);
}
}
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 371 */
start_singleTC(client__PTC);
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 373 */
{
tmp_51:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = client__PTC.done(NULL, NULL);
if (alt_flag == ALT_YES) break;
else if (alt_flag == ALT_REPEAT) goto tmp_51;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_51;
}
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 373 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone done statement failed in file ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 373.");
TTCN_Snapshot::take_new(TRUE);
}
}
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 374 */
{
tmp_52:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = server__PTC.done(NULL, NULL);
if (alt_flag == ALT_YES) break;
else if (alt_flag == ALT_REPEAT) goto tmp_52;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_52;
}
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 374 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone done statement failed in file ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 374.");
TTCN_Snapshot::take_new(TRUE);
}
}
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case tc_stress_Persistent_both was stopped.");
}
return TTCN_Runtime::end_testcase();
}

verdicttype testcase_tc__server(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
try {
TTCN_Runtime::begin_testcase("HTTP_Test_no_ASPs", "tc_server", "HTTP_Test_no_ASPs", "HTTP_server", "HTTP_Test_no_ASPs", "HTTP_server", has_timer, timer_value);
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 379 */
server__TC();
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case tc_server was stopped.");
}
return TTCN_Runtime::end_testcase();
}

verdicttype testcase_tc__client(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
try {
TTCN_Runtime::begin_testcase("HTTP_Test_no_ASPs", "tc_client", "HTTP_Test_no_ASPs", "HTTP_client", "HTTP_Test_no_ASPs", "HTTP_client", has_timer, timer_value);
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 384 */
singleTC();
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case tc_client was stopped.");
}
return TTCN_Runtime::end_testcase();
}

verdicttype testcase_tc__http__encDec(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
try {
TTCN_Runtime::begin_testcase("HTTP_Test_no_ASPs", "tc_http_encDec", "HTTP_Test_no_ASPs", "MTC", "HTTP_Test_no_ASPs", "MTC", has_timer, timer_value);
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 390 */
f__EncDec();
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case tc_http_encDec was stopped.");
}
return TTCN_Runtime::end_testcase();
}

verdicttype testcase_tc__http__encDec2(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
try {
TTCN_Runtime::begin_testcase("HTTP_Test_no_ASPs", "tc_http_encDec2", "HTTP_Test_no_ASPs", "MTC", "HTTP_Test_no_ASPs", "MTC", has_timer, timer_value);
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 395 */
f__EncDec2();
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case tc_http_encDec2 was stopped.");
}
return TTCN_Runtime::end_testcase();
}


/* Bodies of static functions */

static void pre_init_module()
{
HTTPmsg__PortType::module_object.pre_init_module();
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 12 */
modulepar_HttpServerHostName = cs_0;
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 13 */
modulepar_HttpServerPort = 80;
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 14 */
modulepar_HTTPClientUseSSL = FALSE;
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 15 */
modulepar_HttpServerListenPort = 1026;
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 16 */
modulepar_HttpServerUseSSL = FALSE;
module_object.add_function("TC", (genericfunc_t)&TC, (genericfunc_t)&start_TC);
module_object.add_function("server_TC", (genericfunc_t)&server__TC, (genericfunc_t)&start_server__TC);
module_object.add_function("f_singleEncDecCheck", (genericfunc_t)&f__singleEncDecCheck, NULL);
module_object.add_function("f_EncDec", (genericfunc_t)&f__EncDec, (genericfunc_t)&start_f__EncDec);
module_object.add_function("f_EncDec2", (genericfunc_t)&f__EncDec2, (genericfunc_t)&start_f__EncDec2);
module_object.add_function("singleTC", (genericfunc_t)&singleTC, (genericfunc_t)&start_singleTC);
module_object.add_testcase_nonpard("parallel_TC_client", testcase_parallel__TC__client);
module_object.add_testcase_nonpard("tc_parallel_server", testcase_tc__parallel__server);
module_object.add_testcase_pard("tc_stress", (genericfunc_t)&testcase_tc__stress);
module_object.add_testcase_nonpard("tc_stress_Persistent_both", testcase_tc__stress__Persistent__both);
module_object.add_testcase_nonpard("tc_server", testcase_tc__server);
module_object.add_testcase_nonpard("tc_client", testcase_tc__client);
module_object.add_testcase_nonpard("tc_http_encDec", testcase_tc__http__encDec);
module_object.add_testcase_nonpard("tc_http_encDec2", testcase_tc__http__encDec2);
}

static void post_init_module()
{
HTTPmsg__PortType::module_object.post_init_module();
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 42 */
template_h.client__id() = ANY_VALUE;
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 43 */
template_recv__resp.response() = ANY_VALUE;
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 44 */
template_recv__req.request() = ANY_VALUE;
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 45 */
template_recv__err.erronous__msg() = ANY_VALUE;
}

static boolean set_module_param(Module_Param& param)
{
const char* const par_name = param.get_id()->get_current_name();
if (!strcmp(par_name, "HttpServerHostName")) {
modulepar_HttpServerHostName.set_param(param);
return TRUE;
} else if (!strcmp(par_name, "HttpServerPort")) {
modulepar_HttpServerPort.set_param(param);
return TRUE;
} else if (!strcmp(par_name, "HTTPClientUseSSL")) {
modulepar_HTTPClientUseSSL.set_param(param);
return TRUE;
} else if (!strcmp(par_name, "HttpServerListenPort")) {
modulepar_HttpServerListenPort.set_param(param);
return TRUE;
} else if (!strcmp(par_name, "HttpServerUseSSL")) {
modulepar_HttpServerUseSSL.set_param(param);
return TRUE;
} else return FALSE;
}

static void log_module_param()
{
TTCN_Logger::log_event_str("HttpServerHostName := ");
HttpServerHostName.log();
TTCN_Logger::log_event_str(", HttpServerPort := ");
HttpServerPort.log();
TTCN_Logger::log_event_str(", HTTPClientUseSSL := ");
HTTPClientUseSSL.log();
TTCN_Logger::log_event_str(", HttpServerListenPort := ");
HttpServerListenPort.log();
TTCN_Logger::log_event_str(", HttpServerUseSSL := ");
HttpServerUseSSL.log();
}

static boolean init_comp_type(const char *component_type, boolean init_base_comps)
{
(void)init_base_comps;
if (!strcmp(component_type, "MTC")) {
return TRUE;
} else if (!strcmp(component_type, "HTTP_client")) {
HTTP__client_component_HTTP__client__port.activate_port();
return TRUE;
} else if (!strcmp(component_type, "HTTP_server")) {
HTTP__server_component_HTTP__server__port.activate_port();
return TRUE;
} else return FALSE;
}

static boolean init_system_port(const char* component_type, const char* port_name)
{
if (!strcmp(component_type, "HTTP_client")) {
if (!strcmp(port_name, "HTTP_client_port")) {
HTTP__client_component_HTTP__client__port.safe_start();
return TRUE;
}
}
else if (!strcmp(component_type, "HTTP_server")) {
if (!strcmp(port_name, "HTTP_server_port")) {
HTTP__server_component_HTTP__server__port.safe_start();
return TRUE;
}
}
return FALSE;
}

static boolean start_ptc_function(const char *function_name, Text_Buf& function_arguments)
{
if (!strcmp(function_name, "TC")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function TC().");
TTCN_Runtime::function_started(function_arguments);
TC();
TTCN_Runtime::function_finished("TC");
return TRUE;
} else if (!strcmp(function_name, "server_TC")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function server_TC().");
TTCN_Runtime::function_started(function_arguments);
server__TC();
TTCN_Runtime::function_finished("server_TC");
return TRUE;
} else if (!strcmp(function_name, "f_EncDec")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_EncDec().");
TTCN_Runtime::function_started(function_arguments);
f__EncDec();
TTCN_Runtime::function_finished("f_EncDec");
return TRUE;
} else if (!strcmp(function_name, "f_EncDec2")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_EncDec2().");
TTCN_Runtime::function_started(function_arguments);
f__EncDec2();
TTCN_Runtime::function_finished("f_EncDec2");
return TRUE;
} else if (!strcmp(function_name, "singleTC")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function singleTC().");
TTCN_Runtime::function_started(function_arguments);
singleTC();
TTCN_Runtime::function_finished("singleTC");
return TRUE;
} else return FALSE;
}

static void module_control_part()
{
TTCN_Runtime::begin_controlpart("HTTP_Test_no_ASPs");
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 399 */
TTCN_Logger::log_str(TTCN_USER, "control started");
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 405 */
testcase_tc__http__encDec(FALSE, 0.0);
/* ../titan.TestPorts.HTTPmsg/demo/HTTP_Test_no_ASPs.ttcn, line 406 */
testcase_tc__http__encDec2(FALSE, 0.0);
TTCN_Runtime::end_controlpart();
}


} /* end of namespace */
