// This C++ header file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/6 R4C
// for U-LAYTEC\mcleish (mcleish@LT-411-0143) on Mon Jan  7 15:18:13 2019

// Copyright (c) 2000-2018 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

#ifndef Test_HH
#define Test_HH

#ifdef TITAN_RUNTIME_2
#error Generated code does not match with used runtime.\
 Code was generated without -R option but -DTITAN_RUNTIME_2 was used.
#endif

/* Header file includes */

#include <TTCN3.hh>
#include "geoplugin.hh"
#include "HTTPmsg_PortType.hh"

#if TTCN3_VERSION != 60402
#error Version mismatch detected.\
 Please check the version of the TTCN-3 compiler and the base library.\
 Run make clean and rebuild the project if the version of the compiler changed recently.
#endif

#ifndef WIN32
#error This file should be compiled on WIN32
#endif

#undef Test_HH
#endif

namespace Test {

/* Forward declarations of classes */

class Http__state;
class Http__state_template;

} /* end of namespace */

#ifndef Test_HH
#define Test_HH

namespace Test {

/* Type definitions */

typedef COMPONENT HTTP__CT;
typedef COMPONENT_template HTTP__CT_template;

/* Class definitions */

class Http__state : public Base_Type { // enum
friend class Http__state_template;
public:
enum enum_type { active = 0, passive = 1, UNKNOWN_VALUE = 2, UNBOUND_VALUE = 3 };
private:
enum_type enum_value;

public:
Http__state();
Http__state(int other_value);
Http__state(enum_type other_value);
Http__state(const Http__state& other_value);

Http__state& operator=(int other_value);
Http__state& operator=(enum_type other_value);
Http__state& operator=(const Http__state& other_value);

boolean operator==(enum_type other_value) const;
boolean operator==(const Http__state& other_value) const;
inline boolean operator!=(enum_type other_value) const { return !(*this == other_value); }
inline boolean operator!=(const Http__state& other_value) const { return !(*this == other_value); }
boolean operator<(enum_type other_value) const;
boolean operator<(const Http__state& other_value) const;
boolean operator>(enum_type other_value) const;
boolean operator>(const Http__state& other_value) const;
inline boolean operator<=(enum_type other_value) const { return !(*this > other_value); }
inline boolean operator<=(const Http__state& other_value) const { return !(*this > other_value); }
inline boolean operator>=(enum_type other_value) const { return !(*this < other_value); }
inline boolean operator>=(const Http__state& other_value) const { return !(*this < other_value); }

static const char *enum_to_str(enum_type enum_par);
static enum_type str_to_enum(const char *str_par);
static boolean is_valid_enum(int int_par);

static int enum2int(enum_type enum_par);
static int enum2int(const Http__state& enum_par);
int as_int() const { return enum2int(enum_value); }
void from_int(int p_val) { *this = p_val; }
void int2enum(int int_val);
operator enum_type() const;
inline boolean is_bound() const { return enum_value != UNBOUND_VALUE; }
inline boolean is_value() const { return enum_value != UNBOUND_VALUE; }
inline void clean_up(){ enum_value = UNBOUND_VALUE; }
inline boolean is_present() const { return is_bound(); }
void log() const;
void set_param(Module_Param& param);
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
};

class Http__state_template : public Base_Template {
union {
Http__state::enum_type single_value;
struct {
unsigned int n_values;
Http__state_template *list_value;
} value_list;
};

void copy_template(const Http__state_template& other_value);

public:
Http__state_template();
Http__state_template(template_sel other_value);
Http__state_template(int other_value);
Http__state_template(Http__state::enum_type other_value);
Http__state_template(const Http__state& other_value);
Http__state_template(const OPTIONAL<Http__state>& other_value);
Http__state_template(const Http__state_template& other_value);
~Http__state_template();

boolean is_bound() const;
boolean is_value() const;
void clean_up();
Http__state_template& operator=(template_sel other_value);
Http__state_template& operator=(int other_value);
Http__state_template& operator=(Http__state::enum_type other_value);
Http__state_template& operator=(const Http__state& other_value);
Http__state_template& operator=(const OPTIONAL<Http__state>& other_value);
Http__state_template& operator=(const Http__state_template& other_value);

boolean match(Http__state::enum_type other_value, boolean legacy = FALSE) const;
boolean match(const Http__state& other_value, boolean legacy = FALSE) const;
Http__state::enum_type valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
Http__state_template& list_item(unsigned int list_index);
void log() const;
void log_match(const Http__state& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
};


/* Function prototypes */

extern CHARSTRING ContentLength(const CHARSTRING& par__body);
extern verdicttype testcase_tc__geoplugin(boolean has_timer, double timer_value);

/* Global variable declarations */

extern const CHARSTRING& v__hostname;
extern const INTEGER& v__port;
extern const CHARSTRING& v__path;
extern const TTCN_Typedescriptor_t Http__state_descr_;
extern const TTCN_Typedescriptor_t& HTTP__CT_descr_;
extern HTTPmsg__PortType::HTTPmsg__PT HTTP__CT_component_HTTP__PCO;
extern const HTTPmsg__Types::HTTPMessage_template& t__request;
extern const HTTPmsg__Types::Close_template& t__close;
extern TTCN_Module module_object;

} /* end of namespace */

#endif
