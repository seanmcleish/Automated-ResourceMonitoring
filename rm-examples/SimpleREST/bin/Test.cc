// This C++ source file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/6 R4C
// for U-LAYTEC\mcleish (mcleish@LT-411-0143) on Mon Jan  7 15:18:13 2019

// Copyright (c) 2000-2018 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

/* Including header files */

#include "Test.hh"

namespace Test {

/* Prototypes of static functions */

static void pre_init_module();
static void post_init_module();
static boolean set_module_param(Module_Param& param);
static void log_module_param();
static boolean init_comp_type(const char *component_type, boolean init_base_comps);
static boolean init_system_port(const char* component_type, const char* port_name);
static void module_control_part();

/* Literal string constants */

static const CHARSTRING cs_4(0, NULL),
cs_1(36, "/memory/972238848/memoryValues/5/min"),
cs_2(3, "GET"),
cs_3(4, "Host"),
cs_0(9, "localhost");
static const unsigned char module_checksum[] = { 0x16, 0x04, 0x82, 0x19, 0x7b, 0xcf, 0x3a, 0x66, 0x3c, 0xd3, 0x5e, 0xa8, 0xfd, 0xc2, 0x82, 0x35 };

/* Global variable definitions */

static CHARSTRING modulepar_v__hostname;
const CHARSTRING& v__hostname = modulepar_v__hostname;
static INTEGER modulepar_v__port;
const INTEGER& v__port = modulepar_v__port;
static CHARSTRING modulepar_v__path;
const CHARSTRING& v__path = modulepar_v__path;
// No XER for Http__state
const TTCN_Typedescriptor_t Http__state_descr_ = { "@Test.Http_state", NULL, NULL, NULL, NULL, NULL, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const TTCN_Typedescriptor_t& HTTP__CT_descr_ = COMPONENT_descr_;
HTTPmsg__PortType::HTTPmsg__PT HTTP__CT_component_HTTP__PCO("HTTP_PCO");
static HTTPmsg__Types::HTTPMessage_template template_t__request;
const HTTPmsg__Types::HTTPMessage_template& t__request = template_t__request;
static HTTPmsg__Types::Close_template template_t__close;
const HTTPmsg__Types::Close_template& t__close = template_t__close;
TTCN_Module module_object("Test", __DATE__, __TIME__, module_checksum, pre_init_module, NULL, 0U, 4294967295U, 4294967295U, 4294967295U, NULL, 0LU, 0, post_init_module, set_module_param, NULL, log_module_param, init_comp_type, init_system_port, NULL, module_control_part);

static const RuntimeVersionChecker ver_checker(  current_runtime_version.requires_major_version_6,
  current_runtime_version.requires_minor_version_4,
  current_runtime_version.requires_patch_level_2,  current_runtime_version.requires_runtime_1);

/* Member functions of C++ classes */

Http__state::Http__state()
{
enum_value = UNBOUND_VALUE;
}

Http__state::Http__state(int other_value)
{
if (!is_valid_enum(other_value)) TTCN_error("Initializing a variable of enumerated type @Test.Http_state with invalid numeric value %d.", other_value);
enum_value = (enum_type)other_value;
}

Http__state::Http__state(enum_type other_value)
{
enum_value = other_value;
}

Http__state::Http__state(const Http__state& other_value)
: Base_Type()
{
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("Copying an unbound value of enumerated type @Test.Http_state.");
enum_value = other_value.enum_value;
}

Http__state& Http__state::operator=(int other_value)
{
if (!is_valid_enum(other_value)) TTCN_error("Assigning unknown numeric value %d to a variable of enumerated type @Test.Http_state.", other_value);
enum_value = (enum_type)other_value;
return *this;
}

Http__state& Http__state::operator=(enum_type other_value)
{
enum_value = other_value;
return *this;
}

Http__state& Http__state::operator=(const Http__state& other_value)
{
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("Assignment of an unbound value of enumerated type @Test.Http_state.");
enum_value = other_value.enum_value;
return *this;
}

boolean Http__state::operator==(enum_type other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @Test.Http_state.");
return enum_value == other_value;
}

boolean Http__state::operator==(const Http__state& other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @Test.Http_state.");
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of enumerated type @Test.Http_state.");
return enum_value == other_value.enum_value;
}

boolean Http__state::operator<(enum_type other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @Test.Http_state.");
return enum_value < other_value;
}

boolean Http__state::operator<(const Http__state& other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @Test.Http_state.");
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of enumerated type @Test.Http_state.");
return enum_value < other_value.enum_value;
}

boolean Http__state::operator>(enum_type other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @Test.Http_state.");
return enum_value > other_value;
}

boolean Http__state::operator>(const Http__state& other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @Test.Http_state.");
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of enumerated type @Test.Http_state.");
return enum_value > other_value.enum_value;
}

const char *Http__state::enum_to_str(enum_type enum_par)
{
switch (enum_par) {
case active: return "active";
case passive: return "passive";
default: return "<unknown>";
}
}

Http__state::enum_type Http__state::str_to_enum(const char *str_par)
{
if (!strcmp(str_par, "active")) return active;
else if (!strcmp(str_par, "passive")) return passive;
else return UNKNOWN_VALUE;
}

boolean Http__state::is_valid_enum(int int_par)
{
switch (int_par) {
case 0:
case 1:
return TRUE;
default:
return FALSE;
}
}

int Http__state::enum2int(enum_type enum_par)
{
if (enum_par==UNBOUND_VALUE || enum_par==UNKNOWN_VALUE) TTCN_error("The argument of function enum2int() is an %s value of enumerated type @Test.Http_state.", enum_par==UNBOUND_VALUE?"unbound":"invalid");
return enum_par;
}

int Http__state::enum2int(const Http__state& enum_par)
{
if (enum_par.enum_value==UNBOUND_VALUE || enum_par.enum_value==UNKNOWN_VALUE) TTCN_error("The argument of function enum2int() is an %s value of enumerated type @Test.Http_state.", enum_par==UNBOUND_VALUE?"unbound":"invalid");
return enum_par.enum_value;
}

void Http__state::int2enum(int int_val)
{
if (!is_valid_enum(int_val)) TTCN_error("Assigning invalid numeric value %d to a variable of enumerated type @Test.Http_state.", int_val);
enum_value = (enum_type)int_val;
}

Http__state::operator Http__state::enum_type() const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("Using the value of an unbound variable of enumerated type @Test.Http_state.");
return enum_value;
}

void Http__state::log() const
{
if (enum_value != UNBOUND_VALUE) TTCN_Logger::log_event_enum(enum_to_str(enum_value), enum_value);
else TTCN_Logger::log_event_unbound();
}

void Http__state::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE, "enumerated value");
  if (param.get_type()!=Module_Param::MP_Enumerated) param.type_error("enumerated value", "@Test.Http_state");
  enum_value = str_to_enum(param.get_enumerated());
  if (!is_valid_enum(enum_value)) {
    param.error("Invalid enumerated value for type @Test.Http_state.");
  }
}

void Http__state::encode_text(Text_Buf& text_buf) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("Text encoder: Encoding an unbound value of enumerated type @Test.Http_state.");
text_buf.push_int(enum_value);
}

void Http__state::decode_text(Text_Buf& text_buf)
{
enum_value = (enum_type)text_buf.pull_int().get_val();
if (!is_valid_enum(enum_value)) TTCN_error("Text decoder: Unknown numeric value %d was received for enumerated type @Test.Http_state.", enum_value);
}

void Http__state_template::copy_template(const Http__state_template& other_value)
{
set_selection(other_value);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = other_value.single_value;
break;
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Http__state_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of enumerated type @Test.Http_state.");
}
}

Http__state_template::Http__state_template()
{
}

Http__state_template::Http__state_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

Http__state_template::Http__state_template(int other_value)
 : Base_Template(SPECIFIC_VALUE)
{
if (!Http__state::is_valid_enum(other_value)) TTCN_error("Initializing a template of enumerated type @Test.Http_state with unknown numeric value %d.", other_value);
single_value = (Http__state::enum_type)other_value;
}

Http__state_template::Http__state_template(Http__state::enum_type other_value)
 : Base_Template(SPECIFIC_VALUE)
{
single_value = other_value;
}

Http__state_template::Http__state_template(const Http__state& other_value)
 : Base_Template(SPECIFIC_VALUE)
{
if (other_value.enum_value == Http__state::UNBOUND_VALUE) TTCN_error("Creating a template from an unbound value of enumerated type @Test.Http_state.");
single_value = other_value.enum_value;
}

Http__state_template::Http__state_template(const OPTIONAL<Http__state>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
set_selection(SPECIFIC_VALUE);
single_value = (Http__state::enum_type)(const Http__state&)other_value;
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of enumerated type @Test.Http_state from an unbound optional field.");
}
}

Http__state_template::Http__state_template(const Http__state_template& other_value)
 : Base_Template()
{
copy_template(other_value);
}

Http__state_template::~Http__state_template()
{
clean_up();
}

boolean Http__state_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
return TRUE;
}

boolean Http__state_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
return single_value != Http__state::UNBOUND_VALUE;
}

void Http__state_template::clean_up()
{
if (template_selection == VALUE_LIST || template_selection == COMPLEMENTED_LIST) delete [] value_list.list_value;
template_selection = UNINITIALIZED_TEMPLATE;
}

Http__state_template& Http__state_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Http__state_template& Http__state_template::operator=(int other_value)
{
if (!Http__state::is_valid_enum(other_value)) TTCN_warning("Assigning unknown numeric value %d to a template of enumerated type @Test.Http_state.", other_value);
clean_up();
set_selection(SPECIFIC_VALUE);
single_value = (Http__state::enum_type)other_value;
return *this;
}

Http__state_template& Http__state_template::operator=(Http__state::enum_type other_value)
{
clean_up();
set_selection(SPECIFIC_VALUE);
single_value = other_value;
return *this;
}

Http__state_template& Http__state_template::operator=(const Http__state& other_value)
{
if (other_value.enum_value == Http__state::UNBOUND_VALUE) TTCN_error("Assignment of an unbound value of enumerated type @Test.Http_state to a template.");
clean_up();
set_selection(SPECIFIC_VALUE);
single_value = other_value.enum_value;
return *this;
}

Http__state_template& Http__state_template::operator=(const OPTIONAL<Http__state>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
set_selection(SPECIFIC_VALUE);
single_value = (Http__state::enum_type)(const Http__state&)other_value;
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of enumerated type @Test.Http_state.");
}
return *this;
}

Http__state_template& Http__state_template::operator=(const Http__state_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean Http__state_template::match(Http__state::enum_type other_value, boolean) const
{
switch (template_selection) {
case SPECIFIC_VALUE:
return single_value == other_value;
case OMIT_VALUE:
return FALSE;
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of enumerated type @Test.Http_state.");
}
return FALSE;
}

boolean Http__state_template::match(const Http__state& other_value, boolean) const
{
if (other_value.enum_value == Http__state::UNBOUND_VALUE) TTCN_error("Matching a template of enumerated type @Test.Http_state with an unbound value.");
return match(other_value.enum_value);
}

Http__state::enum_type Http__state_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) TTCN_error("Performing a valueof or send operation on a non-specific template of enumerated type @Test.Http_state.");
return single_value;
}

void Http__state_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST) TTCN_error("Setting an invalid list type for a template of enumerated type @Test.Http_state.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new Http__state_template[list_length];
}

Http__state_template& Http__state_template::list_item(unsigned int list_index)
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST) TTCN_error("Accessing a list element in a non-list template of enumerated type @Test.Http_state.");
if (list_index >= value_list.n_values) TTCN_error("Index overflow in a value list template of enumerated type @Test.Http_state.");
return value_list.list_value[list_index];
}

void Http__state_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_enum(Http__state::enum_to_str(single_value), single_value);
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int elem_count = 0; elem_count < value_list.n_values; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[elem_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void Http__state_template::log_match(const Http__state& match_value, boolean) const
{
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}

void Http__state_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
text_buf.push_int(single_value);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int elem_count = 0; elem_count < value_list.n_values; elem_count++)
value_list.list_value[elem_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of enumerated type @Test.Http_state.");
}
}

void Http__state_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = (Http__state::enum_type)text_buf.pull_int().get_val();
if (!Http__state::is_valid_enum(single_value)) TTCN_error("Text decoder: Unknown numeric value %d was received for a template of enumerated type @Test.Http_state.", single_value);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Http__state_template[value_list.n_values];
for (unsigned int elem_count = 0; elem_count < value_list.n_values; elem_count++)
value_list.list_value[elem_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received for a template of enumerated type @Test.Http_state.");
}
}

boolean Http__state_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean Http__state_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int i=0; i<value_list.n_values; i++)
if (value_list.list_value[i].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

void Http__state_template::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_TEMPLATE, "enumerated template");
  Module_Param_Ptr m_p = &param;
  switch (m_p->get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    Http__state_template new_temp;
    new_temp.set_type(m_p->get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, m_p->get_size());
    for (size_t p_i=0; p_i<m_p->get_size(); p_i++) {
      new_temp.list_item(p_i).set_param(*m_p->get_elem(p_i));
    }
    *this = new_temp;
    break; }
  case Module_Param::MP_Enumerated: {
    Http__state::enum_type enum_val = Http__state::str_to_enum(m_p->get_enumerated());
    if (!Http__state::is_valid_enum(enum_val)) {
      param.error("Invalid enumerated value for type @Test.Http_state.");
    }
    *this = enum_val;
  } break;
  default:
    param.type_error("enumerated template", "@Test.Http_state");
  }
  is_ifpresent = param.get_ifpresent();
}

void Http__state_template::check_restriction(template_res t_res, const char* t_name,
boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_VALUE:
if (!is_ifpresent && template_selection==SPECIFIC_VALUE) return;
break;
case TR_OMIT:
if (!is_ifpresent && (template_selection==OMIT_VALUE || template_selection==SPECIFIC_VALUE)) return;
break;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@Test.Http_state");
}


/* Bodies of functions, altsteps and testcases */

CHARSTRING ContentLength(const CHARSTRING& par__body)
{
/* ../Test.ttcn, line 24 */
CHARSTRING a(int2str(par__body.lengthof()));
/* ../Test.ttcn, line 25 */
return a;
}

verdicttype testcase_tc__geoplugin(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
try {
TTCN_Runtime::begin_testcase("Test", "tc_geoplugin", "Test", "HTTP_CT", "Test", "HTTP_CT", has_timer, timer_value);
/* ../Test.ttcn, line 41 */
HTTPmsg__Types::Connect__result v__Connect__result;
/* ../Test.ttcn, line 42 */
CHARSTRING vl__char__body;
/* ../Test.ttcn, line 43 */
OCTETSTRING v__body;
/* ../Test.ttcn, line 44 */
HTTPmsg__Types::HTTPMessage v__HTTPMessage;
/* ../Test.ttcn, line 45 */
INTEGER v__http__client__id;
/* ../Test.ttcn, line 46 */
TIMER t0("t0", 5.0);
/* ../Test.ttcn, line 49 */
TTCN_Runtime::map_port(self, HTTP__CT_component_HTTP__PCO.get_name(), SYSTEM_COMPREF, HTTP__CT_component_HTTP__PCO.get_name());
/* ../Test.ttcn, line 51 */
HTTPmsg__Types::Connect vl__connect;
vl__connect.hostname() = v__hostname;
vl__connect.portnumber() = v__port;
vl__connect.use__ssl() = FALSE;
/* ../Test.ttcn, line 53 */
HTTP__CT_component_HTTP__PCO.send(vl__connect);
/* ../Test.ttcn, line 54 */
t0.start();
/* ../Test.ttcn, line 55 */
{
tmp_3:
alt_status tmp_3_alt_flag_0 = ALT_MAYBE;
alt_status tmp_3_alt_flag_1 = ALT_MAYBE;
alt_status tmp_3_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_3_alt_flag_0 == ALT_MAYBE) {
/* ../Test.ttcn, line 58 */
tmp_3_alt_flag_0 = HTTP__CT_component_HTTP__PCO.receive(HTTPmsg__Types::Connect__result_template(ANY_VALUE), &(v__Connect__result), any_compref, NULL, NULL, NULL);
if (tmp_3_alt_flag_0 == ALT_YES) {
/* ../Test.ttcn, line 58 */
v__http__client__id = const_cast< const HTTPmsg__Types::Connect__result&>(v__Connect__result).client__id();
break;
}
}
if (tmp_3_alt_flag_1 == ALT_MAYBE) {
/* ../Test.ttcn, line 59 */
tmp_3_alt_flag_1 = t0.timeout(NULL);
if (tmp_3_alt_flag_1 == ALT_YES) break;
}
if (tmp_3_default_flag == ALT_MAYBE) {
tmp_3_default_flag = TTCN_Default::try_altsteps();
if (tmp_3_default_flag == ALT_YES || tmp_3_default_flag == ALT_BREAK) break;
else if (tmp_3_default_flag == ALT_REPEAT) goto tmp_3;
}
/* ../Test.ttcn, line 55 */
if (tmp_3_alt_flag_0 == ALT_NO && tmp_3_alt_flag_1 == ALT_NO && tmp_3_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file ../Test.ttcn between lines 55 and 61.");
TTCN_Snapshot::take_new(TRUE);
}
}
/* ../Test.ttcn, line 62 */
HTTP__CT_component_HTTP__PCO.send(t__request);
/* ../Test.ttcn, line 63 */
{
tmp_5:
alt_status tmp_5_alt_flag_0 = ALT_MAYBE;
alt_status tmp_5_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_5_alt_flag_0 == ALT_MAYBE) {
/* ../Test.ttcn, line 65 */
tmp_5_alt_flag_0 = HTTP__CT_component_HTTP__PCO.receive(HTTPmsg__Types::HTTPMessage_template(ANY_VALUE), &(v__HTTPMessage), any_compref, NULL, NULL, NULL);
if (tmp_5_alt_flag_0 == ALT_YES) {
/* ../Test.ttcn, line 67 */
geoplugin::JSON__PDU v__JSON__PDU;
/* ../Test.ttcn, line 68 */
if (v__HTTPMessage.ischosen(HTTPmsg__Types::HTTPMessage::ALT_response__binary)) {
/* ../Test.ttcn, line 70 */
v__JSON__PDU = geoplugin::dec__JSON(const_cast< const HTTPmsg__Types::HTTPMessage&>(v__HTTPMessage).response__binary().body());
/* ../Test.ttcn, line 71 */
TTCN_Runtime::setverdict(PASS);
}
/* ../Test.ttcn, line 73 */
if (v__HTTPMessage.ischosen(HTTPmsg__Types::HTTPMessage::ALT_response)) {
/* ../Test.ttcn, line 75 */
v__JSON__PDU = geoplugin::dec__JSON(char2oct(const_cast< const HTTPmsg__Types::HTTPMessage&>(v__HTTPMessage).response().body()));
/* ../Test.ttcn, line 76 */
TTCN_Runtime::setverdict(PASS);
}
else {
/* ../Test.ttcn, line 80 */
TTCN_Runtime::setverdict(FAIL);
}
break;
}
}
if (tmp_5_default_flag == ALT_MAYBE) {
tmp_5_default_flag = TTCN_Default::try_altsteps();
if (tmp_5_default_flag == ALT_YES || tmp_5_default_flag == ALT_BREAK) break;
else if (tmp_5_default_flag == ALT_REPEAT) goto tmp_5;
}
/* ../Test.ttcn, line 63 */
if (tmp_5_alt_flag_0 == ALT_NO && tmp_5_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file ../Test.ttcn between lines 63 and 83.");
TTCN_Snapshot::take_new(TRUE);
}
}
/* ../Test.ttcn, line 85 */
HTTP__CT_component_HTTP__PCO.send(t__close);
/* ../Test.ttcn, line 86 */
t0.start();
/* ../Test.ttcn, line 87 */
{
tmp_8:
alt_status tmp_8_alt_flag_0 = ALT_MAYBE;
alt_status tmp_8_alt_flag_1 = ALT_MAYBE;
alt_status tmp_8_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_8_alt_flag_0 == ALT_MAYBE) {
/* ../Test.ttcn, line 90 */
tmp_8_alt_flag_0 = HTTP__CT_component_HTTP__PCO.receive(any_compref, NULL, NULL, NULL);
if (tmp_8_alt_flag_0 == ALT_YES) break;
}
if (tmp_8_alt_flag_1 == ALT_MAYBE) {
/* ../Test.ttcn, line 91 */
tmp_8_alt_flag_1 = t0.timeout(NULL);
if (tmp_8_alt_flag_1 == ALT_YES) break;
}
if (tmp_8_default_flag == ALT_MAYBE) {
tmp_8_default_flag = TTCN_Default::try_altsteps();
if (tmp_8_default_flag == ALT_YES || tmp_8_default_flag == ALT_BREAK) break;
else if (tmp_8_default_flag == ALT_REPEAT) goto tmp_8;
}
/* ../Test.ttcn, line 87 */
if (tmp_8_alt_flag_0 == ALT_NO && tmp_8_alt_flag_1 == ALT_NO && tmp_8_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file ../Test.ttcn between lines 87 and 92.");
TTCN_Snapshot::take_new(TRUE);
}
}
/* ../Test.ttcn, line 95 */
TTCN_Runtime::kill_component(ALL_COMPREF);
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case tc_geoplugin was stopped.");
}
return TTCN_Runtime::end_testcase();
}


/* Bodies of static functions */

static void pre_init_module()
{
geoplugin::module_object.pre_init_module();
HTTPmsg__PortType::module_object.pre_init_module();
/* ../Test.ttcn, line 4 */
modulepar_v__hostname = cs_0;
/* ../Test.ttcn, line 5 */
modulepar_v__port = 8090;
/* ../Test.ttcn, line 6 */
modulepar_v__path = cs_1;
module_object.add_function("ContentLength", (genericfunc_t)&ContentLength, NULL);
module_object.add_testcase_nonpard("tc_geoplugin", testcase_tc__geoplugin);
}

static void post_init_module()
{
geoplugin::module_object.post_init_module();
HTTPmsg__PortType::module_object.post_init_module();
/* ../Test.ttcn, line 31 */
{
HTTPmsg__Types::HTTPRequest_template& tmp_0 = template_t__request.request();
tmp_0.client__id() = OMIT_VALUE;
tmp_0.method() = cs_2;
tmp_0.uri() = v__path;
tmp_0.version__major() = 1;
tmp_0.version__minor() = 1;
{
HTTPmsg__Types::HeaderLines_template& tmp_1 = tmp_0.header();
tmp_1.set_size(1);
{
HTTPmsg__Types::HeaderLine_template& tmp_2 = tmp_1[0];
tmp_2.header__name() = cs_3;
tmp_2.header__value() = v__hostname;
}
}
tmp_0.body() = cs_4;
}
/* ../Test.ttcn, line 33 */
template_t__close.client__id() = OMIT_VALUE;
}

static boolean set_module_param(Module_Param& param)
{
const char* const par_name = param.get_id()->get_current_name();
if (!strcmp(par_name, "v_hostname")) {
modulepar_v__hostname.set_param(param);
return TRUE;
} else if (!strcmp(par_name, "v_port")) {
modulepar_v__port.set_param(param);
return TRUE;
} else if (!strcmp(par_name, "v_path")) {
modulepar_v__path.set_param(param);
return TRUE;
} else return FALSE;
}

static void log_module_param()
{
TTCN_Logger::log_event_str("v_hostname := ");
v__hostname.log();
TTCN_Logger::log_event_str(", v_port := ");
v__port.log();
TTCN_Logger::log_event_str(", v_path := ");
v__path.log();
}

static boolean init_comp_type(const char *component_type, boolean init_base_comps)
{
(void)init_base_comps;
if (!strcmp(component_type, "HTTP_CT")) {
HTTP__CT_component_HTTP__PCO.activate_port();
return TRUE;
} else return FALSE;
}

static boolean init_system_port(const char* component_type, const char* port_name)
{
if (!strcmp(component_type, "HTTP_CT")) {
if (!strcmp(port_name, "HTTP_PCO")) {
HTTP__CT_component_HTTP__PCO.safe_start();
return TRUE;
}
}
return FALSE;
}

static void module_control_part()
{
TTCN_Runtime::begin_controlpart("Test");
/* ../Test.ttcn, line 100 */
testcase_tc__geoplugin(FALSE, 0.0);
TTCN_Runtime::end_controlpart();
}


} /* end of namespace */
